
pwm_avay_tst.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003524  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080036ec  080036ec  000046ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003704  08003704  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003704  08003704  00004704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800370c  0800370c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800370c  0800370c  0000470c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003710  08003710  00004710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003714  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000000c  08003720  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08003720  00005128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a63c  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a0f  00000000  00000000  0000f678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  00011088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000084d  00000000  00000000  00011b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000249c6  00000000  00000000  00012395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd96  00000000  00000000  00036d5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e74c1  00000000  00000000  00042af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00129fb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ca8  00000000  00000000  00129ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0012cca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080036d4 	.word	0x080036d4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080036d4 	.word	0x080036d4

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 fc5f 	bl	8000dbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f81e 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 f9ae 	bl	8000864 <MX_GPIO_Init>
  MX_DMA_Init();
 8000508:	f000 f98e 	bl	8000828 <MX_DMA_Init>
  MX_TIM1_Init();
 800050c:	f000 f886 	bl	800061c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000510:	f000 f930 	bl	8000774 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  TIM1->CCR1 = 30;
 8000514:	4b06      	ldr	r3, [pc, #24]	@ (8000530 <main+0x38>)
 8000516:	221e      	movs	r2, #30
 8000518:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800051a:	2100      	movs	r1, #0
 800051c:	4805      	ldr	r0, [pc, #20]	@ (8000534 <main+0x3c>)
 800051e:	f001 ffcb 	bl	80024b8 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  encoder_counter=TIM3->CNT;
 8000522:	4b05      	ldr	r3, [pc, #20]	@ (8000538 <main+0x40>)
 8000524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000526:	b29a      	uxth	r2, r3
 8000528:	4b04      	ldr	r3, [pc, #16]	@ (800053c <main+0x44>)
 800052a:	801a      	strh	r2, [r3, #0]
 800052c:	e7f9      	b.n	8000522 <main+0x2a>
 800052e:	bf00      	nop
 8000530:	40010000 	.word	0x40010000
 8000534:	2000002c 	.word	0x2000002c
 8000538:	40000400 	.word	0x40000400
 800053c:	20000028 	.word	0x20000028

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	@ 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0320 	add.w	r3, r7, #32
 800054a:	2230      	movs	r2, #48	@ 0x30
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f003 f894 	bl	800367c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	4b2b      	ldr	r3, [pc, #172]	@ (8000614 <SystemClock_Config+0xd4>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000568:	4a2a      	ldr	r2, [pc, #168]	@ (8000614 <SystemClock_Config+0xd4>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000570:	4b28      	ldr	r3, [pc, #160]	@ (8000614 <SystemClock_Config+0xd4>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057c:	4b26      	ldr	r3, [pc, #152]	@ (8000618 <SystemClock_Config+0xd8>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a25      	ldr	r2, [pc, #148]	@ (8000618 <SystemClock_Config+0xd8>)
 8000582:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	4b23      	ldr	r3, [pc, #140]	@ (8000618 <SystemClock_Config+0xd8>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000594:	2301      	movs	r3, #1
 8000596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000598:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800059c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059e:	2302      	movs	r3, #2
 80005a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005a8:	2319      	movs	r3, #25
 80005aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80005ac:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 80005b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80005b6:	2309      	movs	r3, #9
 80005b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ba:	f107 0320 	add.w	r3, r7, #32
 80005be:	4618      	mov	r0, r3
 80005c0:	f001 fa6c 	bl	8001a9c <HAL_RCC_OscConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005ca:	f000 fa6d 	bl	8000aa8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005ce:	f001 fa15 	bl	80019fc <HAL_PWREx_EnableOverDrive>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005d8:	f000 fa66 	bl	8000aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005dc:	230f      	movs	r3, #15
 80005de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e0:	2302      	movs	r3, #2
 80005e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80005ee:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2107      	movs	r1, #7
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 fcf2 	bl	8001fe4 <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000606:	f000 fa4f 	bl	8000aa8 <Error_Handler>
  }
}
 800060a:	bf00      	nop
 800060c:	3750      	adds	r7, #80	@ 0x50
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800
 8000618:	40007000 	.word	0x40007000

0800061c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b09a      	sub	sp, #104	@ 0x68
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000622:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000630:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800063c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
 800064c:	615a      	str	r2, [r3, #20]
 800064e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	222c      	movs	r2, #44	@ 0x2c
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f003 f810 	bl	800367c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800065c:	4b43      	ldr	r3, [pc, #268]	@ (800076c <MX_TIM1_Init+0x150>)
 800065e:	4a44      	ldr	r2, [pc, #272]	@ (8000770 <MX_TIM1_Init+0x154>)
 8000660:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000662:	4b42      	ldr	r3, [pc, #264]	@ (800076c <MX_TIM1_Init+0x150>)
 8000664:	2200      	movs	r2, #0
 8000666:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000668:	4b40      	ldr	r3, [pc, #256]	@ (800076c <MX_TIM1_Init+0x150>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 800066e:	4b3f      	ldr	r3, [pc, #252]	@ (800076c <MX_TIM1_Init+0x150>)
 8000670:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000674:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000676:	4b3d      	ldr	r3, [pc, #244]	@ (800076c <MX_TIM1_Init+0x150>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800067c:	4b3b      	ldr	r3, [pc, #236]	@ (800076c <MX_TIM1_Init+0x150>)
 800067e:	2200      	movs	r2, #0
 8000680:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000682:	4b3a      	ldr	r3, [pc, #232]	@ (800076c <MX_TIM1_Init+0x150>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000688:	4838      	ldr	r0, [pc, #224]	@ (800076c <MX_TIM1_Init+0x150>)
 800068a:	f001 fe5d 	bl	8002348 <HAL_TIM_Base_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000694:	f000 fa08 	bl	8000aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000698:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800069c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800069e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80006a2:	4619      	mov	r1, r3
 80006a4:	4831      	ldr	r0, [pc, #196]	@ (800076c <MX_TIM1_Init+0x150>)
 80006a6:	f002 fa49 	bl	8002b3c <HAL_TIM_ConfigClockSource>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80006b0:	f000 f9fa 	bl	8000aa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006b4:	482d      	ldr	r0, [pc, #180]	@ (800076c <MX_TIM1_Init+0x150>)
 80006b6:	f001 fe9e 	bl	80023f6 <HAL_TIM_PWM_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80006c0:	f000 f9f2 	bl	8000aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c4:	2300      	movs	r3, #0
 80006c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006c8:	2300      	movs	r3, #0
 80006ca:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006d0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80006d4:	4619      	mov	r1, r3
 80006d6:	4825      	ldr	r0, [pc, #148]	@ (800076c <MX_TIM1_Init+0x150>)
 80006d8:	f002 fec4 	bl	8003464 <HAL_TIMEx_MasterConfigSynchronization>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80006e2:	f000 f9e1 	bl	8000aa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006e6:	2360      	movs	r3, #96	@ 0x60
 80006e8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ee:	2300      	movs	r3, #0
 80006f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006f2:	2300      	movs	r3, #0
 80006f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006f6:	2300      	movs	r3, #0
 80006f8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006fa:	2300      	movs	r3, #0
 80006fc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006fe:	2300      	movs	r3, #0
 8000700:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000702:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000706:	2200      	movs	r2, #0
 8000708:	4619      	mov	r1, r3
 800070a:	4818      	ldr	r0, [pc, #96]	@ (800076c <MX_TIM1_Init+0x150>)
 800070c:	f002 f902 	bl	8002914 <HAL_TIM_PWM_ConfigChannel>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000716:	f000 f9c7 	bl	8000aa8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800072e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000732:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000738:	2300      	movs	r3, #0
 800073a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800073c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000740:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000746:	2300      	movs	r3, #0
 8000748:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	4619      	mov	r1, r3
 800074e:	4807      	ldr	r0, [pc, #28]	@ (800076c <MX_TIM1_Init+0x150>)
 8000750:	f002 ff16 	bl	8003580 <HAL_TIMEx_ConfigBreakDeadTime>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800075a:	f000 f9a5 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800075e:	4803      	ldr	r0, [pc, #12]	@ (800076c <MX_TIM1_Init+0x150>)
 8000760:	f000 fa80 	bl	8000c64 <HAL_TIM_MspPostInit>

}
 8000764:	bf00      	nop
 8000766:	3768      	adds	r7, #104	@ 0x68
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	2000002c 	.word	0x2000002c
 8000770:	40010000 	.word	0x40010000

08000774 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08c      	sub	sp, #48	@ 0x30
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800077a:	f107 030c 	add.w	r3, r7, #12
 800077e:	2224      	movs	r2, #36	@ 0x24
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f002 ff7a 	bl	800367c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000788:	463b      	mov	r3, r7
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000792:	4b23      	ldr	r3, [pc, #140]	@ (8000820 <MX_TIM3_Init+0xac>)
 8000794:	4a23      	ldr	r2, [pc, #140]	@ (8000824 <MX_TIM3_Init+0xb0>)
 8000796:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000798:	4b21      	ldr	r3, [pc, #132]	@ (8000820 <MX_TIM3_Init+0xac>)
 800079a:	2200      	movs	r2, #0
 800079c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079e:	4b20      	ldr	r3, [pc, #128]	@ (8000820 <MX_TIM3_Init+0xac>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80007a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000820 <MX_TIM3_Init+0xac>)
 80007a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000820 <MX_TIM3_Init+0xac>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000820 <MX_TIM3_Init+0xac>)
 80007b4:	2280      	movs	r2, #128	@ 0x80
 80007b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80007bc:	2300      	movs	r3, #0
 80007be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007c0:	2301      	movs	r3, #1
 80007c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80007cc:	2300      	movs	r3, #0
 80007ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007d0:	2301      	movs	r3, #1
 80007d2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	4619      	mov	r1, r3
 80007e2:	480f      	ldr	r0, [pc, #60]	@ (8000820 <MX_TIM3_Init+0xac>)
 80007e4:	f001 ff62 	bl	80026ac <HAL_TIM_Encoder_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80007ee:	f000 f95b 	bl	8000aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f2:	2300      	movs	r3, #0
 80007f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007fa:	463b      	mov	r3, r7
 80007fc:	4619      	mov	r1, r3
 80007fe:	4808      	ldr	r0, [pc, #32]	@ (8000820 <MX_TIM3_Init+0xac>)
 8000800:	f002 fe30 	bl	8003464 <HAL_TIMEx_MasterConfigSynchronization>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800080a:	f000 f94d 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 800080e:	2100      	movs	r1, #0
 8000810:	4803      	ldr	r0, [pc, #12]	@ (8000820 <MX_TIM3_Init+0xac>)
 8000812:	f001 fff1 	bl	80027f8 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM3_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	3730      	adds	r7, #48	@ 0x30
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000078 	.word	0x20000078
 8000824:	40000400 	.word	0x40000400

08000828 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800082e:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <MX_DMA_Init+0x38>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a0b      	ldr	r2, [pc, #44]	@ (8000860 <MX_DMA_Init+0x38>)
 8000834:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <MX_DMA_Init+0x38>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	2039      	movs	r0, #57	@ 0x39
 800084c:	f000 fbef 	bl	800102e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000850:	2039      	movs	r0, #57	@ 0x39
 8000852:	f000 fc08 	bl	8001066 <HAL_NVIC_EnableIRQ>

}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800

08000864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08c      	sub	sp, #48	@ 0x30
 8000868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	4b85      	ldr	r3, [pc, #532]	@ (8000a90 <MX_GPIO_Init+0x22c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a84      	ldr	r2, [pc, #528]	@ (8000a90 <MX_GPIO_Init+0x22c>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b82      	ldr	r3, [pc, #520]	@ (8000a90 <MX_GPIO_Init+0x22c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	61bb      	str	r3, [r7, #24]
 8000890:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000892:	4b7f      	ldr	r3, [pc, #508]	@ (8000a90 <MX_GPIO_Init+0x22c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a7e      	ldr	r2, [pc, #504]	@ (8000a90 <MX_GPIO_Init+0x22c>)
 8000898:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b7c      	ldr	r3, [pc, #496]	@ (8000a90 <MX_GPIO_Init+0x22c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4b79      	ldr	r3, [pc, #484]	@ (8000a90 <MX_GPIO_Init+0x22c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a78      	ldr	r2, [pc, #480]	@ (8000a90 <MX_GPIO_Init+0x22c>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b76      	ldr	r3, [pc, #472]	@ (8000a90 <MX_GPIO_Init+0x22c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	4b73      	ldr	r3, [pc, #460]	@ (8000a90 <MX_GPIO_Init+0x22c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a72      	ldr	r2, [pc, #456]	@ (8000a90 <MX_GPIO_Init+0x22c>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b70      	ldr	r3, [pc, #448]	@ (8000a90 <MX_GPIO_Init+0x22c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008da:	4b6d      	ldr	r3, [pc, #436]	@ (8000a90 <MX_GPIO_Init+0x22c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a6c      	ldr	r2, [pc, #432]	@ (8000a90 <MX_GPIO_Init+0x22c>)
 80008e0:	f043 0310 	orr.w	r3, r3, #16
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b6a      	ldr	r3, [pc, #424]	@ (8000a90 <MX_GPIO_Init+0x22c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0310 	and.w	r3, r3, #16
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f2:	4b67      	ldr	r3, [pc, #412]	@ (8000a90 <MX_GPIO_Init+0x22c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a66      	ldr	r2, [pc, #408]	@ (8000a90 <MX_GPIO_Init+0x22c>)
 80008f8:	f043 0308 	orr.w	r3, r3, #8
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fe:	4b64      	ldr	r3, [pc, #400]	@ (8000a90 <MX_GPIO_Init+0x22c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f003 0308 	and.w	r3, r3, #8
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800090a:	4b61      	ldr	r3, [pc, #388]	@ (8000a90 <MX_GPIO_Init+0x22c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a60      	ldr	r2, [pc, #384]	@ (8000a90 <MX_GPIO_Init+0x22c>)
 8000910:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b5e      	ldr	r3, [pc, #376]	@ (8000a90 <MX_GPIO_Init+0x22c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000928:	485a      	ldr	r0, [pc, #360]	@ (8000a94 <MX_GPIO_Init+0x230>)
 800092a:	f001 f84d 	bl	80019c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2140      	movs	r1, #64	@ 0x40
 8000932:	4859      	ldr	r0, [pc, #356]	@ (8000a98 <MX_GPIO_Init+0x234>)
 8000934:	f001 f848 	bl	80019c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000938:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800093e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	4853      	ldr	r0, [pc, #332]	@ (8000a9c <MX_GPIO_Init+0x238>)
 8000950:	f000 fe8e 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000954:	2332      	movs	r3, #50	@ 0x32
 8000956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000960:	2303      	movs	r3, #3
 8000962:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000964:	230b      	movs	r3, #11
 8000966:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	484b      	ldr	r0, [pc, #300]	@ (8000a9c <MX_GPIO_Init+0x238>)
 8000970:	f000 fe7e 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000974:	2386      	movs	r3, #134	@ 0x86
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000980:	2303      	movs	r3, #3
 8000982:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000984:	230b      	movs	r3, #11
 8000986:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	4844      	ldr	r0, [pc, #272]	@ (8000aa0 <MX_GPIO_Init+0x23c>)
 8000990:	f000 fe6e 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000994:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4839      	ldr	r0, [pc, #228]	@ (8000a94 <MX_GPIO_Init+0x230>)
 80009ae:	f000 fe5f 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80009b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c0:	2303      	movs	r3, #3
 80009c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009c4:	230b      	movs	r3, #11
 80009c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	4831      	ldr	r0, [pc, #196]	@ (8000a94 <MX_GPIO_Init+0x230>)
 80009d0:	f000 fe4e 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009d4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009de:	2301      	movs	r3, #1
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e2:	2303      	movs	r3, #3
 80009e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009e6:	2307      	movs	r3, #7
 80009e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	482c      	ldr	r0, [pc, #176]	@ (8000aa4 <MX_GPIO_Init+0x240>)
 80009f2:	f000 fe3d 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009f6:	2340      	movs	r3, #64	@ 0x40
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fa:	2301      	movs	r3, #1
 80009fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4822      	ldr	r0, [pc, #136]	@ (8000a98 <MX_GPIO_Init+0x234>)
 8000a0e:	f000 fe2f 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a12:	2380      	movs	r3, #128	@ 0x80
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a16:	2300      	movs	r3, #0
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	481c      	ldr	r0, [pc, #112]	@ (8000a98 <MX_GPIO_Init+0x234>)
 8000a26:	f000 fe23 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a2a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a3c:	230a      	movs	r3, #10
 8000a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	4816      	ldr	r0, [pc, #88]	@ (8000aa0 <MX_GPIO_Init+0x23c>)
 8000a48:	f000 fe12 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4619      	mov	r1, r3
 8000a60:	480f      	ldr	r0, [pc, #60]	@ (8000aa0 <MX_GPIO_Init+0x23c>)
 8000a62:	f000 fe05 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a66:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a78:	230b      	movs	r3, #11
 8000a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4619      	mov	r1, r3
 8000a82:	4805      	ldr	r0, [pc, #20]	@ (8000a98 <MX_GPIO_Init+0x234>)
 8000a84:	f000 fdf4 	bl	8001670 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a88:	bf00      	nop
 8000a8a:	3730      	adds	r7, #48	@ 0x30
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020400 	.word	0x40020400
 8000a98:	40021800 	.word	0x40021800
 8000a9c:	40020800 	.word	0x40020800
 8000aa0:	40020000 	.word	0x40020000
 8000aa4:	40020c00 	.word	0x40020c00

08000aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aac:	b672      	cpsid	i
}
 8000aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <Error_Handler+0x8>

08000ab4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	4b0f      	ldr	r3, [pc, #60]	@ (8000af8 <HAL_MspInit+0x44>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abe:	4a0e      	ldr	r2, [pc, #56]	@ (8000af8 <HAL_MspInit+0x44>)
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <HAL_MspInit+0x44>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <HAL_MspInit+0x44>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad6:	4a08      	ldr	r2, [pc, #32]	@ (8000af8 <HAL_MspInit+0x44>)
 8000ad8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000adc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ade:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <HAL_MspInit+0x44>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800

08000afc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a21      	ldr	r2, [pc, #132]	@ (8000b90 <HAL_TIM_Base_MspInit+0x94>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d13b      	bne.n	8000b86 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b0e:	4b21      	ldr	r3, [pc, #132]	@ (8000b94 <HAL_TIM_Base_MspInit+0x98>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b12:	4a20      	ldr	r2, [pc, #128]	@ (8000b94 <HAL_TIM_Base_MspInit+0x98>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b94 <HAL_TIM_Base_MspInit+0x98>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8000b26:	4b1c      	ldr	r3, [pc, #112]	@ (8000b98 <HAL_TIM_Base_MspInit+0x9c>)
 8000b28:	4a1c      	ldr	r2, [pc, #112]	@ (8000b9c <HAL_TIM_Base_MspInit+0xa0>)
 8000b2a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8000b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000b98 <HAL_TIM_Base_MspInit+0x9c>)
 8000b2e:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8000b32:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b34:	4b18      	ldr	r3, [pc, #96]	@ (8000b98 <HAL_TIM_Base_MspInit+0x9c>)
 8000b36:	2240      	movs	r2, #64	@ 0x40
 8000b38:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b3a:	4b17      	ldr	r3, [pc, #92]	@ (8000b98 <HAL_TIM_Base_MspInit+0x9c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000b40:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <HAL_TIM_Base_MspInit+0x9c>)
 8000b42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b46:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b48:	4b13      	ldr	r3, [pc, #76]	@ (8000b98 <HAL_TIM_Base_MspInit+0x9c>)
 8000b4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b4e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b50:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <HAL_TIM_Base_MspInit+0x9c>)
 8000b52:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b56:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	@ (8000b98 <HAL_TIM_Base_MspInit+0x9c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b98 <HAL_TIM_Base_MspInit+0x9c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <HAL_TIM_Base_MspInit+0x9c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000b6a:	480b      	ldr	r0, [pc, #44]	@ (8000b98 <HAL_TIM_Base_MspInit+0x9c>)
 8000b6c:	f000 fa96 	bl	800109c <HAL_DMA_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <HAL_TIM_Base_MspInit+0x7e>
    {
      Error_Handler();
 8000b76:	f7ff ff97 	bl	8000aa8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4a06      	ldr	r2, [pc, #24]	@ (8000b98 <HAL_TIM_Base_MspInit+0x9c>)
 8000b7e:	625a      	str	r2, [r3, #36]	@ 0x24
 8000b80:	4a05      	ldr	r2, [pc, #20]	@ (8000b98 <HAL_TIM_Base_MspInit+0x9c>)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40010000 	.word	0x40010000
 8000b94:	40023800 	.word	0x40023800
 8000b98:	200000c4 	.word	0x200000c4
 8000b9c:	40026428 	.word	0x40026428

08000ba0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	@ 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a25      	ldr	r2, [pc, #148]	@ (8000c54 <HAL_TIM_Encoder_MspInit+0xb4>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d143      	bne.n	8000c4a <HAL_TIM_Encoder_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bc2:	4b25      	ldr	r3, [pc, #148]	@ (8000c58 <HAL_TIM_Encoder_MspInit+0xb8>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc6:	4a24      	ldr	r2, [pc, #144]	@ (8000c58 <HAL_TIM_Encoder_MspInit+0xb8>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bce:	4b22      	ldr	r3, [pc, #136]	@ (8000c58 <HAL_TIM_Encoder_MspInit+0xb8>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	4b1f      	ldr	r3, [pc, #124]	@ (8000c58 <HAL_TIM_Encoder_MspInit+0xb8>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	4a1e      	ldr	r2, [pc, #120]	@ (8000c58 <HAL_TIM_Encoder_MspInit+0xb8>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c58 <HAL_TIM_Encoder_MspInit+0xb8>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf2:	4b19      	ldr	r3, [pc, #100]	@ (8000c58 <HAL_TIM_Encoder_MspInit+0xb8>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	4a18      	ldr	r2, [pc, #96]	@ (8000c58 <HAL_TIM_Encoder_MspInit+0xb8>)
 8000bf8:	f043 0304 	orr.w	r3, r3, #4
 8000bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfe:	4b16      	ldr	r3, [pc, #88]	@ (8000c58 <HAL_TIM_Encoder_MspInit+0xb8>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	f003 0304 	and.w	r3, r3, #4
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c0a:	2340      	movs	r3, #64	@ 0x40
 8000c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	480d      	ldr	r0, [pc, #52]	@ (8000c5c <HAL_TIM_Encoder_MspInit+0xbc>)
 8000c26:	f000 fd23 	bl	8001670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c2a:	2380      	movs	r3, #128	@ 0x80
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	4806      	ldr	r0, [pc, #24]	@ (8000c60 <HAL_TIM_Encoder_MspInit+0xc0>)
 8000c46:	f000 fd13 	bl	8001670 <HAL_GPIO_Init>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	@ 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40000400 	.word	0x40000400
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020000 	.word	0x40020000
 8000c60:	40020800 	.word	0x40020800

08000c64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 030c 	add.w	r3, r7, #12
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a11      	ldr	r2, [pc, #68]	@ (8000cc8 <HAL_TIM_MspPostInit+0x64>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d11c      	bne.n	8000cc0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c86:	4b11      	ldr	r3, [pc, #68]	@ (8000ccc <HAL_TIM_MspPostInit+0x68>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	4a10      	ldr	r2, [pc, #64]	@ (8000ccc <HAL_TIM_MspPostInit+0x68>)
 8000c8c:	f043 0310 	orr.w	r3, r3, #16
 8000c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ccc <HAL_TIM_MspPostInit+0x68>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	f003 0310 	and.w	r3, r3, #16
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ca2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cb4:	f107 030c 	add.w	r3, r7, #12
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4805      	ldr	r0, [pc, #20]	@ (8000cd0 <HAL_TIM_MspPostInit+0x6c>)
 8000cbc:	f000 fcd8 	bl	8001670 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000cc0:	bf00      	nop
 8000cc2:	3720      	adds	r7, #32
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40010000 	.word	0x40010000
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <NMI_Handler+0x4>

08000cdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <HardFault_Handler+0x4>

08000ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <MemManage_Handler+0x4>

08000cec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <BusFault_Handler+0x4>

08000cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <UsageFault_Handler+0x4>

08000cfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2a:	f000 f885 	bl	8000e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000d38:	4802      	ldr	r0, [pc, #8]	@ (8000d44 <DMA2_Stream1_IRQHandler+0x10>)
 8000d3a:	f000 fa5d 	bl	80011f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200000c4 	.word	0x200000c4

08000d48 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d4c:	4b06      	ldr	r3, [pc, #24]	@ (8000d68 <SystemInit+0x20>)
 8000d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d52:	4a05      	ldr	r2, [pc, #20]	@ (8000d68 <SystemInit+0x20>)
 8000d54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000da4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d70:	f7ff ffea 	bl	8000d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d74:	480c      	ldr	r0, [pc, #48]	@ (8000da8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d76:	490d      	ldr	r1, [pc, #52]	@ (8000dac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d78:	4a0d      	ldr	r2, [pc, #52]	@ (8000db0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d7c:	e002      	b.n	8000d84 <LoopCopyDataInit>

08000d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d82:	3304      	adds	r3, #4

08000d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d88:	d3f9      	bcc.n	8000d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000db4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d8c:	4c0a      	ldr	r4, [pc, #40]	@ (8000db8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d90:	e001      	b.n	8000d96 <LoopFillZerobss>

08000d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d94:	3204      	adds	r2, #4

08000d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d98:	d3fb      	bcc.n	8000d92 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d9a:	f002 fc77 	bl	800368c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d9e:	f7ff fbab 	bl	80004f8 <main>
  bx  lr    
 8000da2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000da4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000db0:	08003714 	.word	0x08003714
  ldr r2, =_sbss
 8000db4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000db8:	20000128 	.word	0x20000128

08000dbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <ADC_IRQHandler>

08000dbe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc2:	2003      	movs	r0, #3
 8000dc4:	f000 f928 	bl	8001018 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f000 f805 	bl	8000dd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dce:	f7ff fe71 	bl	8000ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de0:	4b12      	ldr	r3, [pc, #72]	@ (8000e2c <HAL_InitTick+0x54>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <HAL_InitTick+0x58>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	4619      	mov	r1, r3
 8000dea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 f943 	bl	8001082 <HAL_SYSTICK_Config>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e00e      	b.n	8000e24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2b0f      	cmp	r3, #15
 8000e0a:	d80a      	bhi.n	8000e22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e14:	f000 f90b 	bl	800102e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e18:	4a06      	ldr	r2, [pc, #24]	@ (8000e34 <HAL_InitTick+0x5c>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e000      	b.n	8000e24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	20000008 	.word	0x20000008
 8000e34:	20000004 	.word	0x20000004

08000e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <HAL_IncTick+0x20>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <HAL_IncTick+0x24>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4413      	add	r3, r2
 8000e48:	4a04      	ldr	r2, [pc, #16]	@ (8000e5c <HAL_IncTick+0x24>)
 8000e4a:	6013      	str	r3, [r2, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	20000124 	.word	0x20000124

08000e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return uwTick;
 8000e64:	4b03      	ldr	r3, [pc, #12]	@ (8000e74 <HAL_GetTick+0x14>)
 8000e66:	681b      	ldr	r3, [r3, #0]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000124 	.word	0x20000124

08000e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e88:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb8 <__NVIC_SetPriorityGrouping+0x40>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e94:	4013      	ands	r3, r2
 8000e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ea0:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea6:	4a04      	ldr	r2, [pc, #16]	@ (8000eb8 <__NVIC_SetPriorityGrouping+0x40>)
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	60d3      	str	r3, [r2, #12]
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00
 8000ebc:	05fa0000 	.word	0x05fa0000

08000ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec4:	4b04      	ldr	r3, [pc, #16]	@ (8000ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	0a1b      	lsrs	r3, r3, #8
 8000eca:	f003 0307 	and.w	r3, r3, #7
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	db0b      	blt.n	8000f06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	f003 021f 	and.w	r2, r3, #31
 8000ef4:	4907      	ldr	r1, [pc, #28]	@ (8000f14 <__NVIC_EnableIRQ+0x38>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	095b      	lsrs	r3, r3, #5
 8000efc:	2001      	movs	r0, #1
 8000efe:	fa00 f202 	lsl.w	r2, r0, r2
 8000f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000e100 	.word	0xe000e100

08000f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	6039      	str	r1, [r7, #0]
 8000f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	db0a      	blt.n	8000f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	490c      	ldr	r1, [pc, #48]	@ (8000f64 <__NVIC_SetPriority+0x4c>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	0112      	lsls	r2, r2, #4
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	440b      	add	r3, r1
 8000f3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f40:	e00a      	b.n	8000f58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4908      	ldr	r1, [pc, #32]	@ (8000f68 <__NVIC_SetPriority+0x50>)
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	f003 030f 	and.w	r3, r3, #15
 8000f4e:	3b04      	subs	r3, #4
 8000f50:	0112      	lsls	r2, r2, #4
 8000f52:	b2d2      	uxtb	r2, r2
 8000f54:	440b      	add	r3, r1
 8000f56:	761a      	strb	r2, [r3, #24]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000e100 	.word	0xe000e100
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	@ 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f1c3 0307 	rsb	r3, r3, #7
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	bf28      	it	cs
 8000f8a:	2304      	movcs	r3, #4
 8000f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3304      	adds	r3, #4
 8000f92:	2b06      	cmp	r3, #6
 8000f94:	d902      	bls.n	8000f9c <NVIC_EncodePriority+0x30>
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3b03      	subs	r3, #3
 8000f9a:	e000      	b.n	8000f9e <NVIC_EncodePriority+0x32>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43da      	mvns	r2, r3
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	401a      	ands	r2, r3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbe:	43d9      	mvns	r1, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	4313      	orrs	r3, r2
         );
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3724      	adds	r7, #36	@ 0x24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
	...

08000fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fe4:	d301      	bcc.n	8000fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00f      	b.n	800100a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fea:	4a0a      	ldr	r2, [pc, #40]	@ (8001014 <SysTick_Config+0x40>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ff2:	210f      	movs	r1, #15
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ff8:	f7ff ff8e 	bl	8000f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ffc:	4b05      	ldr	r3, [pc, #20]	@ (8001014 <SysTick_Config+0x40>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001002:	4b04      	ldr	r3, [pc, #16]	@ (8001014 <SysTick_Config+0x40>)
 8001004:	2207      	movs	r2, #7
 8001006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	e000e010 	.word	0xe000e010

08001018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff ff29 	bl	8000e78 <__NVIC_SetPriorityGrouping>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800102e:	b580      	push	{r7, lr}
 8001030:	b086      	sub	sp, #24
 8001032:	af00      	add	r7, sp, #0
 8001034:	4603      	mov	r3, r0
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	607a      	str	r2, [r7, #4]
 800103a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001040:	f7ff ff3e 	bl	8000ec0 <__NVIC_GetPriorityGrouping>
 8001044:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	68b9      	ldr	r1, [r7, #8]
 800104a:	6978      	ldr	r0, [r7, #20]
 800104c:	f7ff ff8e 	bl	8000f6c <NVIC_EncodePriority>
 8001050:	4602      	mov	r2, r0
 8001052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001056:	4611      	mov	r1, r2
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff5d 	bl	8000f18 <__NVIC_SetPriority>
}
 800105e:	bf00      	nop
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	4603      	mov	r3, r0
 800106e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff31 	bl	8000edc <__NVIC_EnableIRQ>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff ffa2 	bl	8000fd4 <SysTick_Config>
 8001090:	4603      	mov	r3, r0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80010a8:	f7ff feda 	bl	8000e60 <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d101      	bne.n	80010b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e099      	b.n	80011ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2202      	movs	r2, #2
 80010bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 0201 	bic.w	r2, r2, #1
 80010d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010d8:	e00f      	b.n	80010fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010da:	f7ff fec1 	bl	8000e60 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b05      	cmp	r3, #5
 80010e6:	d908      	bls.n	80010fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2220      	movs	r2, #32
 80010ec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2203      	movs	r2, #3
 80010f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e078      	b.n	80011ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1e8      	bne.n	80010da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001110:	697a      	ldr	r2, [r7, #20]
 8001112:	4b38      	ldr	r3, [pc, #224]	@ (80011f4 <HAL_DMA_Init+0x158>)
 8001114:	4013      	ands	r3, r2
 8001116:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001126:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001132:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800113e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a1b      	ldr	r3, [r3, #32]
 8001144:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	4313      	orrs	r3, r2
 800114a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001150:	2b04      	cmp	r3, #4
 8001152:	d107      	bne.n	8001164 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115c:	4313      	orrs	r3, r2
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	4313      	orrs	r3, r2
 8001162:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	f023 0307 	bic.w	r3, r3, #7
 800117a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001180:	697a      	ldr	r2, [r7, #20]
 8001182:	4313      	orrs	r3, r2
 8001184:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800118a:	2b04      	cmp	r3, #4
 800118c:	d117      	bne.n	80011be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	4313      	orrs	r3, r2
 8001196:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800119c:	2b00      	cmp	r3, #0
 800119e:	d00e      	beq.n	80011be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 f9e9 	bl	8001578 <DMA_CheckFifoParam>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d008      	beq.n	80011be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2240      	movs	r2, #64	@ 0x40
 80011b0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80011ba:	2301      	movs	r3, #1
 80011bc:	e016      	b.n	80011ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 f9a0 	bl	800150c <DMA_CalcBaseAndBitshift>
 80011cc:	4603      	mov	r3, r0
 80011ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011d4:	223f      	movs	r2, #63	@ 0x3f
 80011d6:	409a      	lsls	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2201      	movs	r2, #1
 80011e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	f010803f 	.word	0xf010803f

080011f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001204:	4b8e      	ldr	r3, [pc, #568]	@ (8001440 <HAL_DMA_IRQHandler+0x248>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a8e      	ldr	r2, [pc, #568]	@ (8001444 <HAL_DMA_IRQHandler+0x24c>)
 800120a:	fba2 2303 	umull	r2, r3, r2, r3
 800120e:	0a9b      	lsrs	r3, r3, #10
 8001210:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001216:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001222:	2208      	movs	r2, #8
 8001224:	409a      	lsls	r2, r3
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	4013      	ands	r3, r2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d01a      	beq.n	8001264 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	2b00      	cmp	r3, #0
 800123a:	d013      	beq.n	8001264 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f022 0204 	bic.w	r2, r2, #4
 800124a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001250:	2208      	movs	r2, #8
 8001252:	409a      	lsls	r2, r3
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800125c:	f043 0201 	orr.w	r2, r3, #1
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001268:	2201      	movs	r2, #1
 800126a:	409a      	lsls	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4013      	ands	r3, r2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d012      	beq.n	800129a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00b      	beq.n	800129a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001286:	2201      	movs	r2, #1
 8001288:	409a      	lsls	r2, r3
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001292:	f043 0202 	orr.w	r2, r3, #2
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800129e:	2204      	movs	r2, #4
 80012a0:	409a      	lsls	r2, r3
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4013      	ands	r3, r2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d012      	beq.n	80012d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d00b      	beq.n	80012d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012bc:	2204      	movs	r2, #4
 80012be:	409a      	lsls	r2, r3
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012c8:	f043 0204 	orr.w	r2, r3, #4
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012d4:	2210      	movs	r2, #16
 80012d6:	409a      	lsls	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4013      	ands	r3, r2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d043      	beq.n	8001368 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0308 	and.w	r3, r3, #8
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d03c      	beq.n	8001368 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012f2:	2210      	movs	r2, #16
 80012f4:	409a      	lsls	r2, r3
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d018      	beq.n	800133a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d108      	bne.n	8001328 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131a:	2b00      	cmp	r3, #0
 800131c:	d024      	beq.n	8001368 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	4798      	blx	r3
 8001326:	e01f      	b.n	8001368 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800132c:	2b00      	cmp	r3, #0
 800132e:	d01b      	beq.n	8001368 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	4798      	blx	r3
 8001338:	e016      	b.n	8001368 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001344:	2b00      	cmp	r3, #0
 8001346:	d107      	bne.n	8001358 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0208 	bic.w	r2, r2, #8
 8001356:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800136c:	2220      	movs	r2, #32
 800136e:	409a      	lsls	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4013      	ands	r3, r2
 8001374:	2b00      	cmp	r3, #0
 8001376:	f000 808f 	beq.w	8001498 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0310 	and.w	r3, r3, #16
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 8087 	beq.w	8001498 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800138e:	2220      	movs	r2, #32
 8001390:	409a      	lsls	r2, r3
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b05      	cmp	r3, #5
 80013a0:	d136      	bne.n	8001410 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f022 0216 	bic.w	r2, r2, #22
 80013b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	695a      	ldr	r2, [r3, #20]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d103      	bne.n	80013d2 <HAL_DMA_IRQHandler+0x1da>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d007      	beq.n	80013e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 0208 	bic.w	r2, r2, #8
 80013e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013e6:	223f      	movs	r2, #63	@ 0x3f
 80013e8:	409a      	lsls	r2, r3
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001402:	2b00      	cmp	r3, #0
 8001404:	d07e      	beq.n	8001504 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	4798      	blx	r3
        }
        return;
 800140e:	e079      	b.n	8001504 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d01d      	beq.n	800145a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d10d      	bne.n	8001448 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001430:	2b00      	cmp	r3, #0
 8001432:	d031      	beq.n	8001498 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	4798      	blx	r3
 800143c:	e02c      	b.n	8001498 <HAL_DMA_IRQHandler+0x2a0>
 800143e:	bf00      	nop
 8001440:	20000000 	.word	0x20000000
 8001444:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800144c:	2b00      	cmp	r3, #0
 800144e:	d023      	beq.n	8001498 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	4798      	blx	r3
 8001458:	e01e      	b.n	8001498 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001464:	2b00      	cmp	r3, #0
 8001466:	d10f      	bne.n	8001488 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 0210 	bic.w	r2, r2, #16
 8001476:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2201      	movs	r2, #1
 800147c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800149c:	2b00      	cmp	r3, #0
 800149e:	d032      	beq.n	8001506 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d022      	beq.n	80014f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2205      	movs	r2, #5
 80014b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0201 	bic.w	r2, r2, #1
 80014c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	3301      	adds	r3, #1
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d307      	bcc.n	80014e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f2      	bne.n	80014c4 <HAL_DMA_IRQHandler+0x2cc>
 80014de:	e000      	b.n	80014e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80014e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2201      	movs	r2, #1
 80014e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d005      	beq.n	8001506 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	4798      	blx	r3
 8001502:	e000      	b.n	8001506 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001504:	bf00      	nop
    }
  }
}
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	3b10      	subs	r3, #16
 800151c:	4a13      	ldr	r2, [pc, #76]	@ (800156c <DMA_CalcBaseAndBitshift+0x60>)
 800151e:	fba2 2303 	umull	r2, r3, r2, r3
 8001522:	091b      	lsrs	r3, r3, #4
 8001524:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001526:	4a12      	ldr	r2, [pc, #72]	@ (8001570 <DMA_CalcBaseAndBitshift+0x64>)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4413      	add	r3, r2
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2b03      	cmp	r3, #3
 8001538:	d908      	bls.n	800154c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	461a      	mov	r2, r3
 8001540:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <DMA_CalcBaseAndBitshift+0x68>)
 8001542:	4013      	ands	r3, r2
 8001544:	1d1a      	adds	r2, r3, #4
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	659a      	str	r2, [r3, #88]	@ 0x58
 800154a:	e006      	b.n	800155a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4b08      	ldr	r3, [pc, #32]	@ (8001574 <DMA_CalcBaseAndBitshift+0x68>)
 8001554:	4013      	ands	r3, r2
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800155e:	4618      	mov	r0, r3
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	aaaaaaab 	.word	0xaaaaaaab
 8001570:	080036fc 	.word	0x080036fc
 8001574:	fffffc00 	.word	0xfffffc00

08001578 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001580:	2300      	movs	r3, #0
 8001582:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001588:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d11f      	bne.n	80015d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	2b03      	cmp	r3, #3
 8001596:	d856      	bhi.n	8001646 <DMA_CheckFifoParam+0xce>
 8001598:	a201      	add	r2, pc, #4	@ (adr r2, 80015a0 <DMA_CheckFifoParam+0x28>)
 800159a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159e:	bf00      	nop
 80015a0:	080015b1 	.word	0x080015b1
 80015a4:	080015c3 	.word	0x080015c3
 80015a8:	080015b1 	.word	0x080015b1
 80015ac:	08001647 	.word	0x08001647
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d046      	beq.n	800164a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015c0:	e043      	b.n	800164a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015c6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80015ca:	d140      	bne.n	800164e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015d0:	e03d      	b.n	800164e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80015da:	d121      	bne.n	8001620 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d837      	bhi.n	8001652 <DMA_CheckFifoParam+0xda>
 80015e2:	a201      	add	r2, pc, #4	@ (adr r2, 80015e8 <DMA_CheckFifoParam+0x70>)
 80015e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e8:	080015f9 	.word	0x080015f9
 80015ec:	080015ff 	.word	0x080015ff
 80015f0:	080015f9 	.word	0x080015f9
 80015f4:	08001611 	.word	0x08001611
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	73fb      	strb	r3, [r7, #15]
      break;
 80015fc:	e030      	b.n	8001660 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001602:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d025      	beq.n	8001656 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800160e:	e022      	b.n	8001656 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001614:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001618:	d11f      	bne.n	800165a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800161e:	e01c      	b.n	800165a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	2b02      	cmp	r3, #2
 8001624:	d903      	bls.n	800162e <DMA_CheckFifoParam+0xb6>
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	2b03      	cmp	r3, #3
 800162a:	d003      	beq.n	8001634 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800162c:	e018      	b.n	8001660 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	73fb      	strb	r3, [r7, #15]
      break;
 8001632:	e015      	b.n	8001660 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001638:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d00e      	beq.n	800165e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	73fb      	strb	r3, [r7, #15]
      break;
 8001644:	e00b      	b.n	800165e <DMA_CheckFifoParam+0xe6>
      break;
 8001646:	bf00      	nop
 8001648:	e00a      	b.n	8001660 <DMA_CheckFifoParam+0xe8>
      break;
 800164a:	bf00      	nop
 800164c:	e008      	b.n	8001660 <DMA_CheckFifoParam+0xe8>
      break;
 800164e:	bf00      	nop
 8001650:	e006      	b.n	8001660 <DMA_CheckFifoParam+0xe8>
      break;
 8001652:	bf00      	nop
 8001654:	e004      	b.n	8001660 <DMA_CheckFifoParam+0xe8>
      break;
 8001656:	bf00      	nop
 8001658:	e002      	b.n	8001660 <DMA_CheckFifoParam+0xe8>
      break;   
 800165a:	bf00      	nop
 800165c:	e000      	b.n	8001660 <DMA_CheckFifoParam+0xe8>
      break;
 800165e:	bf00      	nop
    }
  } 
  
  return status; 
 8001660:	7bfb      	ldrb	r3, [r7, #15]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop

08001670 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001670:	b480      	push	{r7}
 8001672:	b089      	sub	sp, #36	@ 0x24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001686:	2300      	movs	r3, #0
 8001688:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800168a:	2300      	movs	r3, #0
 800168c:	61fb      	str	r3, [r7, #28]
 800168e:	e175      	b.n	800197c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001690:	2201      	movs	r2, #1
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	f040 8164 	bne.w	8001976 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d005      	beq.n	80016c6 <HAL_GPIO_Init+0x56>
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d130      	bne.n	8001728 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	2203      	movs	r2, #3
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43db      	mvns	r3, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4013      	ands	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016fc:	2201      	movs	r2, #1
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	091b      	lsrs	r3, r3, #4
 8001712:	f003 0201 	and.w	r2, r3, #1
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4313      	orrs	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	2b03      	cmp	r3, #3
 8001732:	d017      	beq.n	8001764 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	2203      	movs	r2, #3
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d123      	bne.n	80017b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	08da      	lsrs	r2, r3, #3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3208      	adds	r2, #8
 8001778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800177c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	220f      	movs	r2, #15
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	691a      	ldr	r2, [r3, #16]
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	08da      	lsrs	r2, r3, #3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3208      	adds	r2, #8
 80017b2:	69b9      	ldr	r1, [r7, #24]
 80017b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	2203      	movs	r2, #3
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 0203 	and.w	r2, r3, #3
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 80be 	beq.w	8001976 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fa:	4b66      	ldr	r3, [pc, #408]	@ (8001994 <HAL_GPIO_Init+0x324>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017fe:	4a65      	ldr	r2, [pc, #404]	@ (8001994 <HAL_GPIO_Init+0x324>)
 8001800:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001804:	6453      	str	r3, [r2, #68]	@ 0x44
 8001806:	4b63      	ldr	r3, [pc, #396]	@ (8001994 <HAL_GPIO_Init+0x324>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001812:	4a61      	ldr	r2, [pc, #388]	@ (8001998 <HAL_GPIO_Init+0x328>)
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	089b      	lsrs	r3, r3, #2
 8001818:	3302      	adds	r3, #2
 800181a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	220f      	movs	r2, #15
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43db      	mvns	r3, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4013      	ands	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a58      	ldr	r2, [pc, #352]	@ (800199c <HAL_GPIO_Init+0x32c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d037      	beq.n	80018ae <HAL_GPIO_Init+0x23e>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a57      	ldr	r2, [pc, #348]	@ (80019a0 <HAL_GPIO_Init+0x330>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d031      	beq.n	80018aa <HAL_GPIO_Init+0x23a>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a56      	ldr	r2, [pc, #344]	@ (80019a4 <HAL_GPIO_Init+0x334>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d02b      	beq.n	80018a6 <HAL_GPIO_Init+0x236>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a55      	ldr	r2, [pc, #340]	@ (80019a8 <HAL_GPIO_Init+0x338>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d025      	beq.n	80018a2 <HAL_GPIO_Init+0x232>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a54      	ldr	r2, [pc, #336]	@ (80019ac <HAL_GPIO_Init+0x33c>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d01f      	beq.n	800189e <HAL_GPIO_Init+0x22e>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a53      	ldr	r2, [pc, #332]	@ (80019b0 <HAL_GPIO_Init+0x340>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d019      	beq.n	800189a <HAL_GPIO_Init+0x22a>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a52      	ldr	r2, [pc, #328]	@ (80019b4 <HAL_GPIO_Init+0x344>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d013      	beq.n	8001896 <HAL_GPIO_Init+0x226>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a51      	ldr	r2, [pc, #324]	@ (80019b8 <HAL_GPIO_Init+0x348>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d00d      	beq.n	8001892 <HAL_GPIO_Init+0x222>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a50      	ldr	r2, [pc, #320]	@ (80019bc <HAL_GPIO_Init+0x34c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d007      	beq.n	800188e <HAL_GPIO_Init+0x21e>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a4f      	ldr	r2, [pc, #316]	@ (80019c0 <HAL_GPIO_Init+0x350>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d101      	bne.n	800188a <HAL_GPIO_Init+0x21a>
 8001886:	2309      	movs	r3, #9
 8001888:	e012      	b.n	80018b0 <HAL_GPIO_Init+0x240>
 800188a:	230a      	movs	r3, #10
 800188c:	e010      	b.n	80018b0 <HAL_GPIO_Init+0x240>
 800188e:	2308      	movs	r3, #8
 8001890:	e00e      	b.n	80018b0 <HAL_GPIO_Init+0x240>
 8001892:	2307      	movs	r3, #7
 8001894:	e00c      	b.n	80018b0 <HAL_GPIO_Init+0x240>
 8001896:	2306      	movs	r3, #6
 8001898:	e00a      	b.n	80018b0 <HAL_GPIO_Init+0x240>
 800189a:	2305      	movs	r3, #5
 800189c:	e008      	b.n	80018b0 <HAL_GPIO_Init+0x240>
 800189e:	2304      	movs	r3, #4
 80018a0:	e006      	b.n	80018b0 <HAL_GPIO_Init+0x240>
 80018a2:	2303      	movs	r3, #3
 80018a4:	e004      	b.n	80018b0 <HAL_GPIO_Init+0x240>
 80018a6:	2302      	movs	r3, #2
 80018a8:	e002      	b.n	80018b0 <HAL_GPIO_Init+0x240>
 80018aa:	2301      	movs	r3, #1
 80018ac:	e000      	b.n	80018b0 <HAL_GPIO_Init+0x240>
 80018ae:	2300      	movs	r3, #0
 80018b0:	69fa      	ldr	r2, [r7, #28]
 80018b2:	f002 0203 	and.w	r2, r2, #3
 80018b6:	0092      	lsls	r2, r2, #2
 80018b8:	4093      	lsls	r3, r2
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80018c0:	4935      	ldr	r1, [pc, #212]	@ (8001998 <HAL_GPIO_Init+0x328>)
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	089b      	lsrs	r3, r3, #2
 80018c6:	3302      	adds	r3, #2
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ce:	4b3d      	ldr	r3, [pc, #244]	@ (80019c4 <HAL_GPIO_Init+0x354>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	43db      	mvns	r3, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4013      	ands	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018f2:	4a34      	ldr	r2, [pc, #208]	@ (80019c4 <HAL_GPIO_Init+0x354>)
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018f8:	4b32      	ldr	r3, [pc, #200]	@ (80019c4 <HAL_GPIO_Init+0x354>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	43db      	mvns	r3, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800191c:	4a29      	ldr	r2, [pc, #164]	@ (80019c4 <HAL_GPIO_Init+0x354>)
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001922:	4b28      	ldr	r3, [pc, #160]	@ (80019c4 <HAL_GPIO_Init+0x354>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	43db      	mvns	r3, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4013      	ands	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001946:	4a1f      	ldr	r2, [pc, #124]	@ (80019c4 <HAL_GPIO_Init+0x354>)
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800194c:	4b1d      	ldr	r3, [pc, #116]	@ (80019c4 <HAL_GPIO_Init+0x354>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	4313      	orrs	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001970:	4a14      	ldr	r2, [pc, #80]	@ (80019c4 <HAL_GPIO_Init+0x354>)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3301      	adds	r3, #1
 800197a:	61fb      	str	r3, [r7, #28]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	2b0f      	cmp	r3, #15
 8001980:	f67f ae86 	bls.w	8001690 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001984:	bf00      	nop
 8001986:	bf00      	nop
 8001988:	3724      	adds	r7, #36	@ 0x24
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800
 8001998:	40013800 	.word	0x40013800
 800199c:	40020000 	.word	0x40020000
 80019a0:	40020400 	.word	0x40020400
 80019a4:	40020800 	.word	0x40020800
 80019a8:	40020c00 	.word	0x40020c00
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40021400 	.word	0x40021400
 80019b4:	40021800 	.word	0x40021800
 80019b8:	40021c00 	.word	0x40021c00
 80019bc:	40022000 	.word	0x40022000
 80019c0:	40022400 	.word	0x40022400
 80019c4:	40013c00 	.word	0x40013c00

080019c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	807b      	strh	r3, [r7, #2]
 80019d4:	4613      	mov	r3, r2
 80019d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019d8:	787b      	ldrb	r3, [r7, #1]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019de:	887a      	ldrh	r2, [r7, #2]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80019e4:	e003      	b.n	80019ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80019e6:	887b      	ldrh	r3, [r7, #2]
 80019e8:	041a      	lsls	r2, r3, #16
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	619a      	str	r2, [r3, #24]
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
	...

080019fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a06:	4b23      	ldr	r3, [pc, #140]	@ (8001a94 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0a:	4a22      	ldr	r2, [pc, #136]	@ (8001a94 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a12:	4b20      	ldr	r3, [pc, #128]	@ (8001a94 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a1d      	ldr	r2, [pc, #116]	@ (8001a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a28:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a2a:	f7ff fa19 	bl	8000e60 <HAL_GetTick>
 8001a2e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a30:	e009      	b.n	8001a46 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a32:	f7ff fa15 	bl	8000e60 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a40:	d901      	bls.n	8001a46 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e022      	b.n	8001a8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a46:	4b14      	ldr	r3, [pc, #80]	@ (8001a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a52:	d1ee      	bne.n	8001a32 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a54:	4b10      	ldr	r3, [pc, #64]	@ (8001a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a0f      	ldr	r2, [pc, #60]	@ (8001a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a5e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a60:	f7ff f9fe 	bl	8000e60 <HAL_GetTick>
 8001a64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a66:	e009      	b.n	8001a7c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a68:	f7ff f9fa 	bl	8000e60 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a76:	d901      	bls.n	8001a7c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e007      	b.n	8001a8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a7c:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001a88:	d1ee      	bne.n	8001a68 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40007000 	.word	0x40007000

08001a9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e291      	b.n	8001fd6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 8087 	beq.w	8001bce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ac0:	4b96      	ldr	r3, [pc, #600]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 030c 	and.w	r3, r3, #12
 8001ac8:	2b04      	cmp	r3, #4
 8001aca:	d00c      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001acc:	4b93      	ldr	r3, [pc, #588]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 030c 	and.w	r3, r3, #12
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d112      	bne.n	8001afe <HAL_RCC_OscConfig+0x62>
 8001ad8:	4b90      	ldr	r3, [pc, #576]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ae0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ae4:	d10b      	bne.n	8001afe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae6:	4b8d      	ldr	r3, [pc, #564]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d06c      	beq.n	8001bcc <HAL_RCC_OscConfig+0x130>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d168      	bne.n	8001bcc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e26b      	b.n	8001fd6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b06:	d106      	bne.n	8001b16 <HAL_RCC_OscConfig+0x7a>
 8001b08:	4b84      	ldr	r3, [pc, #528]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a83      	ldr	r2, [pc, #524]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001b0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	e02e      	b.n	8001b74 <HAL_RCC_OscConfig+0xd8>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10c      	bne.n	8001b38 <HAL_RCC_OscConfig+0x9c>
 8001b1e:	4b7f      	ldr	r3, [pc, #508]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a7e      	ldr	r2, [pc, #504]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001b24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	4b7c      	ldr	r3, [pc, #496]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a7b      	ldr	r2, [pc, #492]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001b30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	e01d      	b.n	8001b74 <HAL_RCC_OscConfig+0xd8>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b40:	d10c      	bne.n	8001b5c <HAL_RCC_OscConfig+0xc0>
 8001b42:	4b76      	ldr	r3, [pc, #472]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a75      	ldr	r2, [pc, #468]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001b48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	4b73      	ldr	r3, [pc, #460]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a72      	ldr	r2, [pc, #456]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001b54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	e00b      	b.n	8001b74 <HAL_RCC_OscConfig+0xd8>
 8001b5c:	4b6f      	ldr	r3, [pc, #444]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a6e      	ldr	r2, [pc, #440]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001b62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	4b6c      	ldr	r3, [pc, #432]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a6b      	ldr	r2, [pc, #428]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001b6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d013      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7c:	f7ff f970 	bl	8000e60 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b84:	f7ff f96c 	bl	8000e60 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b64      	cmp	r3, #100	@ 0x64
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e21f      	b.n	8001fd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b96:	4b61      	ldr	r3, [pc, #388]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0f0      	beq.n	8001b84 <HAL_RCC_OscConfig+0xe8>
 8001ba2:	e014      	b.n	8001bce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba4:	f7ff f95c 	bl	8000e60 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bac:	f7ff f958 	bl	8000e60 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b64      	cmp	r3, #100	@ 0x64
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e20b      	b.n	8001fd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bbe:	4b57      	ldr	r3, [pc, #348]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0x110>
 8001bca:	e000      	b.n	8001bce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d069      	beq.n	8001cae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bda:	4b50      	ldr	r3, [pc, #320]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 030c 	and.w	r3, r3, #12
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00b      	beq.n	8001bfe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001be6:	4b4d      	ldr	r3, [pc, #308]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 030c 	and.w	r3, r3, #12
 8001bee:	2b08      	cmp	r3, #8
 8001bf0:	d11c      	bne.n	8001c2c <HAL_RCC_OscConfig+0x190>
 8001bf2:	4b4a      	ldr	r3, [pc, #296]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d116      	bne.n	8001c2c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bfe:	4b47      	ldr	r3, [pc, #284]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d005      	beq.n	8001c16 <HAL_RCC_OscConfig+0x17a>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d001      	beq.n	8001c16 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e1df      	b.n	8001fd6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c16:	4b41      	ldr	r3, [pc, #260]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	493d      	ldr	r1, [pc, #244]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c2a:	e040      	b.n	8001cae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d023      	beq.n	8001c7c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c34:	4b39      	ldr	r3, [pc, #228]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a38      	ldr	r2, [pc, #224]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c40:	f7ff f90e 	bl	8000e60 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c48:	f7ff f90a 	bl	8000e60 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e1bd      	b.n	8001fd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5a:	4b30      	ldr	r3, [pc, #192]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0f0      	beq.n	8001c48 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c66:	4b2d      	ldr	r3, [pc, #180]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4929      	ldr	r1, [pc, #164]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	600b      	str	r3, [r1, #0]
 8001c7a:	e018      	b.n	8001cae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c7c:	4b27      	ldr	r3, [pc, #156]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a26      	ldr	r2, [pc, #152]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001c82:	f023 0301 	bic.w	r3, r3, #1
 8001c86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c88:	f7ff f8ea 	bl	8000e60 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c90:	f7ff f8e6 	bl	8000e60 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e199      	b.n	8001fd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f0      	bne.n	8001c90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0308 	and.w	r3, r3, #8
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d038      	beq.n	8001d2c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d019      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cc2:	4b16      	ldr	r3, [pc, #88]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001cc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cc6:	4a15      	ldr	r2, [pc, #84]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cce:	f7ff f8c7 	bl	8000e60 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd6:	f7ff f8c3 	bl	8000e60 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e176      	b.n	8001fd6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001cea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0f0      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x23a>
 8001cf4:	e01a      	b.n	8001d2c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cf6:	4b09      	ldr	r3, [pc, #36]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001cf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cfa:	4a08      	ldr	r2, [pc, #32]	@ (8001d1c <HAL_RCC_OscConfig+0x280>)
 8001cfc:	f023 0301 	bic.w	r3, r3, #1
 8001d00:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d02:	f7ff f8ad 	bl	8000e60 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d08:	e00a      	b.n	8001d20 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d0a:	f7ff f8a9 	bl	8000e60 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d903      	bls.n	8001d20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e15c      	b.n	8001fd6 <HAL_RCC_OscConfig+0x53a>
 8001d1c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d20:	4b91      	ldr	r3, [pc, #580]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001d22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1ee      	bne.n	8001d0a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f000 80a4 	beq.w	8001e82 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d3a:	4b8b      	ldr	r3, [pc, #556]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10d      	bne.n	8001d62 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d46:	4b88      	ldr	r3, [pc, #544]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4a:	4a87      	ldr	r2, [pc, #540]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001d4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d52:	4b85      	ldr	r3, [pc, #532]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d62:	4b82      	ldr	r3, [pc, #520]	@ (8001f6c <HAL_RCC_OscConfig+0x4d0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d118      	bne.n	8001da0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001d6e:	4b7f      	ldr	r3, [pc, #508]	@ (8001f6c <HAL_RCC_OscConfig+0x4d0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a7e      	ldr	r2, [pc, #504]	@ (8001f6c <HAL_RCC_OscConfig+0x4d0>)
 8001d74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d7a:	f7ff f871 	bl	8000e60 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d82:	f7ff f86d 	bl	8000e60 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b64      	cmp	r3, #100	@ 0x64
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e120      	b.n	8001fd6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d94:	4b75      	ldr	r3, [pc, #468]	@ (8001f6c <HAL_RCC_OscConfig+0x4d0>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0f0      	beq.n	8001d82 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d106      	bne.n	8001db6 <HAL_RCC_OscConfig+0x31a>
 8001da8:	4b6f      	ldr	r3, [pc, #444]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dac:	4a6e      	ldr	r2, [pc, #440]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001db4:	e02d      	b.n	8001e12 <HAL_RCC_OscConfig+0x376>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10c      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x33c>
 8001dbe:	4b6a      	ldr	r3, [pc, #424]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dc2:	4a69      	ldr	r2, [pc, #420]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001dc4:	f023 0301 	bic.w	r3, r3, #1
 8001dc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dca:	4b67      	ldr	r3, [pc, #412]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dce:	4a66      	ldr	r2, [pc, #408]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001dd0:	f023 0304 	bic.w	r3, r3, #4
 8001dd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dd6:	e01c      	b.n	8001e12 <HAL_RCC_OscConfig+0x376>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2b05      	cmp	r3, #5
 8001dde:	d10c      	bne.n	8001dfa <HAL_RCC_OscConfig+0x35e>
 8001de0:	4b61      	ldr	r3, [pc, #388]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de4:	4a60      	ldr	r2, [pc, #384]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001de6:	f043 0304 	orr.w	r3, r3, #4
 8001dea:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dec:	4b5e      	ldr	r3, [pc, #376]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001df0:	4a5d      	ldr	r2, [pc, #372]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001df8:	e00b      	b.n	8001e12 <HAL_RCC_OscConfig+0x376>
 8001dfa:	4b5b      	ldr	r3, [pc, #364]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dfe:	4a5a      	ldr	r2, [pc, #360]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001e00:	f023 0301 	bic.w	r3, r3, #1
 8001e04:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e06:	4b58      	ldr	r3, [pc, #352]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e0a:	4a57      	ldr	r2, [pc, #348]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001e0c:	f023 0304 	bic.w	r3, r3, #4
 8001e10:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d015      	beq.n	8001e46 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1a:	f7ff f821 	bl	8000e60 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e20:	e00a      	b.n	8001e38 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e22:	f7ff f81d 	bl	8000e60 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e0ce      	b.n	8001fd6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e38:	4b4b      	ldr	r3, [pc, #300]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0ee      	beq.n	8001e22 <HAL_RCC_OscConfig+0x386>
 8001e44:	e014      	b.n	8001e70 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e46:	f7ff f80b 	bl	8000e60 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e4c:	e00a      	b.n	8001e64 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e4e:	f7ff f807 	bl	8000e60 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e0b8      	b.n	8001fd6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e64:	4b40      	ldr	r3, [pc, #256]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1ee      	bne.n	8001e4e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e70:	7dfb      	ldrb	r3, [r7, #23]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d105      	bne.n	8001e82 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e76:	4b3c      	ldr	r3, [pc, #240]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7a:	4a3b      	ldr	r2, [pc, #236]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001e7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e80:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 80a4 	beq.w	8001fd4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e8c:	4b36      	ldr	r3, [pc, #216]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 030c 	and.w	r3, r3, #12
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d06b      	beq.n	8001f70 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d149      	bne.n	8001f34 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea0:	4b31      	ldr	r3, [pc, #196]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a30      	ldr	r2, [pc, #192]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001ea6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eac:	f7fe ffd8 	bl	8000e60 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb4:	f7fe ffd4 	bl	8000e60 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e087      	b.n	8001fd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec6:	4b28      	ldr	r3, [pc, #160]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69da      	ldr	r2, [r3, #28]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee0:	019b      	lsls	r3, r3, #6
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee8:	085b      	lsrs	r3, r3, #1
 8001eea:	3b01      	subs	r3, #1
 8001eec:	041b      	lsls	r3, r3, #16
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef4:	061b      	lsls	r3, r3, #24
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001efa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001efe:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f00:	4b19      	ldr	r3, [pc, #100]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a18      	ldr	r2, [pc, #96]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001f06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0c:	f7fe ffa8 	bl	8000e60 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f14:	f7fe ffa4 	bl	8000e60 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e057      	b.n	8001fd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f26:	4b10      	ldr	r3, [pc, #64]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0f0      	beq.n	8001f14 <HAL_RCC_OscConfig+0x478>
 8001f32:	e04f      	b.n	8001fd4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f34:	4b0c      	ldr	r3, [pc, #48]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0b      	ldr	r2, [pc, #44]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001f3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f40:	f7fe ff8e 	bl	8000e60 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f48:	f7fe ff8a 	bl	8000e60 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e03d      	b.n	8001fd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f5a:	4b03      	ldr	r3, [pc, #12]	@ (8001f68 <HAL_RCC_OscConfig+0x4cc>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_OscConfig+0x4ac>
 8001f66:	e035      	b.n	8001fd4 <HAL_RCC_OscConfig+0x538>
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001f70:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe0 <HAL_RCC_OscConfig+0x544>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d028      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d121      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d11a      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001fa6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d111      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb6:	085b      	lsrs	r3, r3, #1
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d107      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d001      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e000      	b.n	8001fd6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40023800 	.word	0x40023800

08001fe4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e0d0      	b.n	800219e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ffc:	4b6a      	ldr	r3, [pc, #424]	@ (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 030f 	and.w	r3, r3, #15
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d910      	bls.n	800202c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200a:	4b67      	ldr	r3, [pc, #412]	@ (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 020f 	bic.w	r2, r3, #15
 8002012:	4965      	ldr	r1, [pc, #404]	@ (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	4313      	orrs	r3, r2
 8002018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800201a:	4b63      	ldr	r3, [pc, #396]	@ (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0b8      	b.n	800219e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d020      	beq.n	800207a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	d005      	beq.n	8002050 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002044:	4b59      	ldr	r3, [pc, #356]	@ (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	4a58      	ldr	r2, [pc, #352]	@ (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 800204a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800204e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0308 	and.w	r3, r3, #8
 8002058:	2b00      	cmp	r3, #0
 800205a:	d005      	beq.n	8002068 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800205c:	4b53      	ldr	r3, [pc, #332]	@ (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	4a52      	ldr	r2, [pc, #328]	@ (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 8002062:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002066:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002068:	4b50      	ldr	r3, [pc, #320]	@ (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	494d      	ldr	r1, [pc, #308]	@ (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 8002076:	4313      	orrs	r3, r2
 8002078:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d040      	beq.n	8002108 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d107      	bne.n	800209e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208e:	4b47      	ldr	r3, [pc, #284]	@ (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d115      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e07f      	b.n	800219e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d107      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a6:	4b41      	ldr	r3, [pc, #260]	@ (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d109      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e073      	b.n	800219e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b6:	4b3d      	ldr	r3, [pc, #244]	@ (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e06b      	b.n	800219e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020c6:	4b39      	ldr	r3, [pc, #228]	@ (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f023 0203 	bic.w	r2, r3, #3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	4936      	ldr	r1, [pc, #216]	@ (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020d8:	f7fe fec2 	bl	8000e60 <HAL_GetTick>
 80020dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020de:	e00a      	b.n	80020f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e0:	f7fe febe 	bl	8000e60 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e053      	b.n	800219e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f6:	4b2d      	ldr	r3, [pc, #180]	@ (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 020c 	and.w	r2, r3, #12
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	429a      	cmp	r2, r3
 8002106:	d1eb      	bne.n	80020e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002108:	4b27      	ldr	r3, [pc, #156]	@ (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 030f 	and.w	r3, r3, #15
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	429a      	cmp	r2, r3
 8002114:	d210      	bcs.n	8002138 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002116:	4b24      	ldr	r3, [pc, #144]	@ (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f023 020f 	bic.w	r2, r3, #15
 800211e:	4922      	ldr	r1, [pc, #136]	@ (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	4313      	orrs	r3, r2
 8002124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002126:	4b20      	ldr	r3, [pc, #128]	@ (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d001      	beq.n	8002138 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e032      	b.n	800219e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d008      	beq.n	8002156 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002144:	4b19      	ldr	r3, [pc, #100]	@ (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	4916      	ldr	r1, [pc, #88]	@ (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 8002152:	4313      	orrs	r3, r2
 8002154:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b00      	cmp	r3, #0
 8002160:	d009      	beq.n	8002176 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002162:	4b12      	ldr	r3, [pc, #72]	@ (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	490e      	ldr	r1, [pc, #56]	@ (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 8002172:	4313      	orrs	r3, r2
 8002174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002176:	f000 f821 	bl	80021bc <HAL_RCC_GetSysClockFreq>
 800217a:	4602      	mov	r2, r0
 800217c:	4b0b      	ldr	r3, [pc, #44]	@ (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	490a      	ldr	r1, [pc, #40]	@ (80021b0 <HAL_RCC_ClockConfig+0x1cc>)
 8002188:	5ccb      	ldrb	r3, [r1, r3]
 800218a:	fa22 f303 	lsr.w	r3, r2, r3
 800218e:	4a09      	ldr	r2, [pc, #36]	@ (80021b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002192:	4b09      	ldr	r3, [pc, #36]	@ (80021b8 <HAL_RCC_ClockConfig+0x1d4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe fe1e 	bl	8000dd8 <HAL_InitTick>

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40023c00 	.word	0x40023c00
 80021ac:	40023800 	.word	0x40023800
 80021b0:	080036ec 	.word	0x080036ec
 80021b4:	20000000 	.word	0x20000000
 80021b8:	20000004 	.word	0x20000004

080021bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021c0:	b090      	sub	sp, #64	@ 0x40
 80021c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80021c8:	2300      	movs	r3, #0
 80021ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021cc:	2300      	movs	r3, #0
 80021ce:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021d4:	4b59      	ldr	r3, [pc, #356]	@ (800233c <HAL_RCC_GetSysClockFreq+0x180>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 030c 	and.w	r3, r3, #12
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d00d      	beq.n	80021fc <HAL_RCC_GetSysClockFreq+0x40>
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	f200 80a1 	bhi.w	8002328 <HAL_RCC_GetSysClockFreq+0x16c>
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d002      	beq.n	80021f0 <HAL_RCC_GetSysClockFreq+0x34>
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d003      	beq.n	80021f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80021ee:	e09b      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021f0:	4b53      	ldr	r3, [pc, #332]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x184>)
 80021f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021f4:	e09b      	b.n	800232e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021f6:	4b53      	ldr	r3, [pc, #332]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x188>)
 80021f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021fa:	e098      	b.n	800232e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021fc:	4b4f      	ldr	r3, [pc, #316]	@ (800233c <HAL_RCC_GetSysClockFreq+0x180>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002204:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002206:	4b4d      	ldr	r3, [pc, #308]	@ (800233c <HAL_RCC_GetSysClockFreq+0x180>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d028      	beq.n	8002264 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002212:	4b4a      	ldr	r3, [pc, #296]	@ (800233c <HAL_RCC_GetSysClockFreq+0x180>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	099b      	lsrs	r3, r3, #6
 8002218:	2200      	movs	r2, #0
 800221a:	623b      	str	r3, [r7, #32]
 800221c:	627a      	str	r2, [r7, #36]	@ 0x24
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002224:	2100      	movs	r1, #0
 8002226:	4b47      	ldr	r3, [pc, #284]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x188>)
 8002228:	fb03 f201 	mul.w	r2, r3, r1
 800222c:	2300      	movs	r3, #0
 800222e:	fb00 f303 	mul.w	r3, r0, r3
 8002232:	4413      	add	r3, r2
 8002234:	4a43      	ldr	r2, [pc, #268]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x188>)
 8002236:	fba0 1202 	umull	r1, r2, r0, r2
 800223a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800223c:	460a      	mov	r2, r1
 800223e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002240:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002242:	4413      	add	r3, r2
 8002244:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002248:	2200      	movs	r2, #0
 800224a:	61bb      	str	r3, [r7, #24]
 800224c:	61fa      	str	r2, [r7, #28]
 800224e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002252:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002256:	f7fd ffd7 	bl	8000208 <__aeabi_uldivmod>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4613      	mov	r3, r2
 8002260:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002262:	e053      	b.n	800230c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002264:	4b35      	ldr	r3, [pc, #212]	@ (800233c <HAL_RCC_GetSysClockFreq+0x180>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	099b      	lsrs	r3, r3, #6
 800226a:	2200      	movs	r2, #0
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	617a      	str	r2, [r7, #20]
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002276:	f04f 0b00 	mov.w	fp, #0
 800227a:	4652      	mov	r2, sl
 800227c:	465b      	mov	r3, fp
 800227e:	f04f 0000 	mov.w	r0, #0
 8002282:	f04f 0100 	mov.w	r1, #0
 8002286:	0159      	lsls	r1, r3, #5
 8002288:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800228c:	0150      	lsls	r0, r2, #5
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	ebb2 080a 	subs.w	r8, r2, sl
 8002296:	eb63 090b 	sbc.w	r9, r3, fp
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80022a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80022aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80022ae:	ebb2 0408 	subs.w	r4, r2, r8
 80022b2:	eb63 0509 	sbc.w	r5, r3, r9
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	f04f 0300 	mov.w	r3, #0
 80022be:	00eb      	lsls	r3, r5, #3
 80022c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022c4:	00e2      	lsls	r2, r4, #3
 80022c6:	4614      	mov	r4, r2
 80022c8:	461d      	mov	r5, r3
 80022ca:	eb14 030a 	adds.w	r3, r4, sl
 80022ce:	603b      	str	r3, [r7, #0]
 80022d0:	eb45 030b 	adc.w	r3, r5, fp
 80022d4:	607b      	str	r3, [r7, #4]
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022e2:	4629      	mov	r1, r5
 80022e4:	028b      	lsls	r3, r1, #10
 80022e6:	4621      	mov	r1, r4
 80022e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022ec:	4621      	mov	r1, r4
 80022ee:	028a      	lsls	r2, r1, #10
 80022f0:	4610      	mov	r0, r2
 80022f2:	4619      	mov	r1, r3
 80022f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022f6:	2200      	movs	r2, #0
 80022f8:	60bb      	str	r3, [r7, #8]
 80022fa:	60fa      	str	r2, [r7, #12]
 80022fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002300:	f7fd ff82 	bl	8000208 <__aeabi_uldivmod>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4613      	mov	r3, r2
 800230a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800230c:	4b0b      	ldr	r3, [pc, #44]	@ (800233c <HAL_RCC_GetSysClockFreq+0x180>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	0c1b      	lsrs	r3, r3, #16
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	3301      	adds	r3, #1
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800231c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800231e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002320:	fbb2 f3f3 	udiv	r3, r2, r3
 8002324:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002326:	e002      	b.n	800232e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002328:	4b05      	ldr	r3, [pc, #20]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x184>)
 800232a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800232c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800232e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002330:	4618      	mov	r0, r3
 8002332:	3740      	adds	r7, #64	@ 0x40
 8002334:	46bd      	mov	sp, r7
 8002336:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800233a:	bf00      	nop
 800233c:	40023800 	.word	0x40023800
 8002340:	00f42400 	.word	0x00f42400
 8002344:	017d7840 	.word	0x017d7840

08002348 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e049      	b.n	80023ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d106      	bne.n	8002374 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7fe fbc4 	bl	8000afc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2202      	movs	r2, #2
 8002378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3304      	adds	r3, #4
 8002384:	4619      	mov	r1, r3
 8002386:	4610      	mov	r0, r2
 8002388:	f000 fca2 	bl	8002cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e049      	b.n	800249c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d106      	bne.n	8002422 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f841 	bl	80024a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2202      	movs	r2, #2
 8002426:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3304      	adds	r3, #4
 8002432:	4619      	mov	r1, r3
 8002434:	4610      	mov	r0, r2
 8002436:	f000 fc4b 	bl	8002cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d109      	bne.n	80024dc <HAL_TIM_PWM_Start+0x24>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	bf14      	ite	ne
 80024d4:	2301      	movne	r3, #1
 80024d6:	2300      	moveq	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	e03c      	b.n	8002556 <HAL_TIM_PWM_Start+0x9e>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d109      	bne.n	80024f6 <HAL_TIM_PWM_Start+0x3e>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	bf14      	ite	ne
 80024ee:	2301      	movne	r3, #1
 80024f0:	2300      	moveq	r3, #0
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	e02f      	b.n	8002556 <HAL_TIM_PWM_Start+0x9e>
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d109      	bne.n	8002510 <HAL_TIM_PWM_Start+0x58>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b01      	cmp	r3, #1
 8002506:	bf14      	ite	ne
 8002508:	2301      	movne	r3, #1
 800250a:	2300      	moveq	r3, #0
 800250c:	b2db      	uxtb	r3, r3
 800250e:	e022      	b.n	8002556 <HAL_TIM_PWM_Start+0x9e>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	2b0c      	cmp	r3, #12
 8002514:	d109      	bne.n	800252a <HAL_TIM_PWM_Start+0x72>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b01      	cmp	r3, #1
 8002520:	bf14      	ite	ne
 8002522:	2301      	movne	r3, #1
 8002524:	2300      	moveq	r3, #0
 8002526:	b2db      	uxtb	r3, r3
 8002528:	e015      	b.n	8002556 <HAL_TIM_PWM_Start+0x9e>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	2b10      	cmp	r3, #16
 800252e:	d109      	bne.n	8002544 <HAL_TIM_PWM_Start+0x8c>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b01      	cmp	r3, #1
 800253a:	bf14      	ite	ne
 800253c:	2301      	movne	r3, #1
 800253e:	2300      	moveq	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	e008      	b.n	8002556 <HAL_TIM_PWM_Start+0x9e>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b01      	cmp	r3, #1
 800254e:	bf14      	ite	ne
 8002550:	2301      	movne	r3, #1
 8002552:	2300      	moveq	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e092      	b.n	8002684 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d104      	bne.n	800256e <HAL_TIM_PWM_Start+0xb6>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800256c:	e023      	b.n	80025b6 <HAL_TIM_PWM_Start+0xfe>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b04      	cmp	r3, #4
 8002572:	d104      	bne.n	800257e <HAL_TIM_PWM_Start+0xc6>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800257c:	e01b      	b.n	80025b6 <HAL_TIM_PWM_Start+0xfe>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b08      	cmp	r3, #8
 8002582:	d104      	bne.n	800258e <HAL_TIM_PWM_Start+0xd6>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2202      	movs	r2, #2
 8002588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800258c:	e013      	b.n	80025b6 <HAL_TIM_PWM_Start+0xfe>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	2b0c      	cmp	r3, #12
 8002592:	d104      	bne.n	800259e <HAL_TIM_PWM_Start+0xe6>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800259c:	e00b      	b.n	80025b6 <HAL_TIM_PWM_Start+0xfe>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	2b10      	cmp	r3, #16
 80025a2:	d104      	bne.n	80025ae <HAL_TIM_PWM_Start+0xf6>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2202      	movs	r2, #2
 80025a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025ac:	e003      	b.n	80025b6 <HAL_TIM_PWM_Start+0xfe>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2202      	movs	r2, #2
 80025b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2201      	movs	r2, #1
 80025bc:	6839      	ldr	r1, [r7, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 ff2a 	bl	8003418 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a30      	ldr	r2, [pc, #192]	@ (800268c <HAL_TIM_PWM_Start+0x1d4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d004      	beq.n	80025d8 <HAL_TIM_PWM_Start+0x120>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a2f      	ldr	r2, [pc, #188]	@ (8002690 <HAL_TIM_PWM_Start+0x1d8>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d101      	bne.n	80025dc <HAL_TIM_PWM_Start+0x124>
 80025d8:	2301      	movs	r3, #1
 80025da:	e000      	b.n	80025de <HAL_TIM_PWM_Start+0x126>
 80025dc:	2300      	movs	r3, #0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d007      	beq.n	80025f2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a25      	ldr	r2, [pc, #148]	@ (800268c <HAL_TIM_PWM_Start+0x1d4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d022      	beq.n	8002642 <HAL_TIM_PWM_Start+0x18a>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002604:	d01d      	beq.n	8002642 <HAL_TIM_PWM_Start+0x18a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a22      	ldr	r2, [pc, #136]	@ (8002694 <HAL_TIM_PWM_Start+0x1dc>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d018      	beq.n	8002642 <HAL_TIM_PWM_Start+0x18a>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a20      	ldr	r2, [pc, #128]	@ (8002698 <HAL_TIM_PWM_Start+0x1e0>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d013      	beq.n	8002642 <HAL_TIM_PWM_Start+0x18a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a1f      	ldr	r2, [pc, #124]	@ (800269c <HAL_TIM_PWM_Start+0x1e4>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d00e      	beq.n	8002642 <HAL_TIM_PWM_Start+0x18a>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a19      	ldr	r2, [pc, #100]	@ (8002690 <HAL_TIM_PWM_Start+0x1d8>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d009      	beq.n	8002642 <HAL_TIM_PWM_Start+0x18a>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a1b      	ldr	r2, [pc, #108]	@ (80026a0 <HAL_TIM_PWM_Start+0x1e8>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d004      	beq.n	8002642 <HAL_TIM_PWM_Start+0x18a>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a19      	ldr	r2, [pc, #100]	@ (80026a4 <HAL_TIM_PWM_Start+0x1ec>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d115      	bne.n	800266e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	4b17      	ldr	r3, [pc, #92]	@ (80026a8 <HAL_TIM_PWM_Start+0x1f0>)
 800264a:	4013      	ands	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2b06      	cmp	r3, #6
 8002652:	d015      	beq.n	8002680 <HAL_TIM_PWM_Start+0x1c8>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800265a:	d011      	beq.n	8002680 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0201 	orr.w	r2, r2, #1
 800266a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800266c:	e008      	b.n	8002680 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f042 0201 	orr.w	r2, r2, #1
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	e000      	b.n	8002682 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002680:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40010000 	.word	0x40010000
 8002690:	40010400 	.word	0x40010400
 8002694:	40000400 	.word	0x40000400
 8002698:	40000800 	.word	0x40000800
 800269c:	40000c00 	.word	0x40000c00
 80026a0:	40014000 	.word	0x40014000
 80026a4:	40001800 	.word	0x40001800
 80026a8:	00010007 	.word	0x00010007

080026ac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e08f      	b.n	80027e0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d106      	bne.n	80026da <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f7fe fa63 	bl	8000ba0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2202      	movs	r2, #2
 80026de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6899      	ldr	r1, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	4b3e      	ldr	r3, [pc, #248]	@ (80027e8 <HAL_TIM_Encoder_Init+0x13c>)
 80026ee:	400b      	ands	r3, r1
 80026f0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3304      	adds	r3, #4
 80026fa:	4619      	mov	r1, r3
 80026fc:	4610      	mov	r0, r2
 80026fe:	f000 fae7 	bl	8002cd0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	4313      	orrs	r3, r2
 8002722:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	4b31      	ldr	r3, [pc, #196]	@ (80027ec <HAL_TIM_Encoder_Init+0x140>)
 8002728:	4013      	ands	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	4313      	orrs	r3, r2
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4313      	orrs	r3, r2
 800273c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	4b2b      	ldr	r3, [pc, #172]	@ (80027f0 <HAL_TIM_Encoder_Init+0x144>)
 8002742:	4013      	ands	r3, r2
 8002744:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4b2a      	ldr	r3, [pc, #168]	@ (80027f4 <HAL_TIM_Encoder_Init+0x148>)
 800274a:	4013      	ands	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	021b      	lsls	r3, r3, #8
 8002758:	4313      	orrs	r3, r2
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	011a      	lsls	r2, r3, #4
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	031b      	lsls	r3, r3, #12
 800276c:	4313      	orrs	r3, r2
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800277a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8002782:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	4313      	orrs	r3, r2
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	fffebff8 	.word	0xfffebff8
 80027ec:	fffffcfc 	.word	0xfffffcfc
 80027f0:	fffff3f3 	.word	0xfffff3f3
 80027f4:	ffff0f0f 	.word	0xffff0f0f

080027f8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002808:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002810:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002818:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002820:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d110      	bne.n	800284a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d102      	bne.n	8002834 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800282e:	7b7b      	ldrb	r3, [r7, #13]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d001      	beq.n	8002838 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e069      	b.n	800290c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2202      	movs	r2, #2
 8002844:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002848:	e031      	b.n	80028ae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	2b04      	cmp	r3, #4
 800284e:	d110      	bne.n	8002872 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002850:	7bbb      	ldrb	r3, [r7, #14]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d102      	bne.n	800285c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002856:	7b3b      	ldrb	r3, [r7, #12]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d001      	beq.n	8002860 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e055      	b.n	800290c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002870:	e01d      	b.n	80028ae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002872:	7bfb      	ldrb	r3, [r7, #15]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d108      	bne.n	800288a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002878:	7bbb      	ldrb	r3, [r7, #14]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d105      	bne.n	800288a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800287e:	7b7b      	ldrb	r3, [r7, #13]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d102      	bne.n	800288a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002884:	7b3b      	ldrb	r3, [r7, #12]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d001      	beq.n	800288e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e03e      	b.n	800290c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2202      	movs	r2, #2
 8002892:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2202      	movs	r2, #2
 800289a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2202      	movs	r2, #2
 80028a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2202      	movs	r2, #2
 80028aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <HAL_TIM_Encoder_Start+0xc4>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d008      	beq.n	80028cc <HAL_TIM_Encoder_Start+0xd4>
 80028ba:	e00f      	b.n	80028dc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2201      	movs	r2, #1
 80028c2:	2100      	movs	r1, #0
 80028c4:	4618      	mov	r0, r3
 80028c6:	f000 fda7 	bl	8003418 <TIM_CCxChannelCmd>
      break;
 80028ca:	e016      	b.n	80028fa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2201      	movs	r2, #1
 80028d2:	2104      	movs	r1, #4
 80028d4:	4618      	mov	r0, r3
 80028d6:	f000 fd9f 	bl	8003418 <TIM_CCxChannelCmd>
      break;
 80028da:	e00e      	b.n	80028fa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2201      	movs	r2, #1
 80028e2:	2100      	movs	r1, #0
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 fd97 	bl	8003418 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2201      	movs	r2, #1
 80028f0:	2104      	movs	r1, #4
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 fd90 	bl	8003418 <TIM_CCxChannelCmd>
      break;
 80028f8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f042 0201 	orr.w	r2, r2, #1
 8002908:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002920:	2300      	movs	r3, #0
 8002922:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800292a:	2b01      	cmp	r3, #1
 800292c:	d101      	bne.n	8002932 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800292e:	2302      	movs	r3, #2
 8002930:	e0ff      	b.n	8002b32 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b14      	cmp	r3, #20
 800293e:	f200 80f0 	bhi.w	8002b22 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002942:	a201      	add	r2, pc, #4	@ (adr r2, 8002948 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002948:	0800299d 	.word	0x0800299d
 800294c:	08002b23 	.word	0x08002b23
 8002950:	08002b23 	.word	0x08002b23
 8002954:	08002b23 	.word	0x08002b23
 8002958:	080029dd 	.word	0x080029dd
 800295c:	08002b23 	.word	0x08002b23
 8002960:	08002b23 	.word	0x08002b23
 8002964:	08002b23 	.word	0x08002b23
 8002968:	08002a1f 	.word	0x08002a1f
 800296c:	08002b23 	.word	0x08002b23
 8002970:	08002b23 	.word	0x08002b23
 8002974:	08002b23 	.word	0x08002b23
 8002978:	08002a5f 	.word	0x08002a5f
 800297c:	08002b23 	.word	0x08002b23
 8002980:	08002b23 	.word	0x08002b23
 8002984:	08002b23 	.word	0x08002b23
 8002988:	08002aa1 	.word	0x08002aa1
 800298c:	08002b23 	.word	0x08002b23
 8002990:	08002b23 	.word	0x08002b23
 8002994:	08002b23 	.word	0x08002b23
 8002998:	08002ae1 	.word	0x08002ae1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68b9      	ldr	r1, [r7, #8]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 fa40 	bl	8002e28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699a      	ldr	r2, [r3, #24]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0208 	orr.w	r2, r2, #8
 80029b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699a      	ldr	r2, [r3, #24]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0204 	bic.w	r2, r2, #4
 80029c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6999      	ldr	r1, [r3, #24]
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	691a      	ldr	r2, [r3, #16]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	619a      	str	r2, [r3, #24]
      break;
 80029da:	e0a5      	b.n	8002b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68b9      	ldr	r1, [r7, #8]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 fa92 	bl	8002f0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699a      	ldr	r2, [r3, #24]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	699a      	ldr	r2, [r3, #24]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6999      	ldr	r1, [r3, #24]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	021a      	lsls	r2, r3, #8
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	619a      	str	r2, [r3, #24]
      break;
 8002a1c:	e084      	b.n	8002b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68b9      	ldr	r1, [r7, #8]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f000 fae9 	bl	8002ffc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	69da      	ldr	r2, [r3, #28]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f042 0208 	orr.w	r2, r2, #8
 8002a38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	69da      	ldr	r2, [r3, #28]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0204 	bic.w	r2, r2, #4
 8002a48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	69d9      	ldr	r1, [r3, #28]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	691a      	ldr	r2, [r3, #16]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	61da      	str	r2, [r3, #28]
      break;
 8002a5c:	e064      	b.n	8002b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68b9      	ldr	r1, [r7, #8]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f000 fb3f 	bl	80030e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	69da      	ldr	r2, [r3, #28]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	69da      	ldr	r2, [r3, #28]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	69d9      	ldr	r1, [r3, #28]
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	021a      	lsls	r2, r3, #8
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	61da      	str	r2, [r3, #28]
      break;
 8002a9e:	e043      	b.n	8002b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 fb76 	bl	8003198 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0208 	orr.w	r2, r2, #8
 8002aba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0204 	bic.w	r2, r2, #4
 8002aca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	691a      	ldr	r2, [r3, #16]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002ade:	e023      	b.n	8002b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68b9      	ldr	r1, [r7, #8]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 fba8 	bl	800323c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002afa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b0a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	021a      	lsls	r2, r3, #8
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002b20:	e002      	b.n	8002b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	75fb      	strb	r3, [r7, #23]
      break;
 8002b26:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b30:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop

08002b3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b46:	2300      	movs	r3, #0
 8002b48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <HAL_TIM_ConfigClockSource+0x1c>
 8002b54:	2302      	movs	r3, #2
 8002b56:	e0b4      	b.n	8002cc2 <HAL_TIM_ConfigClockSource+0x186>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2202      	movs	r2, #2
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	4b56      	ldr	r3, [pc, #344]	@ (8002ccc <HAL_TIM_ConfigClockSource+0x190>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b90:	d03e      	beq.n	8002c10 <HAL_TIM_ConfigClockSource+0xd4>
 8002b92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b96:	f200 8087 	bhi.w	8002ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8002b9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b9e:	f000 8086 	beq.w	8002cae <HAL_TIM_ConfigClockSource+0x172>
 8002ba2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ba6:	d87f      	bhi.n	8002ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ba8:	2b70      	cmp	r3, #112	@ 0x70
 8002baa:	d01a      	beq.n	8002be2 <HAL_TIM_ConfigClockSource+0xa6>
 8002bac:	2b70      	cmp	r3, #112	@ 0x70
 8002bae:	d87b      	bhi.n	8002ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bb0:	2b60      	cmp	r3, #96	@ 0x60
 8002bb2:	d050      	beq.n	8002c56 <HAL_TIM_ConfigClockSource+0x11a>
 8002bb4:	2b60      	cmp	r3, #96	@ 0x60
 8002bb6:	d877      	bhi.n	8002ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bb8:	2b50      	cmp	r3, #80	@ 0x50
 8002bba:	d03c      	beq.n	8002c36 <HAL_TIM_ConfigClockSource+0xfa>
 8002bbc:	2b50      	cmp	r3, #80	@ 0x50
 8002bbe:	d873      	bhi.n	8002ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bc0:	2b40      	cmp	r3, #64	@ 0x40
 8002bc2:	d058      	beq.n	8002c76 <HAL_TIM_ConfigClockSource+0x13a>
 8002bc4:	2b40      	cmp	r3, #64	@ 0x40
 8002bc6:	d86f      	bhi.n	8002ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bc8:	2b30      	cmp	r3, #48	@ 0x30
 8002bca:	d064      	beq.n	8002c96 <HAL_TIM_ConfigClockSource+0x15a>
 8002bcc:	2b30      	cmp	r3, #48	@ 0x30
 8002bce:	d86b      	bhi.n	8002ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bd0:	2b20      	cmp	r3, #32
 8002bd2:	d060      	beq.n	8002c96 <HAL_TIM_ConfigClockSource+0x15a>
 8002bd4:	2b20      	cmp	r3, #32
 8002bd6:	d867      	bhi.n	8002ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d05c      	beq.n	8002c96 <HAL_TIM_ConfigClockSource+0x15a>
 8002bdc:	2b10      	cmp	r3, #16
 8002bde:	d05a      	beq.n	8002c96 <HAL_TIM_ConfigClockSource+0x15a>
 8002be0:	e062      	b.n	8002ca8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bf2:	f000 fbf1 	bl	80033d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002c04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	609a      	str	r2, [r3, #8]
      break;
 8002c0e:	e04f      	b.n	8002cb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c20:	f000 fbda 	bl	80033d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c32:	609a      	str	r2, [r3, #8]
      break;
 8002c34:	e03c      	b.n	8002cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c42:	461a      	mov	r2, r3
 8002c44:	f000 fb4e 	bl	80032e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2150      	movs	r1, #80	@ 0x50
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 fba7 	bl	80033a2 <TIM_ITRx_SetConfig>
      break;
 8002c54:	e02c      	b.n	8002cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c62:	461a      	mov	r2, r3
 8002c64:	f000 fb6d 	bl	8003342 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2160      	movs	r1, #96	@ 0x60
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 fb97 	bl	80033a2 <TIM_ITRx_SetConfig>
      break;
 8002c74:	e01c      	b.n	8002cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c82:	461a      	mov	r2, r3
 8002c84:	f000 fb2e 	bl	80032e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2140      	movs	r1, #64	@ 0x40
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 fb87 	bl	80033a2 <TIM_ITRx_SetConfig>
      break;
 8002c94:	e00c      	b.n	8002cb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4610      	mov	r0, r2
 8002ca2:	f000 fb7e 	bl	80033a2 <TIM_ITRx_SetConfig>
      break;
 8002ca6:	e003      	b.n	8002cb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	73fb      	strb	r3, [r7, #15]
      break;
 8002cac:	e000      	b.n	8002cb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002cae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	fffeff88 	.word	0xfffeff88

08002cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a46      	ldr	r2, [pc, #280]	@ (8002dfc <TIM_Base_SetConfig+0x12c>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d013      	beq.n	8002d10 <TIM_Base_SetConfig+0x40>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cee:	d00f      	beq.n	8002d10 <TIM_Base_SetConfig+0x40>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a43      	ldr	r2, [pc, #268]	@ (8002e00 <TIM_Base_SetConfig+0x130>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d00b      	beq.n	8002d10 <TIM_Base_SetConfig+0x40>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a42      	ldr	r2, [pc, #264]	@ (8002e04 <TIM_Base_SetConfig+0x134>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d007      	beq.n	8002d10 <TIM_Base_SetConfig+0x40>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a41      	ldr	r2, [pc, #260]	@ (8002e08 <TIM_Base_SetConfig+0x138>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d003      	beq.n	8002d10 <TIM_Base_SetConfig+0x40>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a40      	ldr	r2, [pc, #256]	@ (8002e0c <TIM_Base_SetConfig+0x13c>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d108      	bne.n	8002d22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a35      	ldr	r2, [pc, #212]	@ (8002dfc <TIM_Base_SetConfig+0x12c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d02b      	beq.n	8002d82 <TIM_Base_SetConfig+0xb2>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d30:	d027      	beq.n	8002d82 <TIM_Base_SetConfig+0xb2>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a32      	ldr	r2, [pc, #200]	@ (8002e00 <TIM_Base_SetConfig+0x130>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d023      	beq.n	8002d82 <TIM_Base_SetConfig+0xb2>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a31      	ldr	r2, [pc, #196]	@ (8002e04 <TIM_Base_SetConfig+0x134>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d01f      	beq.n	8002d82 <TIM_Base_SetConfig+0xb2>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a30      	ldr	r2, [pc, #192]	@ (8002e08 <TIM_Base_SetConfig+0x138>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d01b      	beq.n	8002d82 <TIM_Base_SetConfig+0xb2>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a2f      	ldr	r2, [pc, #188]	@ (8002e0c <TIM_Base_SetConfig+0x13c>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d017      	beq.n	8002d82 <TIM_Base_SetConfig+0xb2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a2e      	ldr	r2, [pc, #184]	@ (8002e10 <TIM_Base_SetConfig+0x140>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d013      	beq.n	8002d82 <TIM_Base_SetConfig+0xb2>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a2d      	ldr	r2, [pc, #180]	@ (8002e14 <TIM_Base_SetConfig+0x144>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00f      	beq.n	8002d82 <TIM_Base_SetConfig+0xb2>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a2c      	ldr	r2, [pc, #176]	@ (8002e18 <TIM_Base_SetConfig+0x148>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d00b      	beq.n	8002d82 <TIM_Base_SetConfig+0xb2>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a2b      	ldr	r2, [pc, #172]	@ (8002e1c <TIM_Base_SetConfig+0x14c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d007      	beq.n	8002d82 <TIM_Base_SetConfig+0xb2>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a2a      	ldr	r2, [pc, #168]	@ (8002e20 <TIM_Base_SetConfig+0x150>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d003      	beq.n	8002d82 <TIM_Base_SetConfig+0xb2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a29      	ldr	r2, [pc, #164]	@ (8002e24 <TIM_Base_SetConfig+0x154>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d108      	bne.n	8002d94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a10      	ldr	r2, [pc, #64]	@ (8002dfc <TIM_Base_SetConfig+0x12c>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d003      	beq.n	8002dc8 <TIM_Base_SetConfig+0xf8>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a12      	ldr	r2, [pc, #72]	@ (8002e0c <TIM_Base_SetConfig+0x13c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d103      	bne.n	8002dd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d105      	bne.n	8002dee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	f023 0201 	bic.w	r2, r3, #1
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	611a      	str	r2, [r3, #16]
  }
}
 8002dee:	bf00      	nop
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40010000 	.word	0x40010000
 8002e00:	40000400 	.word	0x40000400
 8002e04:	40000800 	.word	0x40000800
 8002e08:	40000c00 	.word	0x40000c00
 8002e0c:	40010400 	.word	0x40010400
 8002e10:	40014000 	.word	0x40014000
 8002e14:	40014400 	.word	0x40014400
 8002e18:	40014800 	.word	0x40014800
 8002e1c:	40001800 	.word	0x40001800
 8002e20:	40001c00 	.word	0x40001c00
 8002e24:	40002000 	.word	0x40002000

08002e28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	f023 0201 	bic.w	r2, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	4b2b      	ldr	r3, [pc, #172]	@ (8002f00 <TIM_OC1_SetConfig+0xd8>)
 8002e54:	4013      	ands	r3, r2
 8002e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f023 0303 	bic.w	r3, r3, #3
 8002e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f023 0302 	bic.w	r3, r3, #2
 8002e70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a21      	ldr	r2, [pc, #132]	@ (8002f04 <TIM_OC1_SetConfig+0xdc>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d003      	beq.n	8002e8c <TIM_OC1_SetConfig+0x64>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a20      	ldr	r2, [pc, #128]	@ (8002f08 <TIM_OC1_SetConfig+0xe0>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d10c      	bne.n	8002ea6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	f023 0308 	bic.w	r3, r3, #8
 8002e92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f023 0304 	bic.w	r3, r3, #4
 8002ea4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a16      	ldr	r2, [pc, #88]	@ (8002f04 <TIM_OC1_SetConfig+0xdc>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d003      	beq.n	8002eb6 <TIM_OC1_SetConfig+0x8e>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a15      	ldr	r2, [pc, #84]	@ (8002f08 <TIM_OC1_SetConfig+0xe0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d111      	bne.n	8002eda <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ebc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	621a      	str	r2, [r3, #32]
}
 8002ef4:	bf00      	nop
 8002ef6:	371c      	adds	r7, #28
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	fffeff8f 	.word	0xfffeff8f
 8002f04:	40010000 	.word	0x40010000
 8002f08:	40010400 	.word	0x40010400

08002f0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b087      	sub	sp, #28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	f023 0210 	bic.w	r2, r3, #16
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	4b2e      	ldr	r3, [pc, #184]	@ (8002ff0 <TIM_OC2_SetConfig+0xe4>)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	021b      	lsls	r3, r3, #8
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	f023 0320 	bic.w	r3, r3, #32
 8002f56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a23      	ldr	r2, [pc, #140]	@ (8002ff4 <TIM_OC2_SetConfig+0xe8>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d003      	beq.n	8002f74 <TIM_OC2_SetConfig+0x68>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a22      	ldr	r2, [pc, #136]	@ (8002ff8 <TIM_OC2_SetConfig+0xec>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d10d      	bne.n	8002f90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a18      	ldr	r2, [pc, #96]	@ (8002ff4 <TIM_OC2_SetConfig+0xe8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d003      	beq.n	8002fa0 <TIM_OC2_SetConfig+0x94>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a17      	ldr	r2, [pc, #92]	@ (8002ff8 <TIM_OC2_SetConfig+0xec>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d113      	bne.n	8002fc8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002fa6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002fae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	621a      	str	r2, [r3, #32]
}
 8002fe2:	bf00      	nop
 8002fe4:	371c      	adds	r7, #28
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	feff8fff 	.word	0xfeff8fff
 8002ff4:	40010000 	.word	0x40010000
 8002ff8:	40010400 	.word	0x40010400

08002ffc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	4b2d      	ldr	r3, [pc, #180]	@ (80030dc <TIM_OC3_SetConfig+0xe0>)
 8003028:	4013      	ands	r3, r2
 800302a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f023 0303 	bic.w	r3, r3, #3
 8003032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	4313      	orrs	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003044:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	021b      	lsls	r3, r3, #8
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	4313      	orrs	r3, r2
 8003050:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a22      	ldr	r2, [pc, #136]	@ (80030e0 <TIM_OC3_SetConfig+0xe4>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d003      	beq.n	8003062 <TIM_OC3_SetConfig+0x66>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a21      	ldr	r2, [pc, #132]	@ (80030e4 <TIM_OC3_SetConfig+0xe8>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d10d      	bne.n	800307e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003068:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	021b      	lsls	r3, r3, #8
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	4313      	orrs	r3, r2
 8003074:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800307c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a17      	ldr	r2, [pc, #92]	@ (80030e0 <TIM_OC3_SetConfig+0xe4>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d003      	beq.n	800308e <TIM_OC3_SetConfig+0x92>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a16      	ldr	r2, [pc, #88]	@ (80030e4 <TIM_OC3_SetConfig+0xe8>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d113      	bne.n	80030b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003094:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800309c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	621a      	str	r2, [r3, #32]
}
 80030d0:	bf00      	nop
 80030d2:	371c      	adds	r7, #28
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	fffeff8f 	.word	0xfffeff8f
 80030e0:	40010000 	.word	0x40010000
 80030e4:	40010400 	.word	0x40010400

080030e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b087      	sub	sp, #28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	4b1e      	ldr	r3, [pc, #120]	@ (800318c <TIM_OC4_SetConfig+0xa4>)
 8003114:	4013      	ands	r3, r2
 8003116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800311e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	021b      	lsls	r3, r3, #8
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	4313      	orrs	r3, r2
 800312a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003132:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	031b      	lsls	r3, r3, #12
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	4313      	orrs	r3, r2
 800313e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a13      	ldr	r2, [pc, #76]	@ (8003190 <TIM_OC4_SetConfig+0xa8>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d003      	beq.n	8003150 <TIM_OC4_SetConfig+0x68>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a12      	ldr	r2, [pc, #72]	@ (8003194 <TIM_OC4_SetConfig+0xac>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d109      	bne.n	8003164 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003156:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	019b      	lsls	r3, r3, #6
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	4313      	orrs	r3, r2
 8003162:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	621a      	str	r2, [r3, #32]
}
 800317e:	bf00      	nop
 8003180:	371c      	adds	r7, #28
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	feff8fff 	.word	0xfeff8fff
 8003190:	40010000 	.word	0x40010000
 8003194:	40010400 	.word	0x40010400

08003198 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003230 <TIM_OC5_SetConfig+0x98>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80031d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	041b      	lsls	r3, r3, #16
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a12      	ldr	r2, [pc, #72]	@ (8003234 <TIM_OC5_SetConfig+0x9c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d003      	beq.n	80031f6 <TIM_OC5_SetConfig+0x5e>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a11      	ldr	r2, [pc, #68]	@ (8003238 <TIM_OC5_SetConfig+0xa0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d109      	bne.n	800320a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	021b      	lsls	r3, r3, #8
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	4313      	orrs	r3, r2
 8003208:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	621a      	str	r2, [r3, #32]
}
 8003224:	bf00      	nop
 8003226:	371c      	adds	r7, #28
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	fffeff8f 	.word	0xfffeff8f
 8003234:	40010000 	.word	0x40010000
 8003238:	40010400 	.word	0x40010400

0800323c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800323c:	b480      	push	{r7}
 800323e:	b087      	sub	sp, #28
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	4b1c      	ldr	r3, [pc, #112]	@ (80032d8 <TIM_OC6_SetConfig+0x9c>)
 8003268:	4013      	ands	r3, r2
 800326a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	021b      	lsls	r3, r3, #8
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	4313      	orrs	r3, r2
 8003276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800327e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	051b      	lsls	r3, r3, #20
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	4313      	orrs	r3, r2
 800328a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a13      	ldr	r2, [pc, #76]	@ (80032dc <TIM_OC6_SetConfig+0xa0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d003      	beq.n	800329c <TIM_OC6_SetConfig+0x60>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a12      	ldr	r2, [pc, #72]	@ (80032e0 <TIM_OC6_SetConfig+0xa4>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d109      	bne.n	80032b0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	029b      	lsls	r3, r3, #10
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	621a      	str	r2, [r3, #32]
}
 80032ca:	bf00      	nop
 80032cc:	371c      	adds	r7, #28
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	feff8fff 	.word	0xfeff8fff
 80032dc:	40010000 	.word	0x40010000
 80032e0:	40010400 	.word	0x40010400

080032e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	f023 0201 	bic.w	r2, r3, #1
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800330e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	4313      	orrs	r3, r2
 8003318:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f023 030a 	bic.w	r3, r3, #10
 8003320:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	4313      	orrs	r3, r2
 8003328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	621a      	str	r2, [r3, #32]
}
 8003336:	bf00      	nop
 8003338:	371c      	adds	r7, #28
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003342:	b480      	push	{r7}
 8003344:	b087      	sub	sp, #28
 8003346:	af00      	add	r7, sp, #0
 8003348:	60f8      	str	r0, [r7, #12]
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	f023 0210 	bic.w	r2, r3, #16
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800336c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	031b      	lsls	r3, r3, #12
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	4313      	orrs	r3, r2
 8003376:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800337e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	4313      	orrs	r3, r2
 8003388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	621a      	str	r2, [r3, #32]
}
 8003396:	bf00      	nop
 8003398:	371c      	adds	r7, #28
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b085      	sub	sp, #20
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
 80033aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4313      	orrs	r3, r2
 80033c0:	f043 0307 	orr.w	r3, r3, #7
 80033c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	609a      	str	r2, [r3, #8]
}
 80033cc:	bf00      	nop
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033d8:	b480      	push	{r7}
 80033da:	b087      	sub	sp, #28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
 80033e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80033f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	021a      	lsls	r2, r3, #8
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	431a      	orrs	r2, r3
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	4313      	orrs	r3, r2
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	4313      	orrs	r3, r2
 8003404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	609a      	str	r2, [r3, #8]
}
 800340c:	bf00      	nop
 800340e:	371c      	adds	r7, #28
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f003 031f 	and.w	r3, r3, #31
 800342a:	2201      	movs	r2, #1
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a1a      	ldr	r2, [r3, #32]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	43db      	mvns	r3, r3
 800343a:	401a      	ands	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a1a      	ldr	r2, [r3, #32]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f003 031f 	and.w	r3, r3, #31
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	fa01 f303 	lsl.w	r3, r1, r3
 8003450:	431a      	orrs	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	621a      	str	r2, [r3, #32]
}
 8003456:	bf00      	nop
 8003458:	371c      	adds	r7, #28
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
	...

08003464 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003474:	2b01      	cmp	r3, #1
 8003476:	d101      	bne.n	800347c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003478:	2302      	movs	r3, #2
 800347a:	e06d      	b.n	8003558 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a30      	ldr	r2, [pc, #192]	@ (8003564 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d004      	beq.n	80034b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a2f      	ldr	r2, [pc, #188]	@ (8003568 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d108      	bne.n	80034c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80034b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	4313      	orrs	r3, r2
 80034c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a20      	ldr	r2, [pc, #128]	@ (8003564 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d022      	beq.n	800352c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034ee:	d01d      	beq.n	800352c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a1d      	ldr	r2, [pc, #116]	@ (800356c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d018      	beq.n	800352c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a1c      	ldr	r2, [pc, #112]	@ (8003570 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d013      	beq.n	800352c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a1a      	ldr	r2, [pc, #104]	@ (8003574 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d00e      	beq.n	800352c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a15      	ldr	r2, [pc, #84]	@ (8003568 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d009      	beq.n	800352c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a16      	ldr	r2, [pc, #88]	@ (8003578 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d004      	beq.n	800352c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a15      	ldr	r2, [pc, #84]	@ (800357c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d10c      	bne.n	8003546 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003532:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	4313      	orrs	r3, r2
 800353c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3714      	adds	r7, #20
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	40010000 	.word	0x40010000
 8003568:	40010400 	.word	0x40010400
 800356c:	40000400 	.word	0x40000400
 8003570:	40000800 	.word	0x40000800
 8003574:	40000c00 	.word	0x40000c00
 8003578:	40014000 	.word	0x40014000
 800357c:	40001800 	.word	0x40001800

08003580 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800358a:	2300      	movs	r3, #0
 800358c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003594:	2b01      	cmp	r3, #1
 8003596:	d101      	bne.n	800359c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003598:	2302      	movs	r3, #2
 800359a:	e065      	b.n	8003668 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	4313      	orrs	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4313      	orrs	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003602:	4313      	orrs	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	041b      	lsls	r3, r3, #16
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a16      	ldr	r2, [pc, #88]	@ (8003674 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d004      	beq.n	800362a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a14      	ldr	r2, [pc, #80]	@ (8003678 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d115      	bne.n	8003656 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003634:	051b      	lsls	r3, r3, #20
 8003636:	4313      	orrs	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	4313      	orrs	r3, r2
 8003646:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	4313      	orrs	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	40010000 	.word	0x40010000
 8003678:	40010400 	.word	0x40010400

0800367c <memset>:
 800367c:	4402      	add	r2, r0
 800367e:	4603      	mov	r3, r0
 8003680:	4293      	cmp	r3, r2
 8003682:	d100      	bne.n	8003686 <memset+0xa>
 8003684:	4770      	bx	lr
 8003686:	f803 1b01 	strb.w	r1, [r3], #1
 800368a:	e7f9      	b.n	8003680 <memset+0x4>

0800368c <__libc_init_array>:
 800368c:	b570      	push	{r4, r5, r6, lr}
 800368e:	4d0d      	ldr	r5, [pc, #52]	@ (80036c4 <__libc_init_array+0x38>)
 8003690:	4c0d      	ldr	r4, [pc, #52]	@ (80036c8 <__libc_init_array+0x3c>)
 8003692:	1b64      	subs	r4, r4, r5
 8003694:	10a4      	asrs	r4, r4, #2
 8003696:	2600      	movs	r6, #0
 8003698:	42a6      	cmp	r6, r4
 800369a:	d109      	bne.n	80036b0 <__libc_init_array+0x24>
 800369c:	4d0b      	ldr	r5, [pc, #44]	@ (80036cc <__libc_init_array+0x40>)
 800369e:	4c0c      	ldr	r4, [pc, #48]	@ (80036d0 <__libc_init_array+0x44>)
 80036a0:	f000 f818 	bl	80036d4 <_init>
 80036a4:	1b64      	subs	r4, r4, r5
 80036a6:	10a4      	asrs	r4, r4, #2
 80036a8:	2600      	movs	r6, #0
 80036aa:	42a6      	cmp	r6, r4
 80036ac:	d105      	bne.n	80036ba <__libc_init_array+0x2e>
 80036ae:	bd70      	pop	{r4, r5, r6, pc}
 80036b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80036b4:	4798      	blx	r3
 80036b6:	3601      	adds	r6, #1
 80036b8:	e7ee      	b.n	8003698 <__libc_init_array+0xc>
 80036ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80036be:	4798      	blx	r3
 80036c0:	3601      	adds	r6, #1
 80036c2:	e7f2      	b.n	80036aa <__libc_init_array+0x1e>
 80036c4:	0800370c 	.word	0x0800370c
 80036c8:	0800370c 	.word	0x0800370c
 80036cc:	0800370c 	.word	0x0800370c
 80036d0:	08003710 	.word	0x08003710

080036d4 <_init>:
 80036d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d6:	bf00      	nop
 80036d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036da:	bc08      	pop	{r3}
 80036dc:	469e      	mov	lr, r3
 80036de:	4770      	bx	lr

080036e0 <_fini>:
 80036e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036e2:	bf00      	nop
 80036e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036e6:	bc08      	pop	{r3}
 80036e8:	469e      	mov	lr, r3
 80036ea:	4770      	bx	lr
