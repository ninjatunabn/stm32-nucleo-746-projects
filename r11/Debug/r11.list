
r11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000400c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080041dc  080041dc  000051dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004248  08004248  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  08004248  08004248  00005248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004250  08004250  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004250  08004250  00005250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004254  08004254  00005254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004258  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005700  20000060  080042b8  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005760  080042b8  00006760  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012af7  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c3f  00000000  00000000  00018b87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  0001b7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d7a  00000000  00000000  0001c938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027199  00000000  00000000  0001d6b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013160  00000000  00000000  0004484b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5567  00000000  00000000  000579ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014cf12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b84  00000000  00000000  0014cf58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00151adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080041c4 	.word	0x080041c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	080041c4 	.word	0x080041c4

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	4a07      	ldr	r2, [pc, #28]	@ (800052c <vApplicationGetIdleTaskMemory+0x2c>)
 8000510:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	4a06      	ldr	r2, [pc, #24]	@ (8000530 <vApplicationGetIdleTaskMemory+0x30>)
 8000516:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800051e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000520:	bf00      	nop
 8000522:	3714      	adds	r7, #20
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	2000007c 	.word	0x2000007c
 8000530:	2000011c 	.word	0x2000011c

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b5b0      	push	{r4, r5, r7, lr}
 8000536:	b08e      	sub	sp, #56	@ 0x38
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053a:	f000 fda8 	bl	800108e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053e:	f000 f833 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000542:	f000 fa35 	bl	80009b0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000546:	f000 f89b 	bl	8000680 <MX_SPI1_Init>
  MX_TIM1_Init();
 800054a:	f000 f8d7 	bl	80006fc <MX_TIM1_Init>
  MX_TIM2_Init();
 800054e:	f000 f92f 	bl	80007b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000552:	f000 f981 	bl	8000858 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000556:	f000 f9d5 	bl	8000904 <MX_TIM4_Init>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  osThreadDef(encoderTask, encoderTask, osPriorityNormal, 0, 256);
 800055a:	4b11      	ldr	r3, [pc, #68]	@ (80005a0 <main+0x6c>)
 800055c:	f107 041c 	add.w	r4, r7, #28
 8000560:	461d      	mov	r5, r3
 8000562:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000564:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000566:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800056a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate(osThread(encoderTask), NULL);
 800056e:	f107 031c 	add.w	r3, r7, #28
 8000572:	2100      	movs	r1, #0
 8000574:	4618      	mov	r0, r3
 8000576:	f002 fade 	bl	8002b36 <osThreadCreate>

  osThreadDef(joystickTask, joystickTask, osPriorityNormal, 0, 256);
 800057a:	4b0a      	ldr	r3, [pc, #40]	@ (80005a4 <main+0x70>)
 800057c:	463c      	mov	r4, r7
 800057e:	461d      	mov	r5, r3
 8000580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000584:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000588:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate(osThread(joystickTask), NULL);
 800058c:	463b      	mov	r3, r7
 800058e:	2100      	movs	r1, #0
 8000590:	4618      	mov	r0, r3
 8000592:	f002 fad0 	bl	8002b36 <osThreadCreate>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000596:	f002 fac7 	bl	8002b28 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  joystickTask;
 800059a:	bf00      	nop
 800059c:	e7fd      	b.n	800059a <main+0x66>
 800059e:	bf00      	nop
 80005a0:	080041e8 	.word	0x080041e8
 80005a4:	08004214 	.word	0x08004214

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	@ 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	2230      	movs	r2, #48	@ 0x30
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f003 fd2a 	bl	8004010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005cc:	4b2a      	ldr	r3, [pc, #168]	@ (8000678 <SystemClock_Config+0xd0>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d0:	4a29      	ldr	r2, [pc, #164]	@ (8000678 <SystemClock_Config+0xd0>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d8:	4b27      	ldr	r3, [pc, #156]	@ (8000678 <SystemClock_Config+0xd0>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e4:	4b25      	ldr	r3, [pc, #148]	@ (800067c <SystemClock_Config+0xd4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a24      	ldr	r2, [pc, #144]	@ (800067c <SystemClock_Config+0xd4>)
 80005ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005ee:	6013      	str	r3, [r2, #0]
 80005f0:	4b22      	ldr	r3, [pc, #136]	@ (800067c <SystemClock_Config+0xd4>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005fc:	2302      	movs	r3, #2
 80005fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000600:	2301      	movs	r3, #1
 8000602:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000604:	2310      	movs	r3, #16
 8000606:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000608:	2302      	movs	r3, #2
 800060a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800060c:	2300      	movs	r3, #0
 800060e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000610:	2308      	movs	r3, #8
 8000612:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000614:	23c8      	movs	r3, #200	@ 0xc8
 8000616:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000618:	2302      	movs	r3, #2
 800061a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800061c:	2302      	movs	r3, #2
 800061e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	f107 0320 	add.w	r3, r7, #32
 8000624:	4618      	mov	r0, r3
 8000626:	f001 f8d9 	bl	80017dc <HAL_RCC_OscConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000630:	f000 fb08 	bl	8000c44 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000634:	f001 f882 	bl	800173c <HAL_PWREx_EnableOverDrive>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800063e:	f000 fb01 	bl	8000c44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000642:	230f      	movs	r3, #15
 8000644:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000646:	2302      	movs	r3, #2
 8000648:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800064e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000652:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000654:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000658:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	2106      	movs	r1, #6
 8000660:	4618      	mov	r0, r3
 8000662:	f001 fb5f 	bl	8001d24 <HAL_RCC_ClockConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800066c:	f000 faea 	bl	8000c44 <Error_Handler>
  }
}
 8000670:	bf00      	nop
 8000672:	3750      	adds	r7, #80	@ 0x50
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40023800 	.word	0x40023800
 800067c:	40007000 	.word	0x40007000

08000680 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000684:	4b1b      	ldr	r3, [pc, #108]	@ (80006f4 <MX_SPI1_Init+0x74>)
 8000686:	4a1c      	ldr	r2, [pc, #112]	@ (80006f8 <MX_SPI1_Init+0x78>)
 8000688:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800068a:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <MX_SPI1_Init+0x74>)
 800068c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000690:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000692:	4b18      	ldr	r3, [pc, #96]	@ (80006f4 <MX_SPI1_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000698:	4b16      	ldr	r3, [pc, #88]	@ (80006f4 <MX_SPI1_Init+0x74>)
 800069a:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 800069e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006a0:	4b14      	ldr	r3, [pc, #80]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80006a6:	4b13      	ldr	r3, [pc, #76]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ac:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006bc:	2280      	movs	r2, #128	@ 0x80
 80006be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80006cc:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006ce:	2207      	movs	r2, #7
 80006d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006d2:	4b08      	ldr	r3, [pc, #32]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80006d8:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006e0:	f001 fd12 	bl	8002108 <HAL_SPI_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80006ea:	f000 faab 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	2000051c 	.word	0x2000051c
 80006f8:	40013000 	.word	0x40013000

080006fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08c      	sub	sp, #48	@ 0x30
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	2224      	movs	r2, #36	@ 0x24
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f003 fc80 	bl	8004010 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000710:	463b      	mov	r3, r7
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800071a:	4b23      	ldr	r3, [pc, #140]	@ (80007a8 <MX_TIM1_Init+0xac>)
 800071c:	4a23      	ldr	r2, [pc, #140]	@ (80007ac <MX_TIM1_Init+0xb0>)
 800071e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000720:	4b21      	ldr	r3, [pc, #132]	@ (80007a8 <MX_TIM1_Init+0xac>)
 8000722:	2200      	movs	r2, #0
 8000724:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000726:	4b20      	ldr	r3, [pc, #128]	@ (80007a8 <MX_TIM1_Init+0xac>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800072c:	4b1e      	ldr	r3, [pc, #120]	@ (80007a8 <MX_TIM1_Init+0xac>)
 800072e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000732:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000734:	4b1c      	ldr	r3, [pc, #112]	@ (80007a8 <MX_TIM1_Init+0xac>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800073a:	4b1b      	ldr	r3, [pc, #108]	@ (80007a8 <MX_TIM1_Init+0xac>)
 800073c:	2200      	movs	r2, #0
 800073e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000740:	4b19      	ldr	r3, [pc, #100]	@ (80007a8 <MX_TIM1_Init+0xac>)
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000746:	2303      	movs	r3, #3
 8000748:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800074e:	2301      	movs	r3, #1
 8000750:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800075a:	2300      	movs	r3, #0
 800075c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800075e:	2301      	movs	r3, #1
 8000760:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800076a:	f107 030c 	add.w	r3, r7, #12
 800076e:	4619      	mov	r1, r3
 8000770:	480d      	ldr	r0, [pc, #52]	@ (80007a8 <MX_TIM1_Init+0xac>)
 8000772:	f001 fe89 	bl	8002488 <HAL_TIM_Encoder_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800077c:	f000 fa62 	bl	8000c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000780:	2300      	movs	r3, #0
 8000782:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000784:	2300      	movs	r3, #0
 8000786:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800078c:	463b      	mov	r3, r7
 800078e:	4619      	mov	r1, r3
 8000790:	4805      	ldr	r0, [pc, #20]	@ (80007a8 <MX_TIM1_Init+0xac>)
 8000792:	f002 f905 	bl	80029a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800079c:	f000 fa52 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	3730      	adds	r7, #48	@ 0x30
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000580 	.word	0x20000580
 80007ac:	40010000 	.word	0x40010000

080007b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08c      	sub	sp, #48	@ 0x30
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007b6:	f107 030c 	add.w	r3, r7, #12
 80007ba:	2224      	movs	r2, #36	@ 0x24
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f003 fc26 	bl	8004010 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c4:	463b      	mov	r3, r7
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007ce:	4b21      	ldr	r3, [pc, #132]	@ (8000854 <MX_TIM2_Init+0xa4>)
 80007d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000854 <MX_TIM2_Init+0xa4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000854 <MX_TIM2_Init+0xa4>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80007e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000854 <MX_TIM2_Init+0xa4>)
 80007e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000854 <MX_TIM2_Init+0xa4>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f0:	4b18      	ldr	r3, [pc, #96]	@ (8000854 <MX_TIM2_Init+0xa4>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80007f6:	2303      	movs	r3, #3
 80007f8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007fe:	2301      	movs	r3, #1
 8000800:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800080a:	2300      	movs	r3, #0
 800080c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800080e:	2301      	movs	r3, #1
 8000810:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	4619      	mov	r1, r3
 8000820:	480c      	ldr	r0, [pc, #48]	@ (8000854 <MX_TIM2_Init+0xa4>)
 8000822:	f001 fe31 	bl	8002488 <HAL_TIM_Encoder_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800082c:	f000 fa0a 	bl	8000c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000830:	2300      	movs	r3, #0
 8000832:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000834:	2300      	movs	r3, #0
 8000836:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000838:	463b      	mov	r3, r7
 800083a:	4619      	mov	r1, r3
 800083c:	4805      	ldr	r0, [pc, #20]	@ (8000854 <MX_TIM2_Init+0xa4>)
 800083e:	f002 f8af 	bl	80029a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000848:	f000 f9fc 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	3730      	adds	r7, #48	@ 0x30
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	200005cc 	.word	0x200005cc

08000858 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08c      	sub	sp, #48	@ 0x30
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	2224      	movs	r2, #36	@ 0x24
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f003 fbd2 	bl	8004010 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086c:	463b      	mov	r3, r7
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000876:	4b21      	ldr	r3, [pc, #132]	@ (80008fc <MX_TIM3_Init+0xa4>)
 8000878:	4a21      	ldr	r2, [pc, #132]	@ (8000900 <MX_TIM3_Init+0xa8>)
 800087a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800087c:	4b1f      	ldr	r3, [pc, #124]	@ (80008fc <MX_TIM3_Init+0xa4>)
 800087e:	2200      	movs	r2, #0
 8000880:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000882:	4b1e      	ldr	r3, [pc, #120]	@ (80008fc <MX_TIM3_Init+0xa4>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000888:	4b1c      	ldr	r3, [pc, #112]	@ (80008fc <MX_TIM3_Init+0xa4>)
 800088a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800088e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000890:	4b1a      	ldr	r3, [pc, #104]	@ (80008fc <MX_TIM3_Init+0xa4>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000896:	4b19      	ldr	r3, [pc, #100]	@ (80008fc <MX_TIM3_Init+0xa4>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800089c:	2303      	movs	r3, #3
 800089e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008a0:	2300      	movs	r3, #0
 80008a2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008a4:	2301      	movs	r3, #1
 80008a6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008b4:	2301      	movs	r3, #1
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	4619      	mov	r1, r3
 80008c6:	480d      	ldr	r0, [pc, #52]	@ (80008fc <MX_TIM3_Init+0xa4>)
 80008c8:	f001 fdde 	bl	8002488 <HAL_TIM_Encoder_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80008d2:	f000 f9b7 	bl	8000c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d6:	2300      	movs	r3, #0
 80008d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008de:	463b      	mov	r3, r7
 80008e0:	4619      	mov	r1, r3
 80008e2:	4806      	ldr	r0, [pc, #24]	@ (80008fc <MX_TIM3_Init+0xa4>)
 80008e4:	f002 f85c 	bl	80029a0 <HAL_TIMEx_MasterConfigSynchronization>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80008ee:	f000 f9a9 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	3730      	adds	r7, #48	@ 0x30
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000618 	.word	0x20000618
 8000900:	40000400 	.word	0x40000400

08000904 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08c      	sub	sp, #48	@ 0x30
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	2224      	movs	r2, #36	@ 0x24
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f003 fb7c 	bl	8004010 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000918:	463b      	mov	r3, r7
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000922:	4b21      	ldr	r3, [pc, #132]	@ (80009a8 <MX_TIM4_Init+0xa4>)
 8000924:	4a21      	ldr	r2, [pc, #132]	@ (80009ac <MX_TIM4_Init+0xa8>)
 8000926:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000928:	4b1f      	ldr	r3, [pc, #124]	@ (80009a8 <MX_TIM4_Init+0xa4>)
 800092a:	2200      	movs	r2, #0
 800092c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092e:	4b1e      	ldr	r3, [pc, #120]	@ (80009a8 <MX_TIM4_Init+0xa4>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000934:	4b1c      	ldr	r3, [pc, #112]	@ (80009a8 <MX_TIM4_Init+0xa4>)
 8000936:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800093a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093c:	4b1a      	ldr	r3, [pc, #104]	@ (80009a8 <MX_TIM4_Init+0xa4>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000942:	4b19      	ldr	r3, [pc, #100]	@ (80009a8 <MX_TIM4_Init+0xa4>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000948:	2303      	movs	r3, #3
 800094a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800094c:	2300      	movs	r3, #0
 800094e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000950:	2301      	movs	r3, #1
 8000952:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000960:	2301      	movs	r3, #1
 8000962:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800096c:	f107 030c 	add.w	r3, r7, #12
 8000970:	4619      	mov	r1, r3
 8000972:	480d      	ldr	r0, [pc, #52]	@ (80009a8 <MX_TIM4_Init+0xa4>)
 8000974:	f001 fd88 	bl	8002488 <HAL_TIM_Encoder_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800097e:	f000 f961 	bl	8000c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000982:	2300      	movs	r3, #0
 8000984:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000986:	2300      	movs	r3, #0
 8000988:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800098a:	463b      	mov	r3, r7
 800098c:	4619      	mov	r1, r3
 800098e:	4806      	ldr	r0, [pc, #24]	@ (80009a8 <MX_TIM4_Init+0xa4>)
 8000990:	f002 f806 	bl	80029a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800099a:	f000 f953 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	3730      	adds	r7, #48	@ 0x30
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000664 	.word	0x20000664
 80009ac:	40000800 	.word	0x40000800

080009b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08c      	sub	sp, #48	@ 0x30
 80009b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c6:	4b83      	ldr	r3, [pc, #524]	@ (8000bd4 <MX_GPIO_Init+0x224>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	4a82      	ldr	r2, [pc, #520]	@ (8000bd4 <MX_GPIO_Init+0x224>)
 80009cc:	f043 0304 	orr.w	r3, r3, #4
 80009d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d2:	4b80      	ldr	r3, [pc, #512]	@ (8000bd4 <MX_GPIO_Init+0x224>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	f003 0304 	and.w	r3, r3, #4
 80009da:	61bb      	str	r3, [r7, #24]
 80009dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009de:	4b7d      	ldr	r3, [pc, #500]	@ (8000bd4 <MX_GPIO_Init+0x224>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	4a7c      	ldr	r2, [pc, #496]	@ (8000bd4 <MX_GPIO_Init+0x224>)
 80009e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ea:	4b7a      	ldr	r3, [pc, #488]	@ (8000bd4 <MX_GPIO_Init+0x224>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	4b77      	ldr	r3, [pc, #476]	@ (8000bd4 <MX_GPIO_Init+0x224>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	4a76      	ldr	r2, [pc, #472]	@ (8000bd4 <MX_GPIO_Init+0x224>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a02:	4b74      	ldr	r3, [pc, #464]	@ (8000bd4 <MX_GPIO_Init+0x224>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0e:	4b71      	ldr	r3, [pc, #452]	@ (8000bd4 <MX_GPIO_Init+0x224>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	4a70      	ldr	r2, [pc, #448]	@ (8000bd4 <MX_GPIO_Init+0x224>)
 8000a14:	f043 0302 	orr.w	r3, r3, #2
 8000a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1a:	4b6e      	ldr	r3, [pc, #440]	@ (8000bd4 <MX_GPIO_Init+0x224>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	f003 0302 	and.w	r3, r3, #2
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a26:	4b6b      	ldr	r3, [pc, #428]	@ (8000bd4 <MX_GPIO_Init+0x224>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a6a      	ldr	r2, [pc, #424]	@ (8000bd4 <MX_GPIO_Init+0x224>)
 8000a2c:	f043 0308 	orr.w	r3, r3, #8
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b68      	ldr	r3, [pc, #416]	@ (8000bd4 <MX_GPIO_Init+0x224>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f003 0308 	and.w	r3, r3, #8
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a3e:	4b65      	ldr	r3, [pc, #404]	@ (8000bd4 <MX_GPIO_Init+0x224>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	4a64      	ldr	r2, [pc, #400]	@ (8000bd4 <MX_GPIO_Init+0x224>)
 8000a44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4a:	4b62      	ldr	r3, [pc, #392]	@ (8000bd4 <MX_GPIO_Init+0x224>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000a5c:	485e      	ldr	r0, [pc, #376]	@ (8000bd8 <MX_GPIO_Init+0x228>)
 8000a5e:	f000 fe53 	bl	8001708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2140      	movs	r1, #64	@ 0x40
 8000a66:	485d      	ldr	r0, [pc, #372]	@ (8000bdc <MX_GPIO_Init+0x22c>)
 8000a68:	f000 fe4e 	bl	8001708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a72:	485b      	ldr	r0, [pc, #364]	@ (8000be0 <MX_GPIO_Init+0x230>)
 8000a74:	f000 fe48 	bl	8001708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a7e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4855      	ldr	r0, [pc, #340]	@ (8000be4 <MX_GPIO_Init+0x234>)
 8000a90:	f000 fc8e 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a94:	2332      	movs	r3, #50	@ 0x32
 8000a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aa4:	230b      	movs	r3, #11
 8000aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	484d      	ldr	r0, [pc, #308]	@ (8000be4 <MX_GPIO_Init+0x234>)
 8000ab0:	f000 fc7e 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ab4:	2384      	movs	r3, #132	@ 0x84
 8000ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ac4:	230b      	movs	r3, #11
 8000ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	4844      	ldr	r0, [pc, #272]	@ (8000be0 <MX_GPIO_Init+0x230>)
 8000ad0:	f000 fc6e 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ad4:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ada:	2301      	movs	r3, #1
 8000adc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae6:	f107 031c 	add.w	r3, r7, #28
 8000aea:	4619      	mov	r1, r3
 8000aec:	483a      	ldr	r0, [pc, #232]	@ (8000bd8 <MX_GPIO_Init+0x228>)
 8000aee:	f000 fc5f 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000af2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af8:	2302      	movs	r3, #2
 8000afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b00:	2303      	movs	r3, #3
 8000b02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b04:	230b      	movs	r3, #11
 8000b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4832      	ldr	r0, [pc, #200]	@ (8000bd8 <MX_GPIO_Init+0x228>)
 8000b10:	f000 fc4e 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b14:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b26:	2307      	movs	r3, #7
 8000b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b2a:	f107 031c 	add.w	r3, r7, #28
 8000b2e:	4619      	mov	r1, r3
 8000b30:	482d      	ldr	r0, [pc, #180]	@ (8000be8 <MX_GPIO_Init+0x238>)
 8000b32:	f000 fc3d 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b36:	2340      	movs	r3, #64	@ 0x40
 8000b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4823      	ldr	r0, [pc, #140]	@ (8000bdc <MX_GPIO_Init+0x22c>)
 8000b4e:	f000 fc2f 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b52:	2380      	movs	r3, #128	@ 0x80
 8000b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 031c 	add.w	r3, r7, #28
 8000b62:	4619      	mov	r1, r3
 8000b64:	481d      	ldr	r0, [pc, #116]	@ (8000bdc <MX_GPIO_Init+0x22c>)
 8000b66:	f000 fc23 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	f107 031c 	add.w	r3, r7, #28
 8000b80:	4619      	mov	r1, r3
 8000b82:	4817      	ldr	r0, [pc, #92]	@ (8000be0 <MX_GPIO_Init+0x230>)
 8000b84:	f000 fc14 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8000b88:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b96:	2303      	movs	r3, #3
 8000b98:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b9a:	230a      	movs	r3, #10
 8000b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	480e      	ldr	r0, [pc, #56]	@ (8000be0 <MX_GPIO_Init+0x230>)
 8000ba6:	f000 fc03 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000baa:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bbc:	230b      	movs	r3, #11
 8000bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <MX_GPIO_Init+0x22c>)
 8000bc8:	f000 fbf2 	bl	80013b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bcc:	bf00      	nop
 8000bce:	3730      	adds	r7, #48	@ 0x30
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020400 	.word	0x40020400
 8000bdc:	40021800 	.word	0x40021800
 8000be0:	40020000 	.word	0x40020000
 8000be4:	40020800 	.word	0x40020800
 8000be8:	40020c00 	.word	0x40020c00

08000bec <encoderTask>:
//    osDelay(1);
//  }
//  /* USER CODE END 5 */
//}

void encoderTask(void const *encoder_value){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
    while (1) {
        // Read encoder values from TIM1, TIM2, TIM3, TIM4
        uint32_t encoder1_value = __HAL_TIM_GET_COUNTER(&htim1);
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8000c20 <encoderTask+0x34>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bfa:	617b      	str	r3, [r7, #20]
        uint32_t encoder2_value = __HAL_TIM_GET_COUNTER(&htim2);
 8000bfc:	4b09      	ldr	r3, [pc, #36]	@ (8000c24 <encoderTask+0x38>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c02:	613b      	str	r3, [r7, #16]
        uint32_t encoder3_value = __HAL_TIM_GET_COUNTER(&htim3);
 8000c04:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <encoderTask+0x3c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c0a:	60fb      	str	r3, [r7, #12]
        uint32_t encoder4_value = __HAL_TIM_GET_COUNTER(&htim4);
 8000c0c:	4b07      	ldr	r3, [pc, #28]	@ (8000c2c <encoderTask+0x40>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c12:	60bb      	str	r3, [r7, #8]
        // For example, print them, store them, etc.
//        printf("Encoder 1: %lu, Encoder 2: %lu, Encoder 3: %lu, Encoder 4: %lu\n",
//               encoder1_value, encoder2_value, encoder3_value, encoder4_value);

        // Delay to avoid overloading the system
        vTaskDelay(pdMS_TO_TICKS(100));  // Adjust the delay as necessary
 8000c14:	2064      	movs	r0, #100	@ 0x64
 8000c16:	f002 fa45 	bl	80030a4 <vTaskDelay>
    while (1) {
 8000c1a:	bf00      	nop
 8000c1c:	e7ea      	b.n	8000bf4 <encoderTask+0x8>
 8000c1e:	bf00      	nop
 8000c20:	20000580 	.word	0x20000580
 8000c24:	200005cc 	.word	0x200005cc
 8000c28:	20000618 	.word	0x20000618
 8000c2c:	20000664 	.word	0x20000664

08000c30 <joystickTask>:
    }
}

void joystickTask(void const *){
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]

}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c48:	b672      	cpsid	i
}
 8000c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <Error_Handler+0x8>

08000c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	4b11      	ldr	r3, [pc, #68]	@ (8000c9c <HAL_MspInit+0x4c>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5a:	4a10      	ldr	r2, [pc, #64]	@ (8000c9c <HAL_MspInit+0x4c>)
 8000c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c62:	4b0e      	ldr	r3, [pc, #56]	@ (8000c9c <HAL_MspInit+0x4c>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c9c <HAL_MspInit+0x4c>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c72:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <HAL_MspInit+0x4c>)
 8000c74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c7a:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <HAL_MspInit+0x4c>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	210f      	movs	r1, #15
 8000c8a:	f06f 0001 	mvn.w	r0, #1
 8000c8e:	f000 fb36 	bl	80012fe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40023800 	.word	0x40023800

08000ca0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	@ 0x28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a29      	ldr	r2, [pc, #164]	@ (8000d64 <HAL_SPI_MspInit+0xc4>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d14b      	bne.n	8000d5a <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cc2:	4b29      	ldr	r3, [pc, #164]	@ (8000d68 <HAL_SPI_MspInit+0xc8>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc6:	4a28      	ldr	r2, [pc, #160]	@ (8000d68 <HAL_SPI_MspInit+0xc8>)
 8000cc8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ccc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cce:	4b26      	ldr	r3, [pc, #152]	@ (8000d68 <HAL_SPI_MspInit+0xc8>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	4b23      	ldr	r3, [pc, #140]	@ (8000d68 <HAL_SPI_MspInit+0xc8>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	4a22      	ldr	r2, [pc, #136]	@ (8000d68 <HAL_SPI_MspInit+0xc8>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce6:	4b20      	ldr	r3, [pc, #128]	@ (8000d68 <HAL_SPI_MspInit+0xc8>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d68 <HAL_SPI_MspInit+0xc8>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8000d68 <HAL_SPI_MspInit+0xc8>)
 8000cf8:	f043 0302 	orr.w	r3, r3, #2
 8000cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000d68 <HAL_SPI_MspInit+0xc8>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d0a:	2320      	movs	r3, #32
 8000d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d16:	2303      	movs	r3, #3
 8000d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d1a:	2305      	movs	r3, #5
 8000d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4619      	mov	r1, r3
 8000d24:	4811      	ldr	r0, [pc, #68]	@ (8000d6c <HAL_SPI_MspInit+0xcc>)
 8000d26:	f000 fb43 	bl	80013b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d2a:	2330      	movs	r3, #48	@ 0x30
 8000d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d3a:	2305      	movs	r3, #5
 8000d3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	480a      	ldr	r0, [pc, #40]	@ (8000d70 <HAL_SPI_MspInit+0xd0>)
 8000d46:	f000 fb33 	bl	80013b0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2105      	movs	r1, #5
 8000d4e:	2023      	movs	r0, #35	@ 0x23
 8000d50:	f000 fad5 	bl	80012fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000d54:	2023      	movs	r0, #35	@ 0x23
 8000d56:	f000 faee 	bl	8001336 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d5a:	bf00      	nop
 8000d5c:	3728      	adds	r7, #40	@ 0x28
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40013000 	.word	0x40013000
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020000 	.word	0x40020000
 8000d70:	40020400 	.word	0x40020400

08000d74 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b090      	sub	sp, #64	@ 0x40
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a6d      	ldr	r2, [pc, #436]	@ (8000f48 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d131      	bne.n	8000dfa <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d96:	4b6d      	ldr	r3, [pc, #436]	@ (8000f4c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9a:	4a6c      	ldr	r2, [pc, #432]	@ (8000f4c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000da2:	4b6a      	ldr	r3, [pc, #424]	@ (8000f4c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	4b67      	ldr	r3, [pc, #412]	@ (8000f4c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	4a66      	ldr	r2, [pc, #408]	@ (8000f4c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dba:	4b64      	ldr	r3, [pc, #400]	@ (8000f4c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dc6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ddc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000de0:	4619      	mov	r1, r3
 8000de2:	485b      	ldr	r0, [pc, #364]	@ (8000f50 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000de4:	f000 fae4 	bl	80013b0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2105      	movs	r1, #5
 8000dec:	201b      	movs	r0, #27
 8000dee:	f000 fa86 	bl	80012fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000df2:	201b      	movs	r0, #27
 8000df4:	f000 fa9f 	bl	8001336 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000df8:	e0a1      	b.n	8000f3e <HAL_TIM_Encoder_MspInit+0x1ca>
  else if(htim_encoder->Instance==TIM2)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e02:	d130      	bne.n	8000e66 <HAL_TIM_Encoder_MspInit+0xf2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e04:	4b51      	ldr	r3, [pc, #324]	@ (8000f4c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8000e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e08:	4a50      	ldr	r2, [pc, #320]	@ (8000f4c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e10:	4b4e      	ldr	r3, [pc, #312]	@ (8000f4c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	623b      	str	r3, [r7, #32]
 8000e1a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1c:	4b4b      	ldr	r3, [pc, #300]	@ (8000f4c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8000e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e20:	4a4a      	ldr	r2, [pc, #296]	@ (8000f4c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e28:	4b48      	ldr	r3, [pc, #288]	@ (8000f4c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	61fb      	str	r3, [r7, #28]
 8000e32:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e34:	2303      	movs	r3, #3
 8000e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2300      	movs	r3, #0
 8000e42:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e44:	2301      	movs	r3, #1
 8000e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4840      	ldr	r0, [pc, #256]	@ (8000f50 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000e50:	f000 faae 	bl	80013b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2105      	movs	r1, #5
 8000e58:	201c      	movs	r0, #28
 8000e5a:	f000 fa50 	bl	80012fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e5e:	201c      	movs	r0, #28
 8000e60:	f000 fa69 	bl	8001336 <HAL_NVIC_EnableIRQ>
}
 8000e64:	e06b      	b.n	8000f3e <HAL_TIM_Encoder_MspInit+0x1ca>
  else if(htim_encoder->Instance==TIM3)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a3a      	ldr	r2, [pc, #232]	@ (8000f54 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d130      	bne.n	8000ed2 <HAL_TIM_Encoder_MspInit+0x15e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e70:	4b36      	ldr	r3, [pc, #216]	@ (8000f4c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e74:	4a35      	ldr	r2, [pc, #212]	@ (8000f4c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8000e76:	f043 0302 	orr.w	r3, r3, #2
 8000e7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e7c:	4b33      	ldr	r3, [pc, #204]	@ (8000f4c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	61bb      	str	r3, [r7, #24]
 8000e86:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e88:	4b30      	ldr	r3, [pc, #192]	@ (8000f4c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8c:	4a2f      	ldr	r2, [pc, #188]	@ (8000f4c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8000e8e:	f043 0304 	orr.w	r3, r3, #4
 8000e92:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e94:	4b2d      	ldr	r3, [pc, #180]	@ (8000f4c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8000e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e98:	f003 0304 	and.w	r3, r3, #4
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ea0:	23c0      	movs	r3, #192	@ 0xc0
 8000ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eac:	2300      	movs	r3, #0
 8000eae:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4827      	ldr	r0, [pc, #156]	@ (8000f58 <HAL_TIM_Encoder_MspInit+0x1e4>)
 8000ebc:	f000 fa78 	bl	80013b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2105      	movs	r1, #5
 8000ec4:	201d      	movs	r0, #29
 8000ec6:	f000 fa1a 	bl	80012fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000eca:	201d      	movs	r0, #29
 8000ecc:	f000 fa33 	bl	8001336 <HAL_NVIC_EnableIRQ>
}
 8000ed0:	e035      	b.n	8000f3e <HAL_TIM_Encoder_MspInit+0x1ca>
  else if(htim_encoder->Instance==TIM4)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a21      	ldr	r2, [pc, #132]	@ (8000f5c <HAL_TIM_Encoder_MspInit+0x1e8>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d130      	bne.n	8000f3e <HAL_TIM_Encoder_MspInit+0x1ca>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000edc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f4c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8000ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee0:	4a1a      	ldr	r2, [pc, #104]	@ (8000f4c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8000ee2:	f043 0304 	orr.w	r3, r3, #4
 8000ee6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ee8:	4b18      	ldr	r3, [pc, #96]	@ (8000f4c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8000eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eec:	f003 0304 	and.w	r3, r3, #4
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef4:	4b15      	ldr	r3, [pc, #84]	@ (8000f4c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8000ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef8:	4a14      	ldr	r2, [pc, #80]	@ (8000f4c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8000efa:	f043 0308 	orr.w	r3, r3, #8
 8000efe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f00:	4b12      	ldr	r3, [pc, #72]	@ (8000f4c <HAL_TIM_Encoder_MspInit+0x1d8>)
 8000f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f04:	f003 0308 	and.w	r3, r3, #8
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000f0c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f26:	4619      	mov	r1, r3
 8000f28:	480d      	ldr	r0, [pc, #52]	@ (8000f60 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8000f2a:	f000 fa41 	bl	80013b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2105      	movs	r1, #5
 8000f32:	201e      	movs	r0, #30
 8000f34:	f000 f9e3 	bl	80012fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f38:	201e      	movs	r0, #30
 8000f3a:	f000 f9fc 	bl	8001336 <HAL_NVIC_EnableIRQ>
}
 8000f3e:	bf00      	nop
 8000f40:	3740      	adds	r7, #64	@ 0x40
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40010000 	.word	0x40010000
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40020000 	.word	0x40020000
 8000f54:	40000400 	.word	0x40000400
 8000f58:	40020800 	.word	0x40020800
 8000f5c:	40000800 	.word	0x40000800
 8000f60:	40020c00 	.word	0x40020c00

08000f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <NMI_Handler+0x4>

08000f6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <BusFault_Handler+0x4>

08000f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <UsageFault_Handler+0x4>

08000f8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f9e:	f000 f8b3 	bl	8001108 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000fa2:	f002 fbd3 	bl	800374c <xTaskGetSchedulerState>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d001      	beq.n	8000fb0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000fac:	f002 fdf4 	bl	8003b98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fb8:	4802      	ldr	r0, [pc, #8]	@ (8000fc4 <TIM1_CC_IRQHandler+0x10>)
 8000fba:	f001 fb0b 	bl	80025d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000580 	.word	0x20000580

08000fc8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fcc:	4802      	ldr	r0, [pc, #8]	@ (8000fd8 <TIM2_IRQHandler+0x10>)
 8000fce:	f001 fb01 	bl	80025d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200005cc 	.word	0x200005cc

08000fdc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000fe0:	4802      	ldr	r0, [pc, #8]	@ (8000fec <TIM3_IRQHandler+0x10>)
 8000fe2:	f001 faf7 	bl	80025d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000618 	.word	0x20000618

08000ff0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ff4:	4802      	ldr	r0, [pc, #8]	@ (8001000 <TIM4_IRQHandler+0x10>)
 8000ff6:	f001 faed 	bl	80025d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000664 	.word	0x20000664

08001004 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001008:	4802      	ldr	r0, [pc, #8]	@ (8001014 <SPI1_IRQHandler+0x10>)
 800100a:	f001 f929 	bl	8002260 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	2000051c 	.word	0x2000051c

08001018 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <SystemInit+0x20>)
 800101e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001022:	4a05      	ldr	r2, [pc, #20]	@ (8001038 <SystemInit+0x20>)
 8001024:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001028:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800103c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001074 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001040:	f7ff ffea 	bl	8001018 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001044:	480c      	ldr	r0, [pc, #48]	@ (8001078 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001046:	490d      	ldr	r1, [pc, #52]	@ (800107c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001048:	4a0d      	ldr	r2, [pc, #52]	@ (8001080 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800104c:	e002      	b.n	8001054 <LoopCopyDataInit>

0800104e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001052:	3304      	adds	r3, #4

08001054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001058:	d3f9      	bcc.n	800104e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105a:	4a0a      	ldr	r2, [pc, #40]	@ (8001084 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800105c:	4c0a      	ldr	r4, [pc, #40]	@ (8001088 <LoopFillZerobss+0x22>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001060:	e001      	b.n	8001066 <LoopFillZerobss>

08001062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001064:	3204      	adds	r2, #4

08001066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001068:	d3fb      	bcc.n	8001062 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800106a:	f003 f82f 	bl	80040cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800106e:	f7ff fa61 	bl	8000534 <main>
  bx  lr    
 8001072:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001074:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800107c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001080:	08004258 	.word	0x08004258
  ldr r2, =_sbss
 8001084:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001088:	20005760 	.word	0x20005760

0800108c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800108c:	e7fe      	b.n	800108c <ADC_IRQHandler>

0800108e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001092:	2003      	movs	r0, #3
 8001094:	f000 f928 	bl	80012e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001098:	200f      	movs	r0, #15
 800109a:	f000 f805 	bl	80010a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800109e:	f7ff fdd7 	bl	8000c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b0:	4b12      	ldr	r3, [pc, #72]	@ (80010fc <HAL_InitTick+0x54>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <HAL_InitTick+0x58>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010be:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 f943 	bl	8001352 <HAL_SYSTICK_Config>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00e      	b.n	80010f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b0f      	cmp	r3, #15
 80010da:	d80a      	bhi.n	80010f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010dc:	2200      	movs	r2, #0
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010e4:	f000 f90b 	bl	80012fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e8:	4a06      	ldr	r2, [pc, #24]	@ (8001104 <HAL_InitTick+0x5c>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e000      	b.n	80010f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000000 	.word	0x20000000
 8001100:	20000008 	.word	0x20000008
 8001104:	20000004 	.word	0x20000004

08001108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <HAL_IncTick+0x20>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4b06      	ldr	r3, [pc, #24]	@ (800112c <HAL_IncTick+0x24>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4413      	add	r3, r2
 8001118:	4a04      	ldr	r2, [pc, #16]	@ (800112c <HAL_IncTick+0x24>)
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000008 	.word	0x20000008
 800112c:	200006b0 	.word	0x200006b0

08001130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;
 8001134:	4b03      	ldr	r3, [pc, #12]	@ (8001144 <HAL_GetTick+0x14>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	200006b0 	.word	0x200006b0

08001148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001158:	4b0b      	ldr	r3, [pc, #44]	@ (8001188 <__NVIC_SetPriorityGrouping+0x40>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001164:	4013      	ands	r3, r2
 8001166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001170:	4b06      	ldr	r3, [pc, #24]	@ (800118c <__NVIC_SetPriorityGrouping+0x44>)
 8001172:	4313      	orrs	r3, r2
 8001174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001176:	4a04      	ldr	r2, [pc, #16]	@ (8001188 <__NVIC_SetPriorityGrouping+0x40>)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	60d3      	str	r3, [r2, #12]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00
 800118c:	05fa0000 	.word	0x05fa0000

08001190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001194:	4b04      	ldr	r3, [pc, #16]	@ (80011a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	0a1b      	lsrs	r3, r3, #8
 800119a:	f003 0307 	and.w	r3, r3, #7
}
 800119e:	4618      	mov	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	db0b      	blt.n	80011d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	f003 021f 	and.w	r2, r3, #31
 80011c4:	4907      	ldr	r1, [pc, #28]	@ (80011e4 <__NVIC_EnableIRQ+0x38>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	095b      	lsrs	r3, r3, #5
 80011cc:	2001      	movs	r0, #1
 80011ce:	fa00 f202 	lsl.w	r2, r0, r2
 80011d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000e100 	.word	0xe000e100

080011e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	db0a      	blt.n	8001212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	490c      	ldr	r1, [pc, #48]	@ (8001234 <__NVIC_SetPriority+0x4c>)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	0112      	lsls	r2, r2, #4
 8001208:	b2d2      	uxtb	r2, r2
 800120a:	440b      	add	r3, r1
 800120c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001210:	e00a      	b.n	8001228 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4908      	ldr	r1, [pc, #32]	@ (8001238 <__NVIC_SetPriority+0x50>)
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	3b04      	subs	r3, #4
 8001220:	0112      	lsls	r2, r2, #4
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	440b      	add	r3, r1
 8001226:	761a      	strb	r2, [r3, #24]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000e100 	.word	0xe000e100
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800123c:	b480      	push	{r7}
 800123e:	b089      	sub	sp, #36	@ 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f1c3 0307 	rsb	r3, r3, #7
 8001256:	2b04      	cmp	r3, #4
 8001258:	bf28      	it	cs
 800125a:	2304      	movcs	r3, #4
 800125c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3304      	adds	r3, #4
 8001262:	2b06      	cmp	r3, #6
 8001264:	d902      	bls.n	800126c <NVIC_EncodePriority+0x30>
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3b03      	subs	r3, #3
 800126a:	e000      	b.n	800126e <NVIC_EncodePriority+0x32>
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43da      	mvns	r2, r3
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	401a      	ands	r2, r3
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001284:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	fa01 f303 	lsl.w	r3, r1, r3
 800128e:	43d9      	mvns	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	4313      	orrs	r3, r2
         );
}
 8001296:	4618      	mov	r0, r3
 8001298:	3724      	adds	r7, #36	@ 0x24
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012b4:	d301      	bcc.n	80012ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b6:	2301      	movs	r3, #1
 80012b8:	e00f      	b.n	80012da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ba:	4a0a      	ldr	r2, [pc, #40]	@ (80012e4 <SysTick_Config+0x40>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c2:	210f      	movs	r1, #15
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012c8:	f7ff ff8e 	bl	80011e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012cc:	4b05      	ldr	r3, [pc, #20]	@ (80012e4 <SysTick_Config+0x40>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d2:	4b04      	ldr	r3, [pc, #16]	@ (80012e4 <SysTick_Config+0x40>)
 80012d4:	2207      	movs	r2, #7
 80012d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	e000e010 	.word	0xe000e010

080012e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ff29 	bl	8001148 <__NVIC_SetPriorityGrouping>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001310:	f7ff ff3e 	bl	8001190 <__NVIC_GetPriorityGrouping>
 8001314:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	68b9      	ldr	r1, [r7, #8]
 800131a:	6978      	ldr	r0, [r7, #20]
 800131c:	f7ff ff8e 	bl	800123c <NVIC_EncodePriority>
 8001320:	4602      	mov	r2, r0
 8001322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff5d 	bl	80011e8 <__NVIC_SetPriority>
}
 800132e:	bf00      	nop
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	4603      	mov	r3, r0
 800133e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff31 	bl	80011ac <__NVIC_EnableIRQ>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff ffa2 	bl	80012a4 <SysTick_Config>
 8001360:	4603      	mov	r3, r0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d004      	beq.n	8001388 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2280      	movs	r2, #128	@ 0x80
 8001382:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e00c      	b.n	80013a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2205      	movs	r2, #5
 800138c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 0201 	bic.w	r2, r2, #1
 800139e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
	...

080013b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b089      	sub	sp, #36	@ 0x24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
 80013ce:	e175      	b.n	80016bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80013d0:	2201      	movs	r2, #1
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	f040 8164 	bne.w	80016b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f003 0303 	and.w	r3, r3, #3
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d005      	beq.n	8001406 <HAL_GPIO_Init+0x56>
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f003 0303 	and.w	r3, r3, #3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d130      	bne.n	8001468 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	2203      	movs	r2, #3
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	68da      	ldr	r2, [r3, #12]
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800143c:	2201      	movs	r2, #1
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4013      	ands	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	091b      	lsrs	r3, r3, #4
 8001452:	f003 0201 	and.w	r2, r3, #1
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4313      	orrs	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 0303 	and.w	r3, r3, #3
 8001470:	2b03      	cmp	r3, #3
 8001472:	d017      	beq.n	80014a4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	2203      	movs	r2, #3
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 0303 	and.w	r3, r3, #3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d123      	bne.n	80014f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	08da      	lsrs	r2, r3, #3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3208      	adds	r2, #8
 80014b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	f003 0307 	and.w	r3, r3, #7
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	220f      	movs	r2, #15
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	691a      	ldr	r2, [r3, #16]
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	08da      	lsrs	r2, r3, #3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	3208      	adds	r2, #8
 80014f2:	69b9      	ldr	r1, [r7, #24]
 80014f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	2203      	movs	r2, #3
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 0203 	and.w	r2, r3, #3
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4313      	orrs	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001534:	2b00      	cmp	r3, #0
 8001536:	f000 80be 	beq.w	80016b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153a:	4b66      	ldr	r3, [pc, #408]	@ (80016d4 <HAL_GPIO_Init+0x324>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153e:	4a65      	ldr	r2, [pc, #404]	@ (80016d4 <HAL_GPIO_Init+0x324>)
 8001540:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001544:	6453      	str	r3, [r2, #68]	@ 0x44
 8001546:	4b63      	ldr	r3, [pc, #396]	@ (80016d4 <HAL_GPIO_Init+0x324>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001552:	4a61      	ldr	r2, [pc, #388]	@ (80016d8 <HAL_GPIO_Init+0x328>)
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	089b      	lsrs	r3, r3, #2
 8001558:	3302      	adds	r3, #2
 800155a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800155e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	f003 0303 	and.w	r3, r3, #3
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	220f      	movs	r2, #15
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43db      	mvns	r3, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4013      	ands	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a58      	ldr	r2, [pc, #352]	@ (80016dc <HAL_GPIO_Init+0x32c>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d037      	beq.n	80015ee <HAL_GPIO_Init+0x23e>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a57      	ldr	r2, [pc, #348]	@ (80016e0 <HAL_GPIO_Init+0x330>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d031      	beq.n	80015ea <HAL_GPIO_Init+0x23a>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a56      	ldr	r2, [pc, #344]	@ (80016e4 <HAL_GPIO_Init+0x334>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d02b      	beq.n	80015e6 <HAL_GPIO_Init+0x236>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a55      	ldr	r2, [pc, #340]	@ (80016e8 <HAL_GPIO_Init+0x338>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d025      	beq.n	80015e2 <HAL_GPIO_Init+0x232>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a54      	ldr	r2, [pc, #336]	@ (80016ec <HAL_GPIO_Init+0x33c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d01f      	beq.n	80015de <HAL_GPIO_Init+0x22e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a53      	ldr	r2, [pc, #332]	@ (80016f0 <HAL_GPIO_Init+0x340>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d019      	beq.n	80015da <HAL_GPIO_Init+0x22a>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a52      	ldr	r2, [pc, #328]	@ (80016f4 <HAL_GPIO_Init+0x344>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d013      	beq.n	80015d6 <HAL_GPIO_Init+0x226>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a51      	ldr	r2, [pc, #324]	@ (80016f8 <HAL_GPIO_Init+0x348>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d00d      	beq.n	80015d2 <HAL_GPIO_Init+0x222>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a50      	ldr	r2, [pc, #320]	@ (80016fc <HAL_GPIO_Init+0x34c>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d007      	beq.n	80015ce <HAL_GPIO_Init+0x21e>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a4f      	ldr	r2, [pc, #316]	@ (8001700 <HAL_GPIO_Init+0x350>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d101      	bne.n	80015ca <HAL_GPIO_Init+0x21a>
 80015c6:	2309      	movs	r3, #9
 80015c8:	e012      	b.n	80015f0 <HAL_GPIO_Init+0x240>
 80015ca:	230a      	movs	r3, #10
 80015cc:	e010      	b.n	80015f0 <HAL_GPIO_Init+0x240>
 80015ce:	2308      	movs	r3, #8
 80015d0:	e00e      	b.n	80015f0 <HAL_GPIO_Init+0x240>
 80015d2:	2307      	movs	r3, #7
 80015d4:	e00c      	b.n	80015f0 <HAL_GPIO_Init+0x240>
 80015d6:	2306      	movs	r3, #6
 80015d8:	e00a      	b.n	80015f0 <HAL_GPIO_Init+0x240>
 80015da:	2305      	movs	r3, #5
 80015dc:	e008      	b.n	80015f0 <HAL_GPIO_Init+0x240>
 80015de:	2304      	movs	r3, #4
 80015e0:	e006      	b.n	80015f0 <HAL_GPIO_Init+0x240>
 80015e2:	2303      	movs	r3, #3
 80015e4:	e004      	b.n	80015f0 <HAL_GPIO_Init+0x240>
 80015e6:	2302      	movs	r3, #2
 80015e8:	e002      	b.n	80015f0 <HAL_GPIO_Init+0x240>
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <HAL_GPIO_Init+0x240>
 80015ee:	2300      	movs	r3, #0
 80015f0:	69fa      	ldr	r2, [r7, #28]
 80015f2:	f002 0203 	and.w	r2, r2, #3
 80015f6:	0092      	lsls	r2, r2, #2
 80015f8:	4093      	lsls	r3, r2
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001600:	4935      	ldr	r1, [pc, #212]	@ (80016d8 <HAL_GPIO_Init+0x328>)
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	089b      	lsrs	r3, r3, #2
 8001606:	3302      	adds	r3, #2
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800160e:	4b3d      	ldr	r3, [pc, #244]	@ (8001704 <HAL_GPIO_Init+0x354>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	43db      	mvns	r3, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4013      	ands	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001632:	4a34      	ldr	r2, [pc, #208]	@ (8001704 <HAL_GPIO_Init+0x354>)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001638:	4b32      	ldr	r3, [pc, #200]	@ (8001704 <HAL_GPIO_Init+0x354>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800165c:	4a29      	ldr	r2, [pc, #164]	@ (8001704 <HAL_GPIO_Init+0x354>)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001662:	4b28      	ldr	r3, [pc, #160]	@ (8001704 <HAL_GPIO_Init+0x354>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	43db      	mvns	r3, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4013      	ands	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001686:	4a1f      	ldr	r2, [pc, #124]	@ (8001704 <HAL_GPIO_Init+0x354>)
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800168c:	4b1d      	ldr	r3, [pc, #116]	@ (8001704 <HAL_GPIO_Init+0x354>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	43db      	mvns	r3, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4013      	ands	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016b0:	4a14      	ldr	r2, [pc, #80]	@ (8001704 <HAL_GPIO_Init+0x354>)
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3301      	adds	r3, #1
 80016ba:	61fb      	str	r3, [r7, #28]
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	2b0f      	cmp	r3, #15
 80016c0:	f67f ae86 	bls.w	80013d0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80016c4:	bf00      	nop
 80016c6:	bf00      	nop
 80016c8:	3724      	adds	r7, #36	@ 0x24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40013800 	.word	0x40013800
 80016dc:	40020000 	.word	0x40020000
 80016e0:	40020400 	.word	0x40020400
 80016e4:	40020800 	.word	0x40020800
 80016e8:	40020c00 	.word	0x40020c00
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40021400 	.word	0x40021400
 80016f4:	40021800 	.word	0x40021800
 80016f8:	40021c00 	.word	0x40021c00
 80016fc:	40022000 	.word	0x40022000
 8001700:	40022400 	.word	0x40022400
 8001704:	40013c00 	.word	0x40013c00

08001708 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	807b      	strh	r3, [r7, #2]
 8001714:	4613      	mov	r3, r2
 8001716:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001718:	787b      	ldrb	r3, [r7, #1]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800171e:	887a      	ldrh	r2, [r7, #2]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001724:	e003      	b.n	800172e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001726:	887b      	ldrh	r3, [r7, #2]
 8001728:	041a      	lsls	r2, r3, #16
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	619a      	str	r2, [r3, #24]
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
	...

0800173c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001746:	4b23      	ldr	r3, [pc, #140]	@ (80017d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174a:	4a22      	ldr	r2, [pc, #136]	@ (80017d4 <HAL_PWREx_EnableOverDrive+0x98>)
 800174c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001750:	6413      	str	r3, [r2, #64]	@ 0x40
 8001752:	4b20      	ldr	r3, [pc, #128]	@ (80017d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800175e:	4b1e      	ldr	r3, [pc, #120]	@ (80017d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a1d      	ldr	r2, [pc, #116]	@ (80017d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001764:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001768:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800176a:	f7ff fce1 	bl	8001130 <HAL_GetTick>
 800176e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001770:	e009      	b.n	8001786 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001772:	f7ff fcdd 	bl	8001130 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001780:	d901      	bls.n	8001786 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e022      	b.n	80017cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001786:	4b14      	ldr	r3, [pc, #80]	@ (80017d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800178e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001792:	d1ee      	bne.n	8001772 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001794:	4b10      	ldr	r3, [pc, #64]	@ (80017d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a0f      	ldr	r2, [pc, #60]	@ (80017d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800179a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800179e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017a0:	f7ff fcc6 	bl	8001130 <HAL_GetTick>
 80017a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80017a6:	e009      	b.n	80017bc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017a8:	f7ff fcc2 	bl	8001130 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017b6:	d901      	bls.n	80017bc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e007      	b.n	80017cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80017bc:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80017c8:	d1ee      	bne.n	80017a8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40007000 	.word	0x40007000

080017dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80017e4:	2300      	movs	r3, #0
 80017e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e291      	b.n	8001d16 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 8087 	beq.w	800190e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001800:	4b96      	ldr	r3, [pc, #600]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 030c 	and.w	r3, r3, #12
 8001808:	2b04      	cmp	r3, #4
 800180a:	d00c      	beq.n	8001826 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800180c:	4b93      	ldr	r3, [pc, #588]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 030c 	and.w	r3, r3, #12
 8001814:	2b08      	cmp	r3, #8
 8001816:	d112      	bne.n	800183e <HAL_RCC_OscConfig+0x62>
 8001818:	4b90      	ldr	r3, [pc, #576]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001820:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001824:	d10b      	bne.n	800183e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001826:	4b8d      	ldr	r3, [pc, #564]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d06c      	beq.n	800190c <HAL_RCC_OscConfig+0x130>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d168      	bne.n	800190c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e26b      	b.n	8001d16 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001846:	d106      	bne.n	8001856 <HAL_RCC_OscConfig+0x7a>
 8001848:	4b84      	ldr	r3, [pc, #528]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a83      	ldr	r2, [pc, #524]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 800184e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	e02e      	b.n	80018b4 <HAL_RCC_OscConfig+0xd8>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10c      	bne.n	8001878 <HAL_RCC_OscConfig+0x9c>
 800185e:	4b7f      	ldr	r3, [pc, #508]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a7e      	ldr	r2, [pc, #504]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 8001864:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	4b7c      	ldr	r3, [pc, #496]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a7b      	ldr	r2, [pc, #492]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 8001870:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	e01d      	b.n	80018b4 <HAL_RCC_OscConfig+0xd8>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001880:	d10c      	bne.n	800189c <HAL_RCC_OscConfig+0xc0>
 8001882:	4b76      	ldr	r3, [pc, #472]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a75      	ldr	r2, [pc, #468]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 8001888:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	4b73      	ldr	r3, [pc, #460]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a72      	ldr	r2, [pc, #456]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 8001894:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	e00b      	b.n	80018b4 <HAL_RCC_OscConfig+0xd8>
 800189c:	4b6f      	ldr	r3, [pc, #444]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a6e      	ldr	r2, [pc, #440]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 80018a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	4b6c      	ldr	r3, [pc, #432]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a6b      	ldr	r2, [pc, #428]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 80018ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d013      	beq.n	80018e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018bc:	f7ff fc38 	bl	8001130 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018c4:	f7ff fc34 	bl	8001130 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b64      	cmp	r3, #100	@ 0x64
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e21f      	b.n	8001d16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d6:	4b61      	ldr	r3, [pc, #388]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0f0      	beq.n	80018c4 <HAL_RCC_OscConfig+0xe8>
 80018e2:	e014      	b.n	800190e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e4:	f7ff fc24 	bl	8001130 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018ec:	f7ff fc20 	bl	8001130 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b64      	cmp	r3, #100	@ 0x64
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e20b      	b.n	8001d16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018fe:	4b57      	ldr	r3, [pc, #348]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f0      	bne.n	80018ec <HAL_RCC_OscConfig+0x110>
 800190a:	e000      	b.n	800190e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800190c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d069      	beq.n	80019ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800191a:	4b50      	ldr	r3, [pc, #320]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 030c 	and.w	r3, r3, #12
 8001922:	2b00      	cmp	r3, #0
 8001924:	d00b      	beq.n	800193e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001926:	4b4d      	ldr	r3, [pc, #308]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 030c 	and.w	r3, r3, #12
 800192e:	2b08      	cmp	r3, #8
 8001930:	d11c      	bne.n	800196c <HAL_RCC_OscConfig+0x190>
 8001932:	4b4a      	ldr	r3, [pc, #296]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d116      	bne.n	800196c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800193e:	4b47      	ldr	r3, [pc, #284]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d005      	beq.n	8001956 <HAL_RCC_OscConfig+0x17a>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d001      	beq.n	8001956 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e1df      	b.n	8001d16 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001956:	4b41      	ldr	r3, [pc, #260]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	493d      	ldr	r1, [pc, #244]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 8001966:	4313      	orrs	r3, r2
 8001968:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196a:	e040      	b.n	80019ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d023      	beq.n	80019bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001974:	4b39      	ldr	r3, [pc, #228]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a38      	ldr	r2, [pc, #224]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001980:	f7ff fbd6 	bl	8001130 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001988:	f7ff fbd2 	bl	8001130 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e1bd      	b.n	8001d16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199a:	4b30      	ldr	r3, [pc, #192]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a6:	4b2d      	ldr	r3, [pc, #180]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	4929      	ldr	r1, [pc, #164]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	600b      	str	r3, [r1, #0]
 80019ba:	e018      	b.n	80019ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019bc:	4b27      	ldr	r3, [pc, #156]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a26      	ldr	r2, [pc, #152]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 80019c2:	f023 0301 	bic.w	r3, r3, #1
 80019c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c8:	f7ff fbb2 	bl	8001130 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d0:	f7ff fbae 	bl	8001130 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e199      	b.n	8001d16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f0      	bne.n	80019d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d038      	beq.n	8001a6c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d019      	beq.n	8001a36 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a02:	4b16      	ldr	r3, [pc, #88]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 8001a04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a06:	4a15      	ldr	r2, [pc, #84]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0e:	f7ff fb8f 	bl	8001130 <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a16:	f7ff fb8b 	bl	8001130 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e176      	b.n	8001d16 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a28:	4b0c      	ldr	r3, [pc, #48]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 8001a2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0f0      	beq.n	8001a16 <HAL_RCC_OscConfig+0x23a>
 8001a34:	e01a      	b.n	8001a6c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a36:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 8001a38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a3a:	4a08      	ldr	r2, [pc, #32]	@ (8001a5c <HAL_RCC_OscConfig+0x280>)
 8001a3c:	f023 0301 	bic.w	r3, r3, #1
 8001a40:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a42:	f7ff fb75 	bl	8001130 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a48:	e00a      	b.n	8001a60 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a4a:	f7ff fb71 	bl	8001130 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d903      	bls.n	8001a60 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e15c      	b.n	8001d16 <HAL_RCC_OscConfig+0x53a>
 8001a5c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a60:	4b91      	ldr	r3, [pc, #580]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001a62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1ee      	bne.n	8001a4a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 80a4 	beq.w	8001bc2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a7a:	4b8b      	ldr	r3, [pc, #556]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10d      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a86:	4b88      	ldr	r3, [pc, #544]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	4a87      	ldr	r2, [pc, #540]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001a8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a92:	4b85      	ldr	r3, [pc, #532]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aa2:	4b82      	ldr	r3, [pc, #520]	@ (8001cac <HAL_RCC_OscConfig+0x4d0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d118      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001aae:	4b7f      	ldr	r3, [pc, #508]	@ (8001cac <HAL_RCC_OscConfig+0x4d0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a7e      	ldr	r2, [pc, #504]	@ (8001cac <HAL_RCC_OscConfig+0x4d0>)
 8001ab4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ab8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aba:	f7ff fb39 	bl	8001130 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ac2:	f7ff fb35 	bl	8001130 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b64      	cmp	r3, #100	@ 0x64
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e120      	b.n	8001d16 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ad4:	4b75      	ldr	r3, [pc, #468]	@ (8001cac <HAL_RCC_OscConfig+0x4d0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0f0      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d106      	bne.n	8001af6 <HAL_RCC_OscConfig+0x31a>
 8001ae8:	4b6f      	ldr	r3, [pc, #444]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aec:	4a6e      	ldr	r2, [pc, #440]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001af4:	e02d      	b.n	8001b52 <HAL_RCC_OscConfig+0x376>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d10c      	bne.n	8001b18 <HAL_RCC_OscConfig+0x33c>
 8001afe:	4b6a      	ldr	r3, [pc, #424]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b02:	4a69      	ldr	r2, [pc, #420]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001b04:	f023 0301 	bic.w	r3, r3, #1
 8001b08:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b0a:	4b67      	ldr	r3, [pc, #412]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b0e:	4a66      	ldr	r2, [pc, #408]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001b10:	f023 0304 	bic.w	r3, r3, #4
 8001b14:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b16:	e01c      	b.n	8001b52 <HAL_RCC_OscConfig+0x376>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	2b05      	cmp	r3, #5
 8001b1e:	d10c      	bne.n	8001b3a <HAL_RCC_OscConfig+0x35e>
 8001b20:	4b61      	ldr	r3, [pc, #388]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b24:	4a60      	ldr	r2, [pc, #384]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001b26:	f043 0304 	orr.w	r3, r3, #4
 8001b2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b2c:	4b5e      	ldr	r3, [pc, #376]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b30:	4a5d      	ldr	r2, [pc, #372]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b38:	e00b      	b.n	8001b52 <HAL_RCC_OscConfig+0x376>
 8001b3a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b3e:	4a5a      	ldr	r2, [pc, #360]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001b40:	f023 0301 	bic.w	r3, r3, #1
 8001b44:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b46:	4b58      	ldr	r3, [pc, #352]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b4a:	4a57      	ldr	r2, [pc, #348]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001b4c:	f023 0304 	bic.w	r3, r3, #4
 8001b50:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d015      	beq.n	8001b86 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5a:	f7ff fae9 	bl	8001130 <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b60:	e00a      	b.n	8001b78 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b62:	f7ff fae5 	bl	8001130 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e0ce      	b.n	8001d16 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b78:	4b4b      	ldr	r3, [pc, #300]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0ee      	beq.n	8001b62 <HAL_RCC_OscConfig+0x386>
 8001b84:	e014      	b.n	8001bb0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b86:	f7ff fad3 	bl	8001130 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b8c:	e00a      	b.n	8001ba4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b8e:	f7ff facf 	bl	8001130 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e0b8      	b.n	8001d16 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba4:	4b40      	ldr	r3, [pc, #256]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1ee      	bne.n	8001b8e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bb0:	7dfb      	ldrb	r3, [r7, #23]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d105      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bb6:	4b3c      	ldr	r3, [pc, #240]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bba:	4a3b      	ldr	r2, [pc, #236]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001bbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bc0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 80a4 	beq.w	8001d14 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bcc:	4b36      	ldr	r3, [pc, #216]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 030c 	and.w	r3, r3, #12
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d06b      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d149      	bne.n	8001c74 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be0:	4b31      	ldr	r3, [pc, #196]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a30      	ldr	r2, [pc, #192]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001be6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bec:	f7ff faa0 	bl	8001130 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf4:	f7ff fa9c 	bl	8001130 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e087      	b.n	8001d16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c06:	4b28      	ldr	r3, [pc, #160]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f0      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69da      	ldr	r2, [r3, #28]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c20:	019b      	lsls	r3, r3, #6
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c28:	085b      	lsrs	r3, r3, #1
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	041b      	lsls	r3, r3, #16
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c34:	061b      	lsls	r3, r3, #24
 8001c36:	4313      	orrs	r3, r2
 8001c38:	4a1b      	ldr	r2, [pc, #108]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001c3a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001c3e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c40:	4b19      	ldr	r3, [pc, #100]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a18      	ldr	r2, [pc, #96]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001c46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4c:	f7ff fa70 	bl	8001130 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c54:	f7ff fa6c 	bl	8001130 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e057      	b.n	8001d16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c66:	4b10      	ldr	r3, [pc, #64]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0f0      	beq.n	8001c54 <HAL_RCC_OscConfig+0x478>
 8001c72:	e04f      	b.n	8001d14 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a0b      	ldr	r2, [pc, #44]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001c7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7ff fa56 	bl	8001130 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c88:	f7ff fa52 	bl	8001130 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e03d      	b.n	8001d16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9a:	4b03      	ldr	r3, [pc, #12]	@ (8001ca8 <HAL_RCC_OscConfig+0x4cc>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0x4ac>
 8001ca6:	e035      	b.n	8001d14 <HAL_RCC_OscConfig+0x538>
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d20 <HAL_RCC_OscConfig+0x544>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d028      	beq.n	8001d10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d121      	bne.n	8001d10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d11a      	bne.n	8001d10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ce6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d111      	bne.n	8001d10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf6:	085b      	lsrs	r3, r3, #1
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d107      	bne.n	8001d10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d0a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d001      	beq.n	8001d14 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e000      	b.n	8001d16 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40023800 	.word	0x40023800

08001d24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0d0      	b.n	8001ede <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d3c:	4b6a      	ldr	r3, [pc, #424]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 030f 	and.w	r3, r3, #15
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d910      	bls.n	8001d6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4a:	4b67      	ldr	r3, [pc, #412]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 020f 	bic.w	r2, r3, #15
 8001d52:	4965      	ldr	r1, [pc, #404]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5a:	4b63      	ldr	r3, [pc, #396]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d001      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0b8      	b.n	8001ede <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d020      	beq.n	8001dba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d005      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d84:	4b59      	ldr	r3, [pc, #356]	@ (8001eec <HAL_RCC_ClockConfig+0x1c8>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	4a58      	ldr	r2, [pc, #352]	@ (8001eec <HAL_RCC_ClockConfig+0x1c8>)
 8001d8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d8e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d005      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d9c:	4b53      	ldr	r3, [pc, #332]	@ (8001eec <HAL_RCC_ClockConfig+0x1c8>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	4a52      	ldr	r2, [pc, #328]	@ (8001eec <HAL_RCC_ClockConfig+0x1c8>)
 8001da2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001da6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da8:	4b50      	ldr	r3, [pc, #320]	@ (8001eec <HAL_RCC_ClockConfig+0x1c8>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	494d      	ldr	r1, [pc, #308]	@ (8001eec <HAL_RCC_ClockConfig+0x1c8>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d040      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d107      	bne.n	8001dde <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dce:	4b47      	ldr	r3, [pc, #284]	@ (8001eec <HAL_RCC_ClockConfig+0x1c8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d115      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e07f      	b.n	8001ede <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d107      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de6:	4b41      	ldr	r3, [pc, #260]	@ (8001eec <HAL_RCC_ClockConfig+0x1c8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d109      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e073      	b.n	8001ede <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df6:	4b3d      	ldr	r3, [pc, #244]	@ (8001eec <HAL_RCC_ClockConfig+0x1c8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e06b      	b.n	8001ede <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e06:	4b39      	ldr	r3, [pc, #228]	@ (8001eec <HAL_RCC_ClockConfig+0x1c8>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f023 0203 	bic.w	r2, r3, #3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	4936      	ldr	r1, [pc, #216]	@ (8001eec <HAL_RCC_ClockConfig+0x1c8>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e18:	f7ff f98a 	bl	8001130 <HAL_GetTick>
 8001e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1e:	e00a      	b.n	8001e36 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e20:	f7ff f986 	bl	8001130 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e053      	b.n	8001ede <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e36:	4b2d      	ldr	r3, [pc, #180]	@ (8001eec <HAL_RCC_ClockConfig+0x1c8>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 020c 	and.w	r2, r3, #12
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d1eb      	bne.n	8001e20 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e48:	4b27      	ldr	r3, [pc, #156]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 030f 	and.w	r3, r3, #15
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d210      	bcs.n	8001e78 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e56:	4b24      	ldr	r3, [pc, #144]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f023 020f 	bic.w	r2, r3, #15
 8001e5e:	4922      	ldr	r1, [pc, #136]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e66:	4b20      	ldr	r3, [pc, #128]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d001      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e032      	b.n	8001ede <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d008      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e84:	4b19      	ldr	r3, [pc, #100]	@ (8001eec <HAL_RCC_ClockConfig+0x1c8>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	4916      	ldr	r1, [pc, #88]	@ (8001eec <HAL_RCC_ClockConfig+0x1c8>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d009      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ea2:	4b12      	ldr	r3, [pc, #72]	@ (8001eec <HAL_RCC_ClockConfig+0x1c8>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	490e      	ldr	r1, [pc, #56]	@ (8001eec <HAL_RCC_ClockConfig+0x1c8>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eb6:	f000 f821 	bl	8001efc <HAL_RCC_GetSysClockFreq>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8001eec <HAL_RCC_ClockConfig+0x1c8>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	091b      	lsrs	r3, r3, #4
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	490a      	ldr	r1, [pc, #40]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1cc>)
 8001ec8:	5ccb      	ldrb	r3, [r1, r3]
 8001eca:	fa22 f303 	lsr.w	r3, r2, r3
 8001ece:	4a09      	ldr	r2, [pc, #36]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1d0>)
 8001ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ed2:	4b09      	ldr	r3, [pc, #36]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1d4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff f8e6 	bl	80010a8 <HAL_InitTick>

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40023c00 	.word	0x40023c00
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	08004238 	.word	0x08004238
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	20000004 	.word	0x20000004

08001efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f00:	b094      	sub	sp, #80	@ 0x50
 8001f02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f08:	2300      	movs	r3, #0
 8001f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f14:	4b79      	ldr	r3, [pc, #484]	@ (80020fc <HAL_RCC_GetSysClockFreq+0x200>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 030c 	and.w	r3, r3, #12
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d00d      	beq.n	8001f3c <HAL_RCC_GetSysClockFreq+0x40>
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	f200 80e1 	bhi.w	80020e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d002      	beq.n	8001f30 <HAL_RCC_GetSysClockFreq+0x34>
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	d003      	beq.n	8001f36 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f2e:	e0db      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f30:	4b73      	ldr	r3, [pc, #460]	@ (8002100 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f34:	e0db      	b.n	80020ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f36:	4b73      	ldr	r3, [pc, #460]	@ (8002104 <HAL_RCC_GetSysClockFreq+0x208>)
 8001f38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f3a:	e0d8      	b.n	80020ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f3c:	4b6f      	ldr	r3, [pc, #444]	@ (80020fc <HAL_RCC_GetSysClockFreq+0x200>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f44:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f46:	4b6d      	ldr	r3, [pc, #436]	@ (80020fc <HAL_RCC_GetSysClockFreq+0x200>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d063      	beq.n	800201a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f52:	4b6a      	ldr	r3, [pc, #424]	@ (80020fc <HAL_RCC_GetSysClockFreq+0x200>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	099b      	lsrs	r3, r3, #6
 8001f58:	2200      	movs	r2, #0
 8001f5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f64:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f66:	2300      	movs	r3, #0
 8001f68:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001f6e:	4622      	mov	r2, r4
 8001f70:	462b      	mov	r3, r5
 8001f72:	f04f 0000 	mov.w	r0, #0
 8001f76:	f04f 0100 	mov.w	r1, #0
 8001f7a:	0159      	lsls	r1, r3, #5
 8001f7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f80:	0150      	lsls	r0, r2, #5
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4621      	mov	r1, r4
 8001f88:	1a51      	subs	r1, r2, r1
 8001f8a:	6139      	str	r1, [r7, #16]
 8001f8c:	4629      	mov	r1, r5
 8001f8e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	f04f 0200 	mov.w	r2, #0
 8001f98:	f04f 0300 	mov.w	r3, #0
 8001f9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001fa0:	4659      	mov	r1, fp
 8001fa2:	018b      	lsls	r3, r1, #6
 8001fa4:	4651      	mov	r1, sl
 8001fa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001faa:	4651      	mov	r1, sl
 8001fac:	018a      	lsls	r2, r1, #6
 8001fae:	4651      	mov	r1, sl
 8001fb0:	ebb2 0801 	subs.w	r8, r2, r1
 8001fb4:	4659      	mov	r1, fp
 8001fb6:	eb63 0901 	sbc.w	r9, r3, r1
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	f04f 0300 	mov.w	r3, #0
 8001fc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fce:	4690      	mov	r8, r2
 8001fd0:	4699      	mov	r9, r3
 8001fd2:	4623      	mov	r3, r4
 8001fd4:	eb18 0303 	adds.w	r3, r8, r3
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	462b      	mov	r3, r5
 8001fdc:	eb49 0303 	adc.w	r3, r9, r3
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	f04f 0300 	mov.w	r3, #0
 8001fea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001fee:	4629      	mov	r1, r5
 8001ff0:	024b      	lsls	r3, r1, #9
 8001ff2:	4621      	mov	r1, r4
 8001ff4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ff8:	4621      	mov	r1, r4
 8001ffa:	024a      	lsls	r2, r1, #9
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	4619      	mov	r1, r3
 8002000:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002002:	2200      	movs	r2, #0
 8002004:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002006:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002008:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800200c:	f7fe f900 	bl	8000210 <__aeabi_uldivmod>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	4613      	mov	r3, r2
 8002016:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002018:	e058      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800201a:	4b38      	ldr	r3, [pc, #224]	@ (80020fc <HAL_RCC_GetSysClockFreq+0x200>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	099b      	lsrs	r3, r3, #6
 8002020:	2200      	movs	r2, #0
 8002022:	4618      	mov	r0, r3
 8002024:	4611      	mov	r1, r2
 8002026:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800202a:	623b      	str	r3, [r7, #32]
 800202c:	2300      	movs	r3, #0
 800202e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002030:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002034:	4642      	mov	r2, r8
 8002036:	464b      	mov	r3, r9
 8002038:	f04f 0000 	mov.w	r0, #0
 800203c:	f04f 0100 	mov.w	r1, #0
 8002040:	0159      	lsls	r1, r3, #5
 8002042:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002046:	0150      	lsls	r0, r2, #5
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4641      	mov	r1, r8
 800204e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002052:	4649      	mov	r1, r9
 8002054:	eb63 0b01 	sbc.w	fp, r3, r1
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	f04f 0300 	mov.w	r3, #0
 8002060:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002064:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002068:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800206c:	ebb2 040a 	subs.w	r4, r2, sl
 8002070:	eb63 050b 	sbc.w	r5, r3, fp
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	f04f 0300 	mov.w	r3, #0
 800207c:	00eb      	lsls	r3, r5, #3
 800207e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002082:	00e2      	lsls	r2, r4, #3
 8002084:	4614      	mov	r4, r2
 8002086:	461d      	mov	r5, r3
 8002088:	4643      	mov	r3, r8
 800208a:	18e3      	adds	r3, r4, r3
 800208c:	603b      	str	r3, [r7, #0]
 800208e:	464b      	mov	r3, r9
 8002090:	eb45 0303 	adc.w	r3, r5, r3
 8002094:	607b      	str	r3, [r7, #4]
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020a2:	4629      	mov	r1, r5
 80020a4:	028b      	lsls	r3, r1, #10
 80020a6:	4621      	mov	r1, r4
 80020a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020ac:	4621      	mov	r1, r4
 80020ae:	028a      	lsls	r2, r1, #10
 80020b0:	4610      	mov	r0, r2
 80020b2:	4619      	mov	r1, r3
 80020b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020b6:	2200      	movs	r2, #0
 80020b8:	61bb      	str	r3, [r7, #24]
 80020ba:	61fa      	str	r2, [r7, #28]
 80020bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020c0:	f7fe f8a6 	bl	8000210 <__aeabi_uldivmod>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4613      	mov	r3, r2
 80020ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80020cc:	4b0b      	ldr	r3, [pc, #44]	@ (80020fc <HAL_RCC_GetSysClockFreq+0x200>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	0c1b      	lsrs	r3, r3, #16
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	3301      	adds	r3, #1
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80020dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80020de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80020e6:	e002      	b.n	80020ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020e8:	4b05      	ldr	r3, [pc, #20]	@ (8002100 <HAL_RCC_GetSysClockFreq+0x204>)
 80020ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80020ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3750      	adds	r7, #80	@ 0x50
 80020f4:	46bd      	mov	sp, r7
 80020f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020fa:	bf00      	nop
 80020fc:	40023800 	.word	0x40023800
 8002100:	00f42400 	.word	0x00f42400
 8002104:	007a1200 	.word	0x007a1200

08002108 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e09d      	b.n	8002256 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211e:	2b00      	cmp	r3, #0
 8002120:	d108      	bne.n	8002134 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800212a:	d009      	beq.n	8002140 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	61da      	str	r2, [r3, #28]
 8002132:	e005      	b.n	8002140 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d106      	bne.n	8002160 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7fe fda0 	bl	8000ca0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2202      	movs	r2, #2
 8002164:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002176:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002180:	d902      	bls.n	8002188 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002182:	2300      	movs	r3, #0
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	e002      	b.n	800218e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002188:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800218c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002196:	d007      	beq.n	80021a8 <HAL_SPI_Init+0xa0>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80021a0:	d002      	beq.n	80021a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80021b8:	431a      	orrs	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80021e0:	431a      	orrs	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ea:	ea42 0103 	orr.w	r1, r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	0c1b      	lsrs	r3, r3, #16
 8002204:	f003 0204 	and.w	r2, r3, #4
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220c:	f003 0310 	and.w	r3, r3, #16
 8002210:	431a      	orrs	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002224:	ea42 0103 	orr.w	r1, r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	69da      	ldr	r2, [r3, #28]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002244:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b088      	sub	sp, #32
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10e      	bne.n	80022a0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002288:	2b00      	cmp	r3, #0
 800228a:	d009      	beq.n	80022a0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002292:	2b00      	cmp	r3, #0
 8002294:	d004      	beq.n	80022a0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	4798      	blx	r3
    return;
 800229e:	e0ce      	b.n	800243e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d009      	beq.n	80022be <HAL_SPI_IRQHandler+0x5e>
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d004      	beq.n	80022be <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	4798      	blx	r3
    return;
 80022bc:	e0bf      	b.n	800243e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	f003 0320 	and.w	r3, r3, #32
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10a      	bne.n	80022de <HAL_SPI_IRQHandler+0x7e>
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d105      	bne.n	80022de <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 80b0 	beq.w	800243e <HAL_SPI_IRQHandler+0x1de>
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	f003 0320 	and.w	r3, r3, #32
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 80aa 	beq.w	800243e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d023      	beq.n	800233c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b03      	cmp	r3, #3
 80022fe:	d011      	beq.n	8002324 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002304:	f043 0204 	orr.w	r2, r3, #4
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	e00b      	b.n	800233c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002324:	2300      	movs	r3, #0
 8002326:	613b      	str	r3, [r7, #16]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	613b      	str	r3, [r7, #16]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	693b      	ldr	r3, [r7, #16]
        return;
 800233a:	e080      	b.n	800243e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	f003 0320 	and.w	r3, r3, #32
 8002342:	2b00      	cmp	r3, #0
 8002344:	d014      	beq.n	8002370 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800234a:	f043 0201 	orr.w	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00c      	beq.n	8002394 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800237e:	f043 0208 	orr.w	r2, r3, #8
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002386:	2300      	movs	r3, #0
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002398:	2b00      	cmp	r3, #0
 800239a:	d04f      	beq.n	800243c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80023aa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d104      	bne.n	80023c8 <HAL_SPI_IRQHandler+0x168>
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d034      	beq.n	8002432 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0203 	bic.w	r2, r2, #3
 80023d6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d011      	beq.n	8002404 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e4:	4a17      	ldr	r2, [pc, #92]	@ (8002444 <HAL_SPI_IRQHandler+0x1e4>)
 80023e6:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe ffbc 	bl	800136a <HAL_DMA_Abort_IT>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d005      	beq.n	8002404 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023fc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002408:	2b00      	cmp	r3, #0
 800240a:	d016      	beq.n	800243a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002410:	4a0c      	ldr	r2, [pc, #48]	@ (8002444 <HAL_SPI_IRQHandler+0x1e4>)
 8002412:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe ffa6 	bl	800136a <HAL_DMA_Abort_IT>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00a      	beq.n	800243a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002428:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8002430:	e003      	b.n	800243a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f808 	bl	8002448 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002438:	e000      	b.n	800243c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800243a:	bf00      	nop
    return;
 800243c:	bf00      	nop
  }
}
 800243e:	3720      	adds	r7, #32
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	0800245d 	.word	0x0800245d

08002448 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002468:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f7ff ffe5 	bl	8002448 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800247e:	bf00      	nop
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e08f      	b.n	80025bc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d106      	bne.n	80024b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7fe fc5f 	bl	8000d74 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2202      	movs	r2, #2
 80024ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6899      	ldr	r1, [r3, #8]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b3e      	ldr	r3, [pc, #248]	@ (80025c4 <HAL_TIM_Encoder_Init+0x13c>)
 80024ca:	400b      	ands	r3, r1
 80024cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3304      	adds	r3, #4
 80024d6:	4619      	mov	r1, r3
 80024d8:	4610      	mov	r0, r2
 80024da:	f000 f9b5 	bl	8002848 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	4b31      	ldr	r3, [pc, #196]	@ (80025c8 <HAL_TIM_Encoder_Init+0x140>)
 8002504:	4013      	ands	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	021b      	lsls	r3, r3, #8
 8002512:	4313      	orrs	r3, r2
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	4313      	orrs	r3, r2
 8002518:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4b2b      	ldr	r3, [pc, #172]	@ (80025cc <HAL_TIM_Encoder_Init+0x144>)
 800251e:	4013      	ands	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	4b2a      	ldr	r3, [pc, #168]	@ (80025d0 <HAL_TIM_Encoder_Init+0x148>)
 8002526:	4013      	ands	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	021b      	lsls	r3, r3, #8
 8002534:	4313      	orrs	r3, r2
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	011a      	lsls	r2, r3, #4
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	031b      	lsls	r3, r3, #12
 8002548:	4313      	orrs	r3, r2
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002556:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800255e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	4313      	orrs	r3, r2
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	4313      	orrs	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	fffebff8 	.word	0xfffebff8
 80025c8:	fffffcfc 	.word	0xfffffcfc
 80025cc:	fffff3f3 	.word	0xfffff3f3
 80025d0:	ffff0f0f 	.word	0xffff0f0f

080025d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d020      	beq.n	8002638 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d01b      	beq.n	8002638 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f06f 0202 	mvn.w	r2, #2
 8002608:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f8f3 	bl	800280a <HAL_TIM_IC_CaptureCallback>
 8002624:	e005      	b.n	8002632 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f8e5 	bl	80027f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f8f6 	bl	800281e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f003 0304 	and.w	r3, r3, #4
 800263e:	2b00      	cmp	r3, #0
 8002640:	d020      	beq.n	8002684 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d01b      	beq.n	8002684 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f06f 0204 	mvn.w	r2, #4
 8002654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2202      	movs	r2, #2
 800265a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f8cd 	bl	800280a <HAL_TIM_IC_CaptureCallback>
 8002670:	e005      	b.n	800267e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f8bf 	bl	80027f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f8d0 	bl	800281e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d020      	beq.n	80026d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	2b00      	cmp	r3, #0
 8002696:	d01b      	beq.n	80026d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f06f 0208 	mvn.w	r2, #8
 80026a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2204      	movs	r2, #4
 80026a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f8a7 	bl	800280a <HAL_TIM_IC_CaptureCallback>
 80026bc:	e005      	b.n	80026ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f899 	bl	80027f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f8aa 	bl	800281e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f003 0310 	and.w	r3, r3, #16
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d020      	beq.n	800271c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f003 0310 	and.w	r3, r3, #16
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d01b      	beq.n	800271c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f06f 0210 	mvn.w	r2, #16
 80026ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2208      	movs	r2, #8
 80026f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f881 	bl	800280a <HAL_TIM_IC_CaptureCallback>
 8002708:	e005      	b.n	8002716 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f873 	bl	80027f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f884 	bl	800281e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00c      	beq.n	8002740 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	d007      	beq.n	8002740 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f06f 0201 	mvn.w	r2, #1
 8002738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f851 	bl	80027e2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002746:	2b00      	cmp	r3, #0
 8002748:	d104      	bne.n	8002754 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00c      	beq.n	800276e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800275a:	2b00      	cmp	r3, #0
 800275c:	d007      	beq.n	800276e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f9b1 	bl	8002ad0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00c      	beq.n	8002792 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800277e:	2b00      	cmp	r3, #0
 8002780:	d007      	beq.n	8002792 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800278a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f9a9 	bl	8002ae4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00c      	beq.n	80027b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d007      	beq.n	80027b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80027ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 f83e 	bl	8002832 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	f003 0320 	and.w	r3, r3, #32
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00c      	beq.n	80027da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 0320 	and.w	r3, r3, #32
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d007      	beq.n	80027da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f06f 0220 	mvn.w	r2, #32
 80027d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 f971 	bl	8002abc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027da:	bf00      	nop
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
	...

08002848 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a46      	ldr	r2, [pc, #280]	@ (8002974 <TIM_Base_SetConfig+0x12c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d013      	beq.n	8002888 <TIM_Base_SetConfig+0x40>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002866:	d00f      	beq.n	8002888 <TIM_Base_SetConfig+0x40>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a43      	ldr	r2, [pc, #268]	@ (8002978 <TIM_Base_SetConfig+0x130>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d00b      	beq.n	8002888 <TIM_Base_SetConfig+0x40>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a42      	ldr	r2, [pc, #264]	@ (800297c <TIM_Base_SetConfig+0x134>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d007      	beq.n	8002888 <TIM_Base_SetConfig+0x40>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a41      	ldr	r2, [pc, #260]	@ (8002980 <TIM_Base_SetConfig+0x138>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d003      	beq.n	8002888 <TIM_Base_SetConfig+0x40>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a40      	ldr	r2, [pc, #256]	@ (8002984 <TIM_Base_SetConfig+0x13c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d108      	bne.n	800289a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800288e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	4313      	orrs	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a35      	ldr	r2, [pc, #212]	@ (8002974 <TIM_Base_SetConfig+0x12c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d02b      	beq.n	80028fa <TIM_Base_SetConfig+0xb2>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028a8:	d027      	beq.n	80028fa <TIM_Base_SetConfig+0xb2>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a32      	ldr	r2, [pc, #200]	@ (8002978 <TIM_Base_SetConfig+0x130>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d023      	beq.n	80028fa <TIM_Base_SetConfig+0xb2>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a31      	ldr	r2, [pc, #196]	@ (800297c <TIM_Base_SetConfig+0x134>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d01f      	beq.n	80028fa <TIM_Base_SetConfig+0xb2>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a30      	ldr	r2, [pc, #192]	@ (8002980 <TIM_Base_SetConfig+0x138>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d01b      	beq.n	80028fa <TIM_Base_SetConfig+0xb2>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a2f      	ldr	r2, [pc, #188]	@ (8002984 <TIM_Base_SetConfig+0x13c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d017      	beq.n	80028fa <TIM_Base_SetConfig+0xb2>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a2e      	ldr	r2, [pc, #184]	@ (8002988 <TIM_Base_SetConfig+0x140>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d013      	beq.n	80028fa <TIM_Base_SetConfig+0xb2>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a2d      	ldr	r2, [pc, #180]	@ (800298c <TIM_Base_SetConfig+0x144>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d00f      	beq.n	80028fa <TIM_Base_SetConfig+0xb2>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a2c      	ldr	r2, [pc, #176]	@ (8002990 <TIM_Base_SetConfig+0x148>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d00b      	beq.n	80028fa <TIM_Base_SetConfig+0xb2>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a2b      	ldr	r2, [pc, #172]	@ (8002994 <TIM_Base_SetConfig+0x14c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d007      	beq.n	80028fa <TIM_Base_SetConfig+0xb2>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002998 <TIM_Base_SetConfig+0x150>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d003      	beq.n	80028fa <TIM_Base_SetConfig+0xb2>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a29      	ldr	r2, [pc, #164]	@ (800299c <TIM_Base_SetConfig+0x154>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d108      	bne.n	800290c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002900:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	4313      	orrs	r3, r2
 800290a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	4313      	orrs	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a10      	ldr	r2, [pc, #64]	@ (8002974 <TIM_Base_SetConfig+0x12c>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d003      	beq.n	8002940 <TIM_Base_SetConfig+0xf8>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a12      	ldr	r2, [pc, #72]	@ (8002984 <TIM_Base_SetConfig+0x13c>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d103      	bne.n	8002948 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	691a      	ldr	r2, [r3, #16]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b01      	cmp	r3, #1
 8002958:	d105      	bne.n	8002966 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	f023 0201 	bic.w	r2, r3, #1
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	611a      	str	r2, [r3, #16]
  }
}
 8002966:	bf00      	nop
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	40010000 	.word	0x40010000
 8002978:	40000400 	.word	0x40000400
 800297c:	40000800 	.word	0x40000800
 8002980:	40000c00 	.word	0x40000c00
 8002984:	40010400 	.word	0x40010400
 8002988:	40014000 	.word	0x40014000
 800298c:	40014400 	.word	0x40014400
 8002990:	40014800 	.word	0x40014800
 8002994:	40001800 	.word	0x40001800
 8002998:	40001c00 	.word	0x40001c00
 800299c:	40002000 	.word	0x40002000

080029a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d101      	bne.n	80029b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029b4:	2302      	movs	r3, #2
 80029b6:	e06d      	b.n	8002a94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2202      	movs	r2, #2
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a30      	ldr	r2, [pc, #192]	@ (8002aa0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d004      	beq.n	80029ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a2f      	ldr	r2, [pc, #188]	@ (8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d108      	bne.n	80029fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80029f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a20      	ldr	r2, [pc, #128]	@ (8002aa0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d022      	beq.n	8002a68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a2a:	d01d      	beq.n	8002a68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a1d      	ldr	r2, [pc, #116]	@ (8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d018      	beq.n	8002a68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a1c      	ldr	r2, [pc, #112]	@ (8002aac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d013      	beq.n	8002a68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a1a      	ldr	r2, [pc, #104]	@ (8002ab0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d00e      	beq.n	8002a68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a15      	ldr	r2, [pc, #84]	@ (8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d009      	beq.n	8002a68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a16      	ldr	r2, [pc, #88]	@ (8002ab4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d004      	beq.n	8002a68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a15      	ldr	r2, [pc, #84]	@ (8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d10c      	bne.n	8002a82 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	40010000 	.word	0x40010000
 8002aa4:	40010400 	.word	0x40010400
 8002aa8:	40000400 	.word	0x40000400
 8002aac:	40000800 	.word	0x40000800
 8002ab0:	40000c00 	.word	0x40000c00
 8002ab4:	40014000 	.word	0x40014000
 8002ab8:	40001800 	.word	0x40001800

08002abc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002b02:	2300      	movs	r3, #0
 8002b04:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002b06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b0a:	2b84      	cmp	r3, #132	@ 0x84
 8002b0c:	d005      	beq.n	8002b1a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002b0e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4413      	add	r3, r2
 8002b16:	3303      	adds	r3, #3
 8002b18:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002b2c:	f000 faf2 	bl	8003114 <vTaskStartScheduler>
  
  return osOK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002b36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b38:	b089      	sub	sp, #36	@ 0x24
 8002b3a:	af04      	add	r7, sp, #16
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d020      	beq.n	8002b8a <osThreadCreate+0x54>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d01c      	beq.n	8002b8a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685c      	ldr	r4, [r3, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691e      	ldr	r6, [r3, #16]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff ffc8 	bl	8002af8 <makeFreeRtosPriority>
 8002b68:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b72:	9202      	str	r2, [sp, #8]
 8002b74:	9301      	str	r3, [sp, #4]
 8002b76:	9100      	str	r1, [sp, #0]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	4632      	mov	r2, r6
 8002b7c:	4629      	mov	r1, r5
 8002b7e:	4620      	mov	r0, r4
 8002b80:	f000 f8d9 	bl	8002d36 <xTaskCreateStatic>
 8002b84:	4603      	mov	r3, r0
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	e01c      	b.n	8002bc4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685c      	ldr	r4, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b96:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff ffaa 	bl	8002af8 <makeFreeRtosPriority>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	f107 030c 	add.w	r3, r7, #12
 8002baa:	9301      	str	r3, [sp, #4]
 8002bac:	9200      	str	r2, [sp, #0]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	4632      	mov	r2, r6
 8002bb2:	4629      	mov	r1, r5
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	f000 f924 	bl	8002e02 <xTaskCreate>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d001      	beq.n	8002bc4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	e000      	b.n	8002bc6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bce <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f103 0208 	add.w	r2, r3, #8
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002be6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f103 0208 	add.w	r2, r3, #8
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f103 0208 	add.w	r2, r3, #8
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	601a      	str	r2, [r3, #0]
}
 8002c64:	bf00      	nop
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c86:	d103      	bne.n	8002c90 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	e00c      	b.n	8002caa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3308      	adds	r3, #8
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	e002      	b.n	8002c9e <vListInsert+0x2e>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d2f6      	bcs.n	8002c98 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	1c5a      	adds	r2, r3, #1
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	601a      	str	r2, [r3, #0]
}
 8002cd6:	bf00      	nop
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b085      	sub	sp, #20
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6892      	ldr	r2, [r2, #8]
 8002cf8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6852      	ldr	r2, [r2, #4]
 8002d02:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d103      	bne.n	8002d16 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	1e5a      	subs	r2, r3, #1
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b08e      	sub	sp, #56	@ 0x38
 8002d3a:	af04      	add	r7, sp, #16
 8002d3c:	60f8      	str	r0, [r7, #12]
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	607a      	str	r2, [r7, #4]
 8002d42:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10d      	bne.n	8002d66 <xTaskCreateStatic+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d4e:	b672      	cpsid	i
 8002d50:	f383 8811 	msr	BASEPRI, r3
 8002d54:	f3bf 8f6f 	isb	sy
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	b662      	cpsie	i
 8002d5e:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d60:	bf00      	nop
 8002d62:	bf00      	nop
 8002d64:	e7fd      	b.n	8002d62 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8002d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10d      	bne.n	8002d88 <xTaskCreateStatic+0x52>
	__asm volatile
 8002d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d70:	b672      	cpsid	i
 8002d72:	f383 8811 	msr	BASEPRI, r3
 8002d76:	f3bf 8f6f 	isb	sy
 8002d7a:	f3bf 8f4f 	dsb	sy
 8002d7e:	b662      	cpsie	i
 8002d80:	61fb      	str	r3, [r7, #28]
}
 8002d82:	bf00      	nop
 8002d84:	bf00      	nop
 8002d86:	e7fd      	b.n	8002d84 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d88:	23a0      	movs	r3, #160	@ 0xa0
 8002d8a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d90:	d00d      	beq.n	8002dae <xTaskCreateStatic+0x78>
	__asm volatile
 8002d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d96:	b672      	cpsid	i
 8002d98:	f383 8811 	msr	BASEPRI, r3
 8002d9c:	f3bf 8f6f 	isb	sy
 8002da0:	f3bf 8f4f 	dsb	sy
 8002da4:	b662      	cpsie	i
 8002da6:	61bb      	str	r3, [r7, #24]
}
 8002da8:	bf00      	nop
 8002daa:	bf00      	nop
 8002dac:	e7fd      	b.n	8002daa <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002dae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d01e      	beq.n	8002df4 <xTaskCreateStatic+0xbe>
 8002db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d01b      	beq.n	8002df4 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dbe:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002dc4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc8:	2202      	movs	r2, #2
 8002dca:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002dce:	2300      	movs	r3, #0
 8002dd0:	9303      	str	r3, [sp, #12]
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd4:	9302      	str	r3, [sp, #8]
 8002dd6:	f107 0314 	add.w	r3, r7, #20
 8002dda:	9301      	str	r3, [sp, #4]
 8002ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	68b9      	ldr	r1, [r7, #8]
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 f850 	bl	8002e8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002dec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002dee:	f000 f8ef 	bl	8002fd0 <prvAddNewTaskToReadyList>
 8002df2:	e001      	b.n	8002df8 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002df8:	697b      	ldr	r3, [r7, #20]
	}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3728      	adds	r7, #40	@ 0x28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b08c      	sub	sp, #48	@ 0x30
 8002e06:	af04      	add	r7, sp, #16
 8002e08:	60f8      	str	r0, [r7, #12]
 8002e0a:	60b9      	str	r1, [r7, #8]
 8002e0c:	603b      	str	r3, [r7, #0]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 ff10 	bl	8003c3c <pvPortMalloc>
 8002e1c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00e      	beq.n	8002e42 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e24:	20a0      	movs	r0, #160	@ 0xa0
 8002e26:	f000 ff09 	bl	8003c3c <pvPortMalloc>
 8002e2a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e38:	e005      	b.n	8002e46 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e3a:	6978      	ldr	r0, [r7, #20]
 8002e3c:	f000 ffcc 	bl	8003dd8 <vPortFree>
 8002e40:	e001      	b.n	8002e46 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d017      	beq.n	8002e7c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e54:	88fa      	ldrh	r2, [r7, #6]
 8002e56:	2300      	movs	r3, #0
 8002e58:	9303      	str	r3, [sp, #12]
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	9302      	str	r3, [sp, #8]
 8002e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e60:	9301      	str	r3, [sp, #4]
 8002e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	68b9      	ldr	r1, [r7, #8]
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 f80e 	bl	8002e8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e70:	69f8      	ldr	r0, [r7, #28]
 8002e72:	f000 f8ad 	bl	8002fd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e76:	2301      	movs	r3, #1
 8002e78:	61bb      	str	r3, [r7, #24]
 8002e7a:	e002      	b.n	8002e82 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e80:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002e82:	69bb      	ldr	r3, [r7, #24]
	}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3720      	adds	r7, #32
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b088      	sub	sp, #32
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
 8002e98:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8002ea4:	440b      	add	r3, r1
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	f023 0307 	bic.w	r3, r3, #7
 8002eb2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00d      	beq.n	8002eda <prvInitialiseNewTask+0x4e>
	__asm volatile
 8002ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ec2:	b672      	cpsid	i
 8002ec4:	f383 8811 	msr	BASEPRI, r3
 8002ec8:	f3bf 8f6f 	isb	sy
 8002ecc:	f3bf 8f4f 	dsb	sy
 8002ed0:	b662      	cpsie	i
 8002ed2:	617b      	str	r3, [r7, #20]
}
 8002ed4:	bf00      	nop
 8002ed6:	bf00      	nop
 8002ed8:	e7fd      	b.n	8002ed6 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d01f      	beq.n	8002f20 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	61fb      	str	r3, [r7, #28]
 8002ee4:	e012      	b.n	8002f0c <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	4413      	add	r3, r2
 8002eec:	7819      	ldrb	r1, [r3, #0]
 8002eee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	3334      	adds	r3, #52	@ 0x34
 8002ef6:	460a      	mov	r2, r1
 8002ef8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	4413      	add	r3, r2
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d006      	beq.n	8002f14 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	61fb      	str	r3, [r7, #28]
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	2b0f      	cmp	r3, #15
 8002f10:	d9e9      	bls.n	8002ee6 <prvInitialiseNewTask+0x5a>
 8002f12:	e000      	b.n	8002f16 <prvInitialiseNewTask+0x8a>
			{
				break;
 8002f14:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f1e:	e003      	b.n	8002f28 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f2a:	2b06      	cmp	r3, #6
 8002f2c:	d901      	bls.n	8002f32 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f2e:	2306      	movs	r3, #6
 8002f30:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f36:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f3c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f40:	2200      	movs	r2, #0
 8002f42:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f46:	3304      	adds	r3, #4
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff fe60 	bl	8002c0e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f50:	3318      	adds	r3, #24
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff fe5b 	bl	8002c0e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f5c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f60:	f1c3 0207 	rsb	r2, r3, #7
 8002f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f66:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f6c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f70:	2200      	movs	r2, #0
 8002f72:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f80:	334c      	adds	r3, #76	@ 0x4c
 8002f82:	224c      	movs	r2, #76	@ 0x4c
 8002f84:	2100      	movs	r1, #0
 8002f86:	4618      	mov	r0, r3
 8002f88:	f001 f842 	bl	8004010 <memset>
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f8e:	4a0d      	ldr	r2, [pc, #52]	@ (8002fc4 <prvInitialiseNewTask+0x138>)
 8002f90:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f94:	4a0c      	ldr	r2, [pc, #48]	@ (8002fc8 <prvInitialiseNewTask+0x13c>)
 8002f96:	655a      	str	r2, [r3, #84]	@ 0x54
 8002f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f9a:	4a0c      	ldr	r2, [pc, #48]	@ (8002fcc <prvInitialiseNewTask+0x140>)
 8002f9c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	68f9      	ldr	r1, [r7, #12]
 8002fa2:	69b8      	ldr	r0, [r7, #24]
 8002fa4:	f000 fc56 	bl	8003854 <pxPortInitialiseStack>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fba:	bf00      	nop
 8002fbc:	3720      	adds	r7, #32
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	20005620 	.word	0x20005620
 8002fc8:	20005688 	.word	0x20005688
 8002fcc:	200056f0 	.word	0x200056f0

08002fd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002fd8:	f000 fd48 	bl	8003a6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002fdc:	4b2a      	ldr	r3, [pc, #168]	@ (8003088 <prvAddNewTaskToReadyList+0xb8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	4a29      	ldr	r2, [pc, #164]	@ (8003088 <prvAddNewTaskToReadyList+0xb8>)
 8002fe4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002fe6:	4b29      	ldr	r3, [pc, #164]	@ (800308c <prvAddNewTaskToReadyList+0xbc>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d109      	bne.n	8003002 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002fee:	4a27      	ldr	r2, [pc, #156]	@ (800308c <prvAddNewTaskToReadyList+0xbc>)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ff4:	4b24      	ldr	r3, [pc, #144]	@ (8003088 <prvAddNewTaskToReadyList+0xb8>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d110      	bne.n	800301e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002ffc:	f000 fae0 	bl	80035c0 <prvInitialiseTaskLists>
 8003000:	e00d      	b.n	800301e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003002:	4b23      	ldr	r3, [pc, #140]	@ (8003090 <prvAddNewTaskToReadyList+0xc0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d109      	bne.n	800301e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800300a:	4b20      	ldr	r3, [pc, #128]	@ (800308c <prvAddNewTaskToReadyList+0xbc>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003014:	429a      	cmp	r2, r3
 8003016:	d802      	bhi.n	800301e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003018:	4a1c      	ldr	r2, [pc, #112]	@ (800308c <prvAddNewTaskToReadyList+0xbc>)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800301e:	4b1d      	ldr	r3, [pc, #116]	@ (8003094 <prvAddNewTaskToReadyList+0xc4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	3301      	adds	r3, #1
 8003024:	4a1b      	ldr	r2, [pc, #108]	@ (8003094 <prvAddNewTaskToReadyList+0xc4>)
 8003026:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800302c:	2201      	movs	r2, #1
 800302e:	409a      	lsls	r2, r3
 8003030:	4b19      	ldr	r3, [pc, #100]	@ (8003098 <prvAddNewTaskToReadyList+0xc8>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4313      	orrs	r3, r2
 8003036:	4a18      	ldr	r2, [pc, #96]	@ (8003098 <prvAddNewTaskToReadyList+0xc8>)
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800303e:	4613      	mov	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4a15      	ldr	r2, [pc, #84]	@ (800309c <prvAddNewTaskToReadyList+0xcc>)
 8003048:	441a      	add	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3304      	adds	r3, #4
 800304e:	4619      	mov	r1, r3
 8003050:	4610      	mov	r0, r2
 8003052:	f7ff fde9 	bl	8002c28 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003056:	f000 fd3f 	bl	8003ad8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800305a:	4b0d      	ldr	r3, [pc, #52]	@ (8003090 <prvAddNewTaskToReadyList+0xc0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00e      	beq.n	8003080 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003062:	4b0a      	ldr	r3, [pc, #40]	@ (800308c <prvAddNewTaskToReadyList+0xbc>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306c:	429a      	cmp	r2, r3
 800306e:	d207      	bcs.n	8003080 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003070:	4b0b      	ldr	r3, [pc, #44]	@ (80030a0 <prvAddNewTaskToReadyList+0xd0>)
 8003072:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003080:	bf00      	nop
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	200007b4 	.word	0x200007b4
 800308c:	200006b4 	.word	0x200006b4
 8003090:	200007c0 	.word	0x200007c0
 8003094:	200007d0 	.word	0x200007d0
 8003098:	200007bc 	.word	0x200007bc
 800309c:	200006b8 	.word	0x200006b8
 80030a0:	e000ed04 	.word	0xe000ed04

080030a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80030ac:	2300      	movs	r3, #0
 80030ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d01a      	beq.n	80030ec <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80030b6:	4b15      	ldr	r3, [pc, #84]	@ (800310c <vTaskDelay+0x68>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00d      	beq.n	80030da <vTaskDelay+0x36>
	__asm volatile
 80030be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030c2:	b672      	cpsid	i
 80030c4:	f383 8811 	msr	BASEPRI, r3
 80030c8:	f3bf 8f6f 	isb	sy
 80030cc:	f3bf 8f4f 	dsb	sy
 80030d0:	b662      	cpsie	i
 80030d2:	60bb      	str	r3, [r7, #8]
}
 80030d4:	bf00      	nop
 80030d6:	bf00      	nop
 80030d8:	e7fd      	b.n	80030d6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80030da:	f000 f889 	bl	80031f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80030de:	2100      	movs	r1, #0
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 fb51 	bl	8003788 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80030e6:	f000 f891 	bl	800320c <xTaskResumeAll>
 80030ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d107      	bne.n	8003102 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80030f2:	4b07      	ldr	r3, [pc, #28]	@ (8003110 <vTaskDelay+0x6c>)
 80030f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	f3bf 8f4f 	dsb	sy
 80030fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003102:	bf00      	nop
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	200007dc 	.word	0x200007dc
 8003110:	e000ed04 	.word	0xe000ed04

08003114 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b08a      	sub	sp, #40	@ 0x28
 8003118:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800311a:	2300      	movs	r3, #0
 800311c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800311e:	2300      	movs	r3, #0
 8003120:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003122:	463a      	mov	r2, r7
 8003124:	1d39      	adds	r1, r7, #4
 8003126:	f107 0308 	add.w	r3, r7, #8
 800312a:	4618      	mov	r0, r3
 800312c:	f7fd f9e8 	bl	8000500 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003130:	6839      	ldr	r1, [r7, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	9202      	str	r2, [sp, #8]
 8003138:	9301      	str	r3, [sp, #4]
 800313a:	2300      	movs	r3, #0
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	2300      	movs	r3, #0
 8003140:	460a      	mov	r2, r1
 8003142:	4923      	ldr	r1, [pc, #140]	@ (80031d0 <vTaskStartScheduler+0xbc>)
 8003144:	4823      	ldr	r0, [pc, #140]	@ (80031d4 <vTaskStartScheduler+0xc0>)
 8003146:	f7ff fdf6 	bl	8002d36 <xTaskCreateStatic>
 800314a:	4603      	mov	r3, r0
 800314c:	4a22      	ldr	r2, [pc, #136]	@ (80031d8 <vTaskStartScheduler+0xc4>)
 800314e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003150:	4b21      	ldr	r3, [pc, #132]	@ (80031d8 <vTaskStartScheduler+0xc4>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d002      	beq.n	800315e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003158:	2301      	movs	r3, #1
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	e001      	b.n	8003162 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800315e:	2300      	movs	r3, #0
 8003160:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d11d      	bne.n	80031a4 <vTaskStartScheduler+0x90>
	__asm volatile
 8003168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800316c:	b672      	cpsid	i
 800316e:	f383 8811 	msr	BASEPRI, r3
 8003172:	f3bf 8f6f 	isb	sy
 8003176:	f3bf 8f4f 	dsb	sy
 800317a:	b662      	cpsie	i
 800317c:	613b      	str	r3, [r7, #16]
}
 800317e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003180:	4b16      	ldr	r3, [pc, #88]	@ (80031dc <vTaskStartScheduler+0xc8>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	334c      	adds	r3, #76	@ 0x4c
 8003186:	4a16      	ldr	r2, [pc, #88]	@ (80031e0 <vTaskStartScheduler+0xcc>)
 8003188:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800318a:	4b16      	ldr	r3, [pc, #88]	@ (80031e4 <vTaskStartScheduler+0xd0>)
 800318c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003190:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003192:	4b15      	ldr	r3, [pc, #84]	@ (80031e8 <vTaskStartScheduler+0xd4>)
 8003194:	2201      	movs	r2, #1
 8003196:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003198:	4b14      	ldr	r3, [pc, #80]	@ (80031ec <vTaskStartScheduler+0xd8>)
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800319e:	f000 fbe7 	bl	8003970 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80031a2:	e011      	b.n	80031c8 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031aa:	d10d      	bne.n	80031c8 <vTaskStartScheduler+0xb4>
	__asm volatile
 80031ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031b0:	b672      	cpsid	i
 80031b2:	f383 8811 	msr	BASEPRI, r3
 80031b6:	f3bf 8f6f 	isb	sy
 80031ba:	f3bf 8f4f 	dsb	sy
 80031be:	b662      	cpsie	i
 80031c0:	60fb      	str	r3, [r7, #12]
}
 80031c2:	bf00      	nop
 80031c4:	bf00      	nop
 80031c6:	e7fd      	b.n	80031c4 <vTaskStartScheduler+0xb0>
}
 80031c8:	bf00      	nop
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	08004230 	.word	0x08004230
 80031d4:	08003591 	.word	0x08003591
 80031d8:	200007d8 	.word	0x200007d8
 80031dc:	200006b4 	.word	0x200006b4
 80031e0:	20000010 	.word	0x20000010
 80031e4:	200007d4 	.word	0x200007d4
 80031e8:	200007c0 	.word	0x200007c0
 80031ec:	200007b8 	.word	0x200007b8

080031f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80031f4:	4b04      	ldr	r3, [pc, #16]	@ (8003208 <vTaskSuspendAll+0x18>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3301      	adds	r3, #1
 80031fa:	4a03      	ldr	r2, [pc, #12]	@ (8003208 <vTaskSuspendAll+0x18>)
 80031fc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80031fe:	bf00      	nop
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	200007dc 	.word	0x200007dc

0800320c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003212:	2300      	movs	r3, #0
 8003214:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003216:	2300      	movs	r3, #0
 8003218:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800321a:	4b43      	ldr	r3, [pc, #268]	@ (8003328 <xTaskResumeAll+0x11c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10d      	bne.n	800323e <xTaskResumeAll+0x32>
	__asm volatile
 8003222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003226:	b672      	cpsid	i
 8003228:	f383 8811 	msr	BASEPRI, r3
 800322c:	f3bf 8f6f 	isb	sy
 8003230:	f3bf 8f4f 	dsb	sy
 8003234:	b662      	cpsie	i
 8003236:	603b      	str	r3, [r7, #0]
}
 8003238:	bf00      	nop
 800323a:	bf00      	nop
 800323c:	e7fd      	b.n	800323a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800323e:	f000 fc15 	bl	8003a6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003242:	4b39      	ldr	r3, [pc, #228]	@ (8003328 <xTaskResumeAll+0x11c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	3b01      	subs	r3, #1
 8003248:	4a37      	ldr	r2, [pc, #220]	@ (8003328 <xTaskResumeAll+0x11c>)
 800324a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800324c:	4b36      	ldr	r3, [pc, #216]	@ (8003328 <xTaskResumeAll+0x11c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d161      	bne.n	8003318 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003254:	4b35      	ldr	r3, [pc, #212]	@ (800332c <xTaskResumeAll+0x120>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d05d      	beq.n	8003318 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800325c:	e02e      	b.n	80032bc <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800325e:	4b34      	ldr	r3, [pc, #208]	@ (8003330 <xTaskResumeAll+0x124>)
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	3318      	adds	r3, #24
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff fd39 	bl	8002ce2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	3304      	adds	r3, #4
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff fd34 	bl	8002ce2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327e:	2201      	movs	r2, #1
 8003280:	409a      	lsls	r2, r3
 8003282:	4b2c      	ldr	r3, [pc, #176]	@ (8003334 <xTaskResumeAll+0x128>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4313      	orrs	r3, r2
 8003288:	4a2a      	ldr	r2, [pc, #168]	@ (8003334 <xTaskResumeAll+0x128>)
 800328a:	6013      	str	r3, [r2, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003290:	4613      	mov	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4a27      	ldr	r2, [pc, #156]	@ (8003338 <xTaskResumeAll+0x12c>)
 800329a:	441a      	add	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	3304      	adds	r3, #4
 80032a0:	4619      	mov	r1, r3
 80032a2:	4610      	mov	r0, r2
 80032a4:	f7ff fcc0 	bl	8002c28 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032ac:	4b23      	ldr	r3, [pc, #140]	@ (800333c <xTaskResumeAll+0x130>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d302      	bcc.n	80032bc <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80032b6:	4b22      	ldr	r3, [pc, #136]	@ (8003340 <xTaskResumeAll+0x134>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032bc:	4b1c      	ldr	r3, [pc, #112]	@ (8003330 <xTaskResumeAll+0x124>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1cc      	bne.n	800325e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80032ca:	f000 fa1f 	bl	800370c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80032ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003344 <xTaskResumeAll+0x138>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d010      	beq.n	80032fc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80032da:	f000 f837 	bl	800334c <xTaskIncrementTick>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80032e4:	4b16      	ldr	r3, [pc, #88]	@ (8003340 <xTaskResumeAll+0x134>)
 80032e6:	2201      	movs	r2, #1
 80032e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3b01      	subs	r3, #1
 80032ee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f1      	bne.n	80032da <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80032f6:	4b13      	ldr	r3, [pc, #76]	@ (8003344 <xTaskResumeAll+0x138>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80032fc:	4b10      	ldr	r3, [pc, #64]	@ (8003340 <xTaskResumeAll+0x134>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d009      	beq.n	8003318 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003304:	2301      	movs	r3, #1
 8003306:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003308:	4b0f      	ldr	r3, [pc, #60]	@ (8003348 <xTaskResumeAll+0x13c>)
 800330a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	f3bf 8f4f 	dsb	sy
 8003314:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003318:	f000 fbde 	bl	8003ad8 <vPortExitCritical>

	return xAlreadyYielded;
 800331c:	68bb      	ldr	r3, [r7, #8]
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	200007dc 	.word	0x200007dc
 800332c:	200007b4 	.word	0x200007b4
 8003330:	20000774 	.word	0x20000774
 8003334:	200007bc 	.word	0x200007bc
 8003338:	200006b8 	.word	0x200006b8
 800333c:	200006b4 	.word	0x200006b4
 8003340:	200007c8 	.word	0x200007c8
 8003344:	200007c4 	.word	0x200007c4
 8003348:	e000ed04 	.word	0xe000ed04

0800334c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003352:	2300      	movs	r3, #0
 8003354:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003356:	4b50      	ldr	r3, [pc, #320]	@ (8003498 <xTaskIncrementTick+0x14c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	f040 808b 	bne.w	8003476 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003360:	4b4e      	ldr	r3, [pc, #312]	@ (800349c <xTaskIncrementTick+0x150>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	3301      	adds	r3, #1
 8003366:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003368:	4a4c      	ldr	r2, [pc, #304]	@ (800349c <xTaskIncrementTick+0x150>)
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d123      	bne.n	80033bc <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8003374:	4b4a      	ldr	r3, [pc, #296]	@ (80034a0 <xTaskIncrementTick+0x154>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00d      	beq.n	800339a <xTaskIncrementTick+0x4e>
	__asm volatile
 800337e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003382:	b672      	cpsid	i
 8003384:	f383 8811 	msr	BASEPRI, r3
 8003388:	f3bf 8f6f 	isb	sy
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	b662      	cpsie	i
 8003392:	603b      	str	r3, [r7, #0]
}
 8003394:	bf00      	nop
 8003396:	bf00      	nop
 8003398:	e7fd      	b.n	8003396 <xTaskIncrementTick+0x4a>
 800339a:	4b41      	ldr	r3, [pc, #260]	@ (80034a0 <xTaskIncrementTick+0x154>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	4b40      	ldr	r3, [pc, #256]	@ (80034a4 <xTaskIncrementTick+0x158>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a3e      	ldr	r2, [pc, #248]	@ (80034a0 <xTaskIncrementTick+0x154>)
 80033a6:	6013      	str	r3, [r2, #0]
 80033a8:	4a3e      	ldr	r2, [pc, #248]	@ (80034a4 <xTaskIncrementTick+0x158>)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	4b3e      	ldr	r3, [pc, #248]	@ (80034a8 <xTaskIncrementTick+0x15c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	3301      	adds	r3, #1
 80033b4:	4a3c      	ldr	r2, [pc, #240]	@ (80034a8 <xTaskIncrementTick+0x15c>)
 80033b6:	6013      	str	r3, [r2, #0]
 80033b8:	f000 f9a8 	bl	800370c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80033bc:	4b3b      	ldr	r3, [pc, #236]	@ (80034ac <xTaskIncrementTick+0x160>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d348      	bcc.n	8003458 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033c6:	4b36      	ldr	r3, [pc, #216]	@ (80034a0 <xTaskIncrementTick+0x154>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d104      	bne.n	80033da <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033d0:	4b36      	ldr	r3, [pc, #216]	@ (80034ac <xTaskIncrementTick+0x160>)
 80033d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80033d6:	601a      	str	r2, [r3, #0]
					break;
 80033d8:	e03e      	b.n	8003458 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033da:	4b31      	ldr	r3, [pc, #196]	@ (80034a0 <xTaskIncrementTick+0x154>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d203      	bcs.n	80033fa <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80033f2:	4a2e      	ldr	r2, [pc, #184]	@ (80034ac <xTaskIncrementTick+0x160>)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80033f8:	e02e      	b.n	8003458 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	3304      	adds	r3, #4
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff fc6f 	bl	8002ce2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003408:	2b00      	cmp	r3, #0
 800340a:	d004      	beq.n	8003416 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	3318      	adds	r3, #24
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff fc66 	bl	8002ce2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800341a:	2201      	movs	r2, #1
 800341c:	409a      	lsls	r2, r3
 800341e:	4b24      	ldr	r3, [pc, #144]	@ (80034b0 <xTaskIncrementTick+0x164>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4313      	orrs	r3, r2
 8003424:	4a22      	ldr	r2, [pc, #136]	@ (80034b0 <xTaskIncrementTick+0x164>)
 8003426:	6013      	str	r3, [r2, #0]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4a1f      	ldr	r2, [pc, #124]	@ (80034b4 <xTaskIncrementTick+0x168>)
 8003436:	441a      	add	r2, r3
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	3304      	adds	r3, #4
 800343c:	4619      	mov	r1, r3
 800343e:	4610      	mov	r0, r2
 8003440:	f7ff fbf2 	bl	8002c28 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003448:	4b1b      	ldr	r3, [pc, #108]	@ (80034b8 <xTaskIncrementTick+0x16c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800344e:	429a      	cmp	r2, r3
 8003450:	d3b9      	bcc.n	80033c6 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8003452:	2301      	movs	r3, #1
 8003454:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003456:	e7b6      	b.n	80033c6 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003458:	4b17      	ldr	r3, [pc, #92]	@ (80034b8 <xTaskIncrementTick+0x16c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800345e:	4915      	ldr	r1, [pc, #84]	@ (80034b4 <xTaskIncrementTick+0x168>)
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d907      	bls.n	8003480 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8003470:	2301      	movs	r3, #1
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	e004      	b.n	8003480 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003476:	4b11      	ldr	r3, [pc, #68]	@ (80034bc <xTaskIncrementTick+0x170>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	3301      	adds	r3, #1
 800347c:	4a0f      	ldr	r2, [pc, #60]	@ (80034bc <xTaskIncrementTick+0x170>)
 800347e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003480:	4b0f      	ldr	r3, [pc, #60]	@ (80034c0 <xTaskIncrementTick+0x174>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8003488:	2301      	movs	r3, #1
 800348a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800348c:	697b      	ldr	r3, [r7, #20]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	200007dc 	.word	0x200007dc
 800349c:	200007b8 	.word	0x200007b8
 80034a0:	2000076c 	.word	0x2000076c
 80034a4:	20000770 	.word	0x20000770
 80034a8:	200007cc 	.word	0x200007cc
 80034ac:	200007d4 	.word	0x200007d4
 80034b0:	200007bc 	.word	0x200007bc
 80034b4:	200006b8 	.word	0x200006b8
 80034b8:	200006b4 	.word	0x200006b4
 80034bc:	200007c4 	.word	0x200007c4
 80034c0:	200007c8 	.word	0x200007c8

080034c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80034c4:	b480      	push	{r7}
 80034c6:	b087      	sub	sp, #28
 80034c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80034ca:	4b2b      	ldr	r3, [pc, #172]	@ (8003578 <vTaskSwitchContext+0xb4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80034d2:	4b2a      	ldr	r3, [pc, #168]	@ (800357c <vTaskSwitchContext+0xb8>)
 80034d4:	2201      	movs	r2, #1
 80034d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80034d8:	e047      	b.n	800356a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80034da:	4b28      	ldr	r3, [pc, #160]	@ (800357c <vTaskSwitchContext+0xb8>)
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034e0:	4b27      	ldr	r3, [pc, #156]	@ (8003580 <vTaskSwitchContext+0xbc>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	fab3 f383 	clz	r3, r3
 80034ec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80034ee:	7afb      	ldrb	r3, [r7, #11]
 80034f0:	f1c3 031f 	rsb	r3, r3, #31
 80034f4:	617b      	str	r3, [r7, #20]
 80034f6:	4923      	ldr	r1, [pc, #140]	@ (8003584 <vTaskSwitchContext+0xc0>)
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	4613      	mov	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	440b      	add	r3, r1
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10d      	bne.n	8003526 <vTaskSwitchContext+0x62>
	__asm volatile
 800350a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800350e:	b672      	cpsid	i
 8003510:	f383 8811 	msr	BASEPRI, r3
 8003514:	f3bf 8f6f 	isb	sy
 8003518:	f3bf 8f4f 	dsb	sy
 800351c:	b662      	cpsie	i
 800351e:	607b      	str	r3, [r7, #4]
}
 8003520:	bf00      	nop
 8003522:	bf00      	nop
 8003524:	e7fd      	b.n	8003522 <vTaskSwitchContext+0x5e>
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	4613      	mov	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4a14      	ldr	r2, [pc, #80]	@ (8003584 <vTaskSwitchContext+0xc0>)
 8003532:	4413      	add	r3, r2
 8003534:	613b      	str	r3, [r7, #16]
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	605a      	str	r2, [r3, #4]
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	3308      	adds	r3, #8
 8003548:	429a      	cmp	r2, r3
 800354a:	d104      	bne.n	8003556 <vTaskSwitchContext+0x92>
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	605a      	str	r2, [r3, #4]
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	4a0a      	ldr	r2, [pc, #40]	@ (8003588 <vTaskSwitchContext+0xc4>)
 800355e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003560:	4b09      	ldr	r3, [pc, #36]	@ (8003588 <vTaskSwitchContext+0xc4>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	334c      	adds	r3, #76	@ 0x4c
 8003566:	4a09      	ldr	r2, [pc, #36]	@ (800358c <vTaskSwitchContext+0xc8>)
 8003568:	6013      	str	r3, [r2, #0]
}
 800356a:	bf00      	nop
 800356c:	371c      	adds	r7, #28
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	200007dc 	.word	0x200007dc
 800357c:	200007c8 	.word	0x200007c8
 8003580:	200007bc 	.word	0x200007bc
 8003584:	200006b8 	.word	0x200006b8
 8003588:	200006b4 	.word	0x200006b4
 800358c:	20000010 	.word	0x20000010

08003590 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003598:	f000 f852 	bl	8003640 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800359c:	4b06      	ldr	r3, [pc, #24]	@ (80035b8 <prvIdleTask+0x28>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d9f9      	bls.n	8003598 <prvIdleTask+0x8>
			{
				taskYIELD();
 80035a4:	4b05      	ldr	r3, [pc, #20]	@ (80035bc <prvIdleTask+0x2c>)
 80035a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80035b4:	e7f0      	b.n	8003598 <prvIdleTask+0x8>
 80035b6:	bf00      	nop
 80035b8:	200006b8 	.word	0x200006b8
 80035bc:	e000ed04 	.word	0xe000ed04

080035c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035c6:	2300      	movs	r3, #0
 80035c8:	607b      	str	r3, [r7, #4]
 80035ca:	e00c      	b.n	80035e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	4613      	mov	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4a12      	ldr	r2, [pc, #72]	@ (8003620 <prvInitialiseTaskLists+0x60>)
 80035d8:	4413      	add	r3, r2
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff faf7 	bl	8002bce <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3301      	adds	r3, #1
 80035e4:	607b      	str	r3, [r7, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b06      	cmp	r3, #6
 80035ea:	d9ef      	bls.n	80035cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80035ec:	480d      	ldr	r0, [pc, #52]	@ (8003624 <prvInitialiseTaskLists+0x64>)
 80035ee:	f7ff faee 	bl	8002bce <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80035f2:	480d      	ldr	r0, [pc, #52]	@ (8003628 <prvInitialiseTaskLists+0x68>)
 80035f4:	f7ff faeb 	bl	8002bce <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80035f8:	480c      	ldr	r0, [pc, #48]	@ (800362c <prvInitialiseTaskLists+0x6c>)
 80035fa:	f7ff fae8 	bl	8002bce <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80035fe:	480c      	ldr	r0, [pc, #48]	@ (8003630 <prvInitialiseTaskLists+0x70>)
 8003600:	f7ff fae5 	bl	8002bce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003604:	480b      	ldr	r0, [pc, #44]	@ (8003634 <prvInitialiseTaskLists+0x74>)
 8003606:	f7ff fae2 	bl	8002bce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800360a:	4b0b      	ldr	r3, [pc, #44]	@ (8003638 <prvInitialiseTaskLists+0x78>)
 800360c:	4a05      	ldr	r2, [pc, #20]	@ (8003624 <prvInitialiseTaskLists+0x64>)
 800360e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003610:	4b0a      	ldr	r3, [pc, #40]	@ (800363c <prvInitialiseTaskLists+0x7c>)
 8003612:	4a05      	ldr	r2, [pc, #20]	@ (8003628 <prvInitialiseTaskLists+0x68>)
 8003614:	601a      	str	r2, [r3, #0]
}
 8003616:	bf00      	nop
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	200006b8 	.word	0x200006b8
 8003624:	20000744 	.word	0x20000744
 8003628:	20000758 	.word	0x20000758
 800362c:	20000774 	.word	0x20000774
 8003630:	20000788 	.word	0x20000788
 8003634:	200007a0 	.word	0x200007a0
 8003638:	2000076c 	.word	0x2000076c
 800363c:	20000770 	.word	0x20000770

08003640 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003646:	e019      	b.n	800367c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003648:	f000 fa10 	bl	8003a6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800364c:	4b10      	ldr	r3, [pc, #64]	@ (8003690 <prvCheckTasksWaitingTermination+0x50>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3304      	adds	r3, #4
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff fb42 	bl	8002ce2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800365e:	4b0d      	ldr	r3, [pc, #52]	@ (8003694 <prvCheckTasksWaitingTermination+0x54>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	3b01      	subs	r3, #1
 8003664:	4a0b      	ldr	r2, [pc, #44]	@ (8003694 <prvCheckTasksWaitingTermination+0x54>)
 8003666:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003668:	4b0b      	ldr	r3, [pc, #44]	@ (8003698 <prvCheckTasksWaitingTermination+0x58>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3b01      	subs	r3, #1
 800366e:	4a0a      	ldr	r2, [pc, #40]	@ (8003698 <prvCheckTasksWaitingTermination+0x58>)
 8003670:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003672:	f000 fa31 	bl	8003ad8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f810 	bl	800369c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800367c:	4b06      	ldr	r3, [pc, #24]	@ (8003698 <prvCheckTasksWaitingTermination+0x58>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1e1      	bne.n	8003648 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003684:	bf00      	nop
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20000788 	.word	0x20000788
 8003694:	200007b4 	.word	0x200007b4
 8003698:	2000079c 	.word	0x2000079c

0800369c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	334c      	adds	r3, #76	@ 0x4c
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 fcb9 	bl	8004020 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d108      	bne.n	80036ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 fb8b 	bl	8003dd8 <vPortFree>
				vPortFree( pxTCB );
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 fb88 	bl	8003dd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80036c8:	e01b      	b.n	8003702 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d103      	bne.n	80036dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 fb7f 	bl	8003dd8 <vPortFree>
	}
 80036da:	e012      	b.n	8003702 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d00d      	beq.n	8003702 <prvDeleteTCB+0x66>
	__asm volatile
 80036e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ea:	b672      	cpsid	i
 80036ec:	f383 8811 	msr	BASEPRI, r3
 80036f0:	f3bf 8f6f 	isb	sy
 80036f4:	f3bf 8f4f 	dsb	sy
 80036f8:	b662      	cpsie	i
 80036fa:	60fb      	str	r3, [r7, #12]
}
 80036fc:	bf00      	nop
 80036fe:	bf00      	nop
 8003700:	e7fd      	b.n	80036fe <prvDeleteTCB+0x62>
	}
 8003702:	bf00      	nop
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003712:	4b0c      	ldr	r3, [pc, #48]	@ (8003744 <prvResetNextTaskUnblockTime+0x38>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d104      	bne.n	8003726 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800371c:	4b0a      	ldr	r3, [pc, #40]	@ (8003748 <prvResetNextTaskUnblockTime+0x3c>)
 800371e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003722:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003724:	e008      	b.n	8003738 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003726:	4b07      	ldr	r3, [pc, #28]	@ (8003744 <prvResetNextTaskUnblockTime+0x38>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	4a04      	ldr	r2, [pc, #16]	@ (8003748 <prvResetNextTaskUnblockTime+0x3c>)
 8003736:	6013      	str	r3, [r2, #0]
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	2000076c 	.word	0x2000076c
 8003748:	200007d4 	.word	0x200007d4

0800374c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003752:	4b0b      	ldr	r3, [pc, #44]	@ (8003780 <xTaskGetSchedulerState+0x34>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d102      	bne.n	8003760 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800375a:	2301      	movs	r3, #1
 800375c:	607b      	str	r3, [r7, #4]
 800375e:	e008      	b.n	8003772 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003760:	4b08      	ldr	r3, [pc, #32]	@ (8003784 <xTaskGetSchedulerState+0x38>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d102      	bne.n	800376e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003768:	2302      	movs	r3, #2
 800376a:	607b      	str	r3, [r7, #4]
 800376c:	e001      	b.n	8003772 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800376e:	2300      	movs	r3, #0
 8003770:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003772:	687b      	ldr	r3, [r7, #4]
	}
 8003774:	4618      	mov	r0, r3
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	200007c0 	.word	0x200007c0
 8003784:	200007dc 	.word	0x200007dc

08003788 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003792:	4b29      	ldr	r3, [pc, #164]	@ (8003838 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003798:	4b28      	ldr	r3, [pc, #160]	@ (800383c <prvAddCurrentTaskToDelayedList+0xb4>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3304      	adds	r3, #4
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff fa9f 	bl	8002ce2 <uxListRemove>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10b      	bne.n	80037c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80037aa:	4b24      	ldr	r3, [pc, #144]	@ (800383c <prvAddCurrentTaskToDelayedList+0xb4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b0:	2201      	movs	r2, #1
 80037b2:	fa02 f303 	lsl.w	r3, r2, r3
 80037b6:	43da      	mvns	r2, r3
 80037b8:	4b21      	ldr	r3, [pc, #132]	@ (8003840 <prvAddCurrentTaskToDelayedList+0xb8>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4013      	ands	r3, r2
 80037be:	4a20      	ldr	r2, [pc, #128]	@ (8003840 <prvAddCurrentTaskToDelayedList+0xb8>)
 80037c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037c8:	d10a      	bne.n	80037e0 <prvAddCurrentTaskToDelayedList+0x58>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d007      	beq.n	80037e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037d0:	4b1a      	ldr	r3, [pc, #104]	@ (800383c <prvAddCurrentTaskToDelayedList+0xb4>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3304      	adds	r3, #4
 80037d6:	4619      	mov	r1, r3
 80037d8:	481a      	ldr	r0, [pc, #104]	@ (8003844 <prvAddCurrentTaskToDelayedList+0xbc>)
 80037da:	f7ff fa25 	bl	8002c28 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80037de:	e026      	b.n	800382e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4413      	add	r3, r2
 80037e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80037e8:	4b14      	ldr	r3, [pc, #80]	@ (800383c <prvAddCurrentTaskToDelayedList+0xb4>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d209      	bcs.n	800380c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037f8:	4b13      	ldr	r3, [pc, #76]	@ (8003848 <prvAddCurrentTaskToDelayedList+0xc0>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	4b0f      	ldr	r3, [pc, #60]	@ (800383c <prvAddCurrentTaskToDelayedList+0xb4>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	3304      	adds	r3, #4
 8003802:	4619      	mov	r1, r3
 8003804:	4610      	mov	r0, r2
 8003806:	f7ff fa33 	bl	8002c70 <vListInsert>
}
 800380a:	e010      	b.n	800382e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800380c:	4b0f      	ldr	r3, [pc, #60]	@ (800384c <prvAddCurrentTaskToDelayedList+0xc4>)
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	4b0a      	ldr	r3, [pc, #40]	@ (800383c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	3304      	adds	r3, #4
 8003816:	4619      	mov	r1, r3
 8003818:	4610      	mov	r0, r2
 800381a:	f7ff fa29 	bl	8002c70 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800381e:	4b0c      	ldr	r3, [pc, #48]	@ (8003850 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	429a      	cmp	r2, r3
 8003826:	d202      	bcs.n	800382e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003828:	4a09      	ldr	r2, [pc, #36]	@ (8003850 <prvAddCurrentTaskToDelayedList+0xc8>)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	6013      	str	r3, [r2, #0]
}
 800382e:	bf00      	nop
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	200007b8 	.word	0x200007b8
 800383c:	200006b4 	.word	0x200006b4
 8003840:	200007bc 	.word	0x200007bc
 8003844:	200007a0 	.word	0x200007a0
 8003848:	20000770 	.word	0x20000770
 800384c:	2000076c 	.word	0x2000076c
 8003850:	200007d4 	.word	0x200007d4

08003854 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	3b04      	subs	r3, #4
 8003864:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800386c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	3b04      	subs	r3, #4
 8003872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f023 0201 	bic.w	r2, r3, #1
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	3b04      	subs	r3, #4
 8003882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003884:	4a0c      	ldr	r2, [pc, #48]	@ (80038b8 <pxPortInitialiseStack+0x64>)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	3b14      	subs	r3, #20
 800388e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	3b04      	subs	r3, #4
 800389a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f06f 0202 	mvn.w	r2, #2
 80038a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	3b20      	subs	r3, #32
 80038a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80038aa:	68fb      	ldr	r3, [r7, #12]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	080038bd 	.word	0x080038bd

080038bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80038c2:	2300      	movs	r3, #0
 80038c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80038c6:	4b15      	ldr	r3, [pc, #84]	@ (800391c <prvTaskExitError+0x60>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038ce:	d00d      	beq.n	80038ec <prvTaskExitError+0x30>
	__asm volatile
 80038d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038d4:	b672      	cpsid	i
 80038d6:	f383 8811 	msr	BASEPRI, r3
 80038da:	f3bf 8f6f 	isb	sy
 80038de:	f3bf 8f4f 	dsb	sy
 80038e2:	b662      	cpsie	i
 80038e4:	60fb      	str	r3, [r7, #12]
}
 80038e6:	bf00      	nop
 80038e8:	bf00      	nop
 80038ea:	e7fd      	b.n	80038e8 <prvTaskExitError+0x2c>
	__asm volatile
 80038ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038f0:	b672      	cpsid	i
 80038f2:	f383 8811 	msr	BASEPRI, r3
 80038f6:	f3bf 8f6f 	isb	sy
 80038fa:	f3bf 8f4f 	dsb	sy
 80038fe:	b662      	cpsie	i
 8003900:	60bb      	str	r3, [r7, #8]
}
 8003902:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003904:	bf00      	nop
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0fc      	beq.n	8003906 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800390c:	bf00      	nop
 800390e:	bf00      	nop
 8003910:	3714      	adds	r7, #20
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	2000000c 	.word	0x2000000c

08003920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003920:	4b07      	ldr	r3, [pc, #28]	@ (8003940 <pxCurrentTCBConst2>)
 8003922:	6819      	ldr	r1, [r3, #0]
 8003924:	6808      	ldr	r0, [r1, #0]
 8003926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800392a:	f380 8809 	msr	PSP, r0
 800392e:	f3bf 8f6f 	isb	sy
 8003932:	f04f 0000 	mov.w	r0, #0
 8003936:	f380 8811 	msr	BASEPRI, r0
 800393a:	4770      	bx	lr
 800393c:	f3af 8000 	nop.w

08003940 <pxCurrentTCBConst2>:
 8003940:	200006b4 	.word	0x200006b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003944:	bf00      	nop
 8003946:	bf00      	nop

08003948 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003948:	4808      	ldr	r0, [pc, #32]	@ (800396c <prvPortStartFirstTask+0x24>)
 800394a:	6800      	ldr	r0, [r0, #0]
 800394c:	6800      	ldr	r0, [r0, #0]
 800394e:	f380 8808 	msr	MSP, r0
 8003952:	f04f 0000 	mov.w	r0, #0
 8003956:	f380 8814 	msr	CONTROL, r0
 800395a:	b662      	cpsie	i
 800395c:	b661      	cpsie	f
 800395e:	f3bf 8f4f 	dsb	sy
 8003962:	f3bf 8f6f 	isb	sy
 8003966:	df00      	svc	0
 8003968:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800396a:	bf00      	nop
 800396c:	e000ed08 	.word	0xe000ed08

08003970 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003976:	4b37      	ldr	r3, [pc, #220]	@ (8003a54 <xPortStartScheduler+0xe4>)
 8003978:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	b2db      	uxtb	r3, r3
 8003980:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	22ff      	movs	r2, #255	@ 0xff
 8003986:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003990:	78fb      	ldrb	r3, [r7, #3]
 8003992:	b2db      	uxtb	r3, r3
 8003994:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003998:	b2da      	uxtb	r2, r3
 800399a:	4b2f      	ldr	r3, [pc, #188]	@ (8003a58 <xPortStartScheduler+0xe8>)
 800399c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800399e:	4b2f      	ldr	r3, [pc, #188]	@ (8003a5c <xPortStartScheduler+0xec>)
 80039a0:	2207      	movs	r2, #7
 80039a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039a4:	e009      	b.n	80039ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80039a6:	4b2d      	ldr	r3, [pc, #180]	@ (8003a5c <xPortStartScheduler+0xec>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	4a2b      	ldr	r2, [pc, #172]	@ (8003a5c <xPortStartScheduler+0xec>)
 80039ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80039b0:	78fb      	ldrb	r3, [r7, #3]
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039ba:	78fb      	ldrb	r3, [r7, #3]
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039c2:	2b80      	cmp	r3, #128	@ 0x80
 80039c4:	d0ef      	beq.n	80039a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80039c6:	4b25      	ldr	r3, [pc, #148]	@ (8003a5c <xPortStartScheduler+0xec>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f1c3 0307 	rsb	r3, r3, #7
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d00d      	beq.n	80039ee <xPortStartScheduler+0x7e>
	__asm volatile
 80039d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d6:	b672      	cpsid	i
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	b662      	cpsie	i
 80039e6:	60bb      	str	r3, [r7, #8]
}
 80039e8:	bf00      	nop
 80039ea:	bf00      	nop
 80039ec:	e7fd      	b.n	80039ea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80039ee:	4b1b      	ldr	r3, [pc, #108]	@ (8003a5c <xPortStartScheduler+0xec>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	021b      	lsls	r3, r3, #8
 80039f4:	4a19      	ldr	r2, [pc, #100]	@ (8003a5c <xPortStartScheduler+0xec>)
 80039f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80039f8:	4b18      	ldr	r3, [pc, #96]	@ (8003a5c <xPortStartScheduler+0xec>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a00:	4a16      	ldr	r2, [pc, #88]	@ (8003a5c <xPortStartScheduler+0xec>)
 8003a02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003a0c:	4b14      	ldr	r3, [pc, #80]	@ (8003a60 <xPortStartScheduler+0xf0>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a13      	ldr	r2, [pc, #76]	@ (8003a60 <xPortStartScheduler+0xf0>)
 8003a12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003a18:	4b11      	ldr	r3, [pc, #68]	@ (8003a60 <xPortStartScheduler+0xf0>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a10      	ldr	r2, [pc, #64]	@ (8003a60 <xPortStartScheduler+0xf0>)
 8003a1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003a22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003a24:	f000 f8dc 	bl	8003be0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003a28:	4b0e      	ldr	r3, [pc, #56]	@ (8003a64 <xPortStartScheduler+0xf4>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003a2e:	f000 f8fb 	bl	8003c28 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003a32:	4b0d      	ldr	r3, [pc, #52]	@ (8003a68 <xPortStartScheduler+0xf8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a0c      	ldr	r2, [pc, #48]	@ (8003a68 <xPortStartScheduler+0xf8>)
 8003a38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003a3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003a3e:	f7ff ff83 	bl	8003948 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003a42:	f7ff fd3f 	bl	80034c4 <vTaskSwitchContext>
	prvTaskExitError();
 8003a46:	f7ff ff39 	bl	80038bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	e000e400 	.word	0xe000e400
 8003a58:	200007e0 	.word	0x200007e0
 8003a5c:	200007e4 	.word	0x200007e4
 8003a60:	e000ed20 	.word	0xe000ed20
 8003a64:	2000000c 	.word	0x2000000c
 8003a68:	e000ef34 	.word	0xe000ef34

08003a6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
	__asm volatile
 8003a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a76:	b672      	cpsid	i
 8003a78:	f383 8811 	msr	BASEPRI, r3
 8003a7c:	f3bf 8f6f 	isb	sy
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	b662      	cpsie	i
 8003a86:	607b      	str	r3, [r7, #4]
}
 8003a88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003a8a:	4b11      	ldr	r3, [pc, #68]	@ (8003ad0 <vPortEnterCritical+0x64>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	4a0f      	ldr	r2, [pc, #60]	@ (8003ad0 <vPortEnterCritical+0x64>)
 8003a92:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003a94:	4b0e      	ldr	r3, [pc, #56]	@ (8003ad0 <vPortEnterCritical+0x64>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d112      	bne.n	8003ac2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad4 <vPortEnterCritical+0x68>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00d      	beq.n	8003ac2 <vPortEnterCritical+0x56>
	__asm volatile
 8003aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aaa:	b672      	cpsid	i
 8003aac:	f383 8811 	msr	BASEPRI, r3
 8003ab0:	f3bf 8f6f 	isb	sy
 8003ab4:	f3bf 8f4f 	dsb	sy
 8003ab8:	b662      	cpsie	i
 8003aba:	603b      	str	r3, [r7, #0]
}
 8003abc:	bf00      	nop
 8003abe:	bf00      	nop
 8003ac0:	e7fd      	b.n	8003abe <vPortEnterCritical+0x52>
	}
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	2000000c 	.word	0x2000000c
 8003ad4:	e000ed04 	.word	0xe000ed04

08003ad8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003ade:	4b13      	ldr	r3, [pc, #76]	@ (8003b2c <vPortExitCritical+0x54>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10d      	bne.n	8003b02 <vPortExitCritical+0x2a>
	__asm volatile
 8003ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aea:	b672      	cpsid	i
 8003aec:	f383 8811 	msr	BASEPRI, r3
 8003af0:	f3bf 8f6f 	isb	sy
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	b662      	cpsie	i
 8003afa:	607b      	str	r3, [r7, #4]
}
 8003afc:	bf00      	nop
 8003afe:	bf00      	nop
 8003b00:	e7fd      	b.n	8003afe <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8003b02:	4b0a      	ldr	r3, [pc, #40]	@ (8003b2c <vPortExitCritical+0x54>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	4a08      	ldr	r2, [pc, #32]	@ (8003b2c <vPortExitCritical+0x54>)
 8003b0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003b0c:	4b07      	ldr	r3, [pc, #28]	@ (8003b2c <vPortExitCritical+0x54>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d105      	bne.n	8003b20 <vPortExitCritical+0x48>
 8003b14:	2300      	movs	r3, #0
 8003b16:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003b1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	2000000c 	.word	0x2000000c

08003b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003b30:	f3ef 8009 	mrs	r0, PSP
 8003b34:	f3bf 8f6f 	isb	sy
 8003b38:	4b15      	ldr	r3, [pc, #84]	@ (8003b90 <pxCurrentTCBConst>)
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	f01e 0f10 	tst.w	lr, #16
 8003b40:	bf08      	it	eq
 8003b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b4a:	6010      	str	r0, [r2, #0]
 8003b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003b50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003b54:	b672      	cpsid	i
 8003b56:	f380 8811 	msr	BASEPRI, r0
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	f3bf 8f6f 	isb	sy
 8003b62:	b662      	cpsie	i
 8003b64:	f7ff fcae 	bl	80034c4 <vTaskSwitchContext>
 8003b68:	f04f 0000 	mov.w	r0, #0
 8003b6c:	f380 8811 	msr	BASEPRI, r0
 8003b70:	bc09      	pop	{r0, r3}
 8003b72:	6819      	ldr	r1, [r3, #0]
 8003b74:	6808      	ldr	r0, [r1, #0]
 8003b76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b7a:	f01e 0f10 	tst.w	lr, #16
 8003b7e:	bf08      	it	eq
 8003b80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003b84:	f380 8809 	msr	PSP, r0
 8003b88:	f3bf 8f6f 	isb	sy
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop

08003b90 <pxCurrentTCBConst>:
 8003b90:	200006b4 	.word	0x200006b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003b94:	bf00      	nop
 8003b96:	bf00      	nop

08003b98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8003b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ba2:	b672      	cpsid	i
 8003ba4:	f383 8811 	msr	BASEPRI, r3
 8003ba8:	f3bf 8f6f 	isb	sy
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	b662      	cpsie	i
 8003bb2:	607b      	str	r3, [r7, #4]
}
 8003bb4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003bb6:	f7ff fbc9 	bl	800334c <xTaskIncrementTick>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003bc0:	4b06      	ldr	r3, [pc, #24]	@ (8003bdc <xPortSysTickHandler+0x44>)
 8003bc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	2300      	movs	r3, #0
 8003bca:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	f383 8811 	msr	BASEPRI, r3
}
 8003bd2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003bd4:	bf00      	nop
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	e000ed04 	.word	0xe000ed04

08003be0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003be4:	4b0b      	ldr	r3, [pc, #44]	@ (8003c14 <vPortSetupTimerInterrupt+0x34>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003bea:	4b0b      	ldr	r3, [pc, #44]	@ (8003c18 <vPortSetupTimerInterrupt+0x38>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8003c1c <vPortSetupTimerInterrupt+0x3c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8003c20 <vPortSetupTimerInterrupt+0x40>)
 8003bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfa:	099b      	lsrs	r3, r3, #6
 8003bfc:	4a09      	ldr	r2, [pc, #36]	@ (8003c24 <vPortSetupTimerInterrupt+0x44>)
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003c02:	4b04      	ldr	r3, [pc, #16]	@ (8003c14 <vPortSetupTimerInterrupt+0x34>)
 8003c04:	2207      	movs	r2, #7
 8003c06:	601a      	str	r2, [r3, #0]
}
 8003c08:	bf00      	nop
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	e000e010 	.word	0xe000e010
 8003c18:	e000e018 	.word	0xe000e018
 8003c1c:	20000000 	.word	0x20000000
 8003c20:	10624dd3 	.word	0x10624dd3
 8003c24:	e000e014 	.word	0xe000e014

08003c28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003c28:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003c38 <vPortEnableVFP+0x10>
 8003c2c:	6801      	ldr	r1, [r0, #0]
 8003c2e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003c32:	6001      	str	r1, [r0, #0]
 8003c34:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003c36:	bf00      	nop
 8003c38:	e000ed88 	.word	0xe000ed88

08003c3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08a      	sub	sp, #40	@ 0x28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003c44:	2300      	movs	r3, #0
 8003c46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003c48:	f7ff fad2 	bl	80031f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003c4c:	4b5d      	ldr	r3, [pc, #372]	@ (8003dc4 <pvPortMalloc+0x188>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003c54:	f000 f920 	bl	8003e98 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003c58:	4b5b      	ldr	r3, [pc, #364]	@ (8003dc8 <pvPortMalloc+0x18c>)
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f040 8094 	bne.w	8003d8e <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d020      	beq.n	8003cae <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8003c6c:	2208      	movs	r2, #8
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4413      	add	r3, r2
 8003c72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d017      	beq.n	8003cae <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f023 0307 	bic.w	r3, r3, #7
 8003c84:	3308      	adds	r3, #8
 8003c86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f003 0307 	and.w	r3, r3, #7
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00d      	beq.n	8003cae <pvPortMalloc+0x72>
	__asm volatile
 8003c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c96:	b672      	cpsid	i
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	b662      	cpsie	i
 8003ca6:	617b      	str	r3, [r7, #20]
}
 8003ca8:	bf00      	nop
 8003caa:	bf00      	nop
 8003cac:	e7fd      	b.n	8003caa <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d06c      	beq.n	8003d8e <pvPortMalloc+0x152>
 8003cb4:	4b45      	ldr	r3, [pc, #276]	@ (8003dcc <pvPortMalloc+0x190>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d867      	bhi.n	8003d8e <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003cbe:	4b44      	ldr	r3, [pc, #272]	@ (8003dd0 <pvPortMalloc+0x194>)
 8003cc0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003cc2:	4b43      	ldr	r3, [pc, #268]	@ (8003dd0 <pvPortMalloc+0x194>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003cc8:	e004      	b.n	8003cd4 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8003cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ccc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d903      	bls.n	8003ce6 <pvPortMalloc+0xaa>
 8003cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f1      	bne.n	8003cca <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003ce6:	4b37      	ldr	r3, [pc, #220]	@ (8003dc4 <pvPortMalloc+0x188>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d04e      	beq.n	8003d8e <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2208      	movs	r2, #8
 8003cf6:	4413      	add	r3, r2
 8003cf8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	1ad2      	subs	r2, r2, r3
 8003d0a:	2308      	movs	r3, #8
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d922      	bls.n	8003d58 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4413      	add	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00d      	beq.n	8003d40 <pvPortMalloc+0x104>
	__asm volatile
 8003d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d28:	b672      	cpsid	i
 8003d2a:	f383 8811 	msr	BASEPRI, r3
 8003d2e:	f3bf 8f6f 	isb	sy
 8003d32:	f3bf 8f4f 	dsb	sy
 8003d36:	b662      	cpsie	i
 8003d38:	613b      	str	r3, [r7, #16]
}
 8003d3a:	bf00      	nop
 8003d3c:	bf00      	nop
 8003d3e:	e7fd      	b.n	8003d3c <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	1ad2      	subs	r2, r2, r3
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003d52:	69b8      	ldr	r0, [r7, #24]
 8003d54:	f000 f902 	bl	8003f5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003d58:	4b1c      	ldr	r3, [pc, #112]	@ (8003dcc <pvPortMalloc+0x190>)
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	4a1a      	ldr	r2, [pc, #104]	@ (8003dcc <pvPortMalloc+0x190>)
 8003d64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003d66:	4b19      	ldr	r3, [pc, #100]	@ (8003dcc <pvPortMalloc+0x190>)
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8003dd4 <pvPortMalloc+0x198>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d203      	bcs.n	8003d7a <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003d72:	4b16      	ldr	r3, [pc, #88]	@ (8003dcc <pvPortMalloc+0x190>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a17      	ldr	r2, [pc, #92]	@ (8003dd4 <pvPortMalloc+0x198>)
 8003d78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	4b12      	ldr	r3, [pc, #72]	@ (8003dc8 <pvPortMalloc+0x18c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	431a      	orrs	r2, r3
 8003d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003d8e:	f7ff fa3d 	bl	800320c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00d      	beq.n	8003db8 <pvPortMalloc+0x17c>
	__asm volatile
 8003d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da0:	b672      	cpsid	i
 8003da2:	f383 8811 	msr	BASEPRI, r3
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	b662      	cpsie	i
 8003db0:	60fb      	str	r3, [r7, #12]
}
 8003db2:	bf00      	nop
 8003db4:	bf00      	nop
 8003db6:	e7fd      	b.n	8003db4 <pvPortMalloc+0x178>
	return pvReturn;
 8003db8:	69fb      	ldr	r3, [r7, #28]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3728      	adds	r7, #40	@ 0x28
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20005610 	.word	0x20005610
 8003dc8:	2000561c 	.word	0x2000561c
 8003dcc:	20005614 	.word	0x20005614
 8003dd0:	20005608 	.word	0x20005608
 8003dd4:	20005618 	.word	0x20005618

08003dd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d04e      	beq.n	8003e88 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003dea:	2308      	movs	r3, #8
 8003dec:	425b      	negs	r3, r3
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	4413      	add	r3, r2
 8003df2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	4b24      	ldr	r3, [pc, #144]	@ (8003e90 <vPortFree+0xb8>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4013      	ands	r3, r2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10d      	bne.n	8003e22 <vPortFree+0x4a>
	__asm volatile
 8003e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e0a:	b672      	cpsid	i
 8003e0c:	f383 8811 	msr	BASEPRI, r3
 8003e10:	f3bf 8f6f 	isb	sy
 8003e14:	f3bf 8f4f 	dsb	sy
 8003e18:	b662      	cpsie	i
 8003e1a:	60fb      	str	r3, [r7, #12]
}
 8003e1c:	bf00      	nop
 8003e1e:	bf00      	nop
 8003e20:	e7fd      	b.n	8003e1e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00d      	beq.n	8003e46 <vPortFree+0x6e>
	__asm volatile
 8003e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e2e:	b672      	cpsid	i
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	b662      	cpsie	i
 8003e3e:	60bb      	str	r3, [r7, #8]
}
 8003e40:	bf00      	nop
 8003e42:	bf00      	nop
 8003e44:	e7fd      	b.n	8003e42 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	4b11      	ldr	r3, [pc, #68]	@ (8003e90 <vPortFree+0xb8>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d019      	beq.n	8003e88 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d115      	bne.n	8003e88 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	4b0b      	ldr	r3, [pc, #44]	@ (8003e90 <vPortFree+0xb8>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	43db      	mvns	r3, r3
 8003e66:	401a      	ands	r2, r3
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003e6c:	f7ff f9c0 	bl	80031f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	4b07      	ldr	r3, [pc, #28]	@ (8003e94 <vPortFree+0xbc>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4413      	add	r3, r2
 8003e7a:	4a06      	ldr	r2, [pc, #24]	@ (8003e94 <vPortFree+0xbc>)
 8003e7c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003e7e:	6938      	ldr	r0, [r7, #16]
 8003e80:	f000 f86c 	bl	8003f5c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003e84:	f7ff f9c2 	bl	800320c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003e88:	bf00      	nop
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	2000561c 	.word	0x2000561c
 8003e94:	20005614 	.word	0x20005614

08003e98 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003e9e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8003ea2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003ea4:	4b27      	ldr	r3, [pc, #156]	@ (8003f44 <prvHeapInit+0xac>)
 8003ea6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00c      	beq.n	8003ecc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	3307      	adds	r3, #7
 8003eb6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0307 	bic.w	r3, r3, #7
 8003ebe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	4a1f      	ldr	r2, [pc, #124]	@ (8003f44 <prvHeapInit+0xac>)
 8003ec8:	4413      	add	r3, r2
 8003eca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8003f48 <prvHeapInit+0xb0>)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8003f48 <prvHeapInit+0xb0>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003ee4:	2208      	movs	r2, #8
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	1a9b      	subs	r3, r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f023 0307 	bic.w	r3, r3, #7
 8003ef2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4a15      	ldr	r2, [pc, #84]	@ (8003f4c <prvHeapInit+0xb4>)
 8003ef8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003efa:	4b14      	ldr	r3, [pc, #80]	@ (8003f4c <prvHeapInit+0xb4>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2200      	movs	r2, #0
 8003f00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003f02:	4b12      	ldr	r3, [pc, #72]	@ (8003f4c <prvHeapInit+0xb4>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2200      	movs	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	1ad2      	subs	r2, r2, r3
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003f18:	4b0c      	ldr	r3, [pc, #48]	@ (8003f4c <prvHeapInit+0xb4>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	4a0a      	ldr	r2, [pc, #40]	@ (8003f50 <prvHeapInit+0xb8>)
 8003f26:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	4a09      	ldr	r2, [pc, #36]	@ (8003f54 <prvHeapInit+0xbc>)
 8003f2e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003f30:	4b09      	ldr	r3, [pc, #36]	@ (8003f58 <prvHeapInit+0xc0>)
 8003f32:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003f36:	601a      	str	r2, [r3, #0]
}
 8003f38:	bf00      	nop
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	200007e8 	.word	0x200007e8
 8003f48:	20005608 	.word	0x20005608
 8003f4c:	20005610 	.word	0x20005610
 8003f50:	20005618 	.word	0x20005618
 8003f54:	20005614 	.word	0x20005614
 8003f58:	2000561c 	.word	0x2000561c

08003f5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003f64:	4b28      	ldr	r3, [pc, #160]	@ (8004008 <prvInsertBlockIntoFreeList+0xac>)
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	e002      	b.n	8003f70 <prvInsertBlockIntoFreeList+0x14>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d8f7      	bhi.n	8003f6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	4413      	add	r3, r2
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d108      	bne.n	8003f9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	441a      	add	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	441a      	add	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d118      	bne.n	8003fe4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	4b15      	ldr	r3, [pc, #84]	@ (800400c <prvInsertBlockIntoFreeList+0xb0>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d00d      	beq.n	8003fda <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	441a      	add	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	e008      	b.n	8003fec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003fda:	4b0c      	ldr	r3, [pc, #48]	@ (800400c <prvInsertBlockIntoFreeList+0xb0>)
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	e003      	b.n	8003fec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d002      	beq.n	8003ffa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ffa:	bf00      	nop
 8003ffc:	3714      	adds	r7, #20
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	20005608 	.word	0x20005608
 800400c:	20005610 	.word	0x20005610

08004010 <memset>:
 8004010:	4402      	add	r2, r0
 8004012:	4603      	mov	r3, r0
 8004014:	4293      	cmp	r3, r2
 8004016:	d100      	bne.n	800401a <memset+0xa>
 8004018:	4770      	bx	lr
 800401a:	f803 1b01 	strb.w	r1, [r3], #1
 800401e:	e7f9      	b.n	8004014 <memset+0x4>

08004020 <_reclaim_reent>:
 8004020:	4b29      	ldr	r3, [pc, #164]	@ (80040c8 <_reclaim_reent+0xa8>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4283      	cmp	r3, r0
 8004026:	b570      	push	{r4, r5, r6, lr}
 8004028:	4604      	mov	r4, r0
 800402a:	d04b      	beq.n	80040c4 <_reclaim_reent+0xa4>
 800402c:	69c3      	ldr	r3, [r0, #28]
 800402e:	b1ab      	cbz	r3, 800405c <_reclaim_reent+0x3c>
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	b16b      	cbz	r3, 8004050 <_reclaim_reent+0x30>
 8004034:	2500      	movs	r5, #0
 8004036:	69e3      	ldr	r3, [r4, #28]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	5959      	ldr	r1, [r3, r5]
 800403c:	2900      	cmp	r1, #0
 800403e:	d13b      	bne.n	80040b8 <_reclaim_reent+0x98>
 8004040:	3504      	adds	r5, #4
 8004042:	2d80      	cmp	r5, #128	@ 0x80
 8004044:	d1f7      	bne.n	8004036 <_reclaim_reent+0x16>
 8004046:	69e3      	ldr	r3, [r4, #28]
 8004048:	4620      	mov	r0, r4
 800404a:	68d9      	ldr	r1, [r3, #12]
 800404c:	f000 f864 	bl	8004118 <_free_r>
 8004050:	69e3      	ldr	r3, [r4, #28]
 8004052:	6819      	ldr	r1, [r3, #0]
 8004054:	b111      	cbz	r1, 800405c <_reclaim_reent+0x3c>
 8004056:	4620      	mov	r0, r4
 8004058:	f000 f85e 	bl	8004118 <_free_r>
 800405c:	6961      	ldr	r1, [r4, #20]
 800405e:	b111      	cbz	r1, 8004066 <_reclaim_reent+0x46>
 8004060:	4620      	mov	r0, r4
 8004062:	f000 f859 	bl	8004118 <_free_r>
 8004066:	69e1      	ldr	r1, [r4, #28]
 8004068:	b111      	cbz	r1, 8004070 <_reclaim_reent+0x50>
 800406a:	4620      	mov	r0, r4
 800406c:	f000 f854 	bl	8004118 <_free_r>
 8004070:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004072:	b111      	cbz	r1, 800407a <_reclaim_reent+0x5a>
 8004074:	4620      	mov	r0, r4
 8004076:	f000 f84f 	bl	8004118 <_free_r>
 800407a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800407c:	b111      	cbz	r1, 8004084 <_reclaim_reent+0x64>
 800407e:	4620      	mov	r0, r4
 8004080:	f000 f84a 	bl	8004118 <_free_r>
 8004084:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004086:	b111      	cbz	r1, 800408e <_reclaim_reent+0x6e>
 8004088:	4620      	mov	r0, r4
 800408a:	f000 f845 	bl	8004118 <_free_r>
 800408e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004090:	b111      	cbz	r1, 8004098 <_reclaim_reent+0x78>
 8004092:	4620      	mov	r0, r4
 8004094:	f000 f840 	bl	8004118 <_free_r>
 8004098:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800409a:	b111      	cbz	r1, 80040a2 <_reclaim_reent+0x82>
 800409c:	4620      	mov	r0, r4
 800409e:	f000 f83b 	bl	8004118 <_free_r>
 80040a2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80040a4:	b111      	cbz	r1, 80040ac <_reclaim_reent+0x8c>
 80040a6:	4620      	mov	r0, r4
 80040a8:	f000 f836 	bl	8004118 <_free_r>
 80040ac:	6a23      	ldr	r3, [r4, #32]
 80040ae:	b14b      	cbz	r3, 80040c4 <_reclaim_reent+0xa4>
 80040b0:	4620      	mov	r0, r4
 80040b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80040b6:	4718      	bx	r3
 80040b8:	680e      	ldr	r6, [r1, #0]
 80040ba:	4620      	mov	r0, r4
 80040bc:	f000 f82c 	bl	8004118 <_free_r>
 80040c0:	4631      	mov	r1, r6
 80040c2:	e7bb      	b.n	800403c <_reclaim_reent+0x1c>
 80040c4:	bd70      	pop	{r4, r5, r6, pc}
 80040c6:	bf00      	nop
 80040c8:	20000010 	.word	0x20000010

080040cc <__libc_init_array>:
 80040cc:	b570      	push	{r4, r5, r6, lr}
 80040ce:	4d0d      	ldr	r5, [pc, #52]	@ (8004104 <__libc_init_array+0x38>)
 80040d0:	4c0d      	ldr	r4, [pc, #52]	@ (8004108 <__libc_init_array+0x3c>)
 80040d2:	1b64      	subs	r4, r4, r5
 80040d4:	10a4      	asrs	r4, r4, #2
 80040d6:	2600      	movs	r6, #0
 80040d8:	42a6      	cmp	r6, r4
 80040da:	d109      	bne.n	80040f0 <__libc_init_array+0x24>
 80040dc:	4d0b      	ldr	r5, [pc, #44]	@ (800410c <__libc_init_array+0x40>)
 80040de:	4c0c      	ldr	r4, [pc, #48]	@ (8004110 <__libc_init_array+0x44>)
 80040e0:	f000 f870 	bl	80041c4 <_init>
 80040e4:	1b64      	subs	r4, r4, r5
 80040e6:	10a4      	asrs	r4, r4, #2
 80040e8:	2600      	movs	r6, #0
 80040ea:	42a6      	cmp	r6, r4
 80040ec:	d105      	bne.n	80040fa <__libc_init_array+0x2e>
 80040ee:	bd70      	pop	{r4, r5, r6, pc}
 80040f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80040f4:	4798      	blx	r3
 80040f6:	3601      	adds	r6, #1
 80040f8:	e7ee      	b.n	80040d8 <__libc_init_array+0xc>
 80040fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80040fe:	4798      	blx	r3
 8004100:	3601      	adds	r6, #1
 8004102:	e7f2      	b.n	80040ea <__libc_init_array+0x1e>
 8004104:	08004250 	.word	0x08004250
 8004108:	08004250 	.word	0x08004250
 800410c:	08004250 	.word	0x08004250
 8004110:	08004254 	.word	0x08004254

08004114 <__retarget_lock_acquire_recursive>:
 8004114:	4770      	bx	lr

08004116 <__retarget_lock_release_recursive>:
 8004116:	4770      	bx	lr

08004118 <_free_r>:
 8004118:	b538      	push	{r3, r4, r5, lr}
 800411a:	4605      	mov	r5, r0
 800411c:	2900      	cmp	r1, #0
 800411e:	d041      	beq.n	80041a4 <_free_r+0x8c>
 8004120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004124:	1f0c      	subs	r4, r1, #4
 8004126:	2b00      	cmp	r3, #0
 8004128:	bfb8      	it	lt
 800412a:	18e4      	addlt	r4, r4, r3
 800412c:	f000 f83e 	bl	80041ac <__malloc_lock>
 8004130:	4a1d      	ldr	r2, [pc, #116]	@ (80041a8 <_free_r+0x90>)
 8004132:	6813      	ldr	r3, [r2, #0]
 8004134:	b933      	cbnz	r3, 8004144 <_free_r+0x2c>
 8004136:	6063      	str	r3, [r4, #4]
 8004138:	6014      	str	r4, [r2, #0]
 800413a:	4628      	mov	r0, r5
 800413c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004140:	f000 b83a 	b.w	80041b8 <__malloc_unlock>
 8004144:	42a3      	cmp	r3, r4
 8004146:	d908      	bls.n	800415a <_free_r+0x42>
 8004148:	6820      	ldr	r0, [r4, #0]
 800414a:	1821      	adds	r1, r4, r0
 800414c:	428b      	cmp	r3, r1
 800414e:	bf01      	itttt	eq
 8004150:	6819      	ldreq	r1, [r3, #0]
 8004152:	685b      	ldreq	r3, [r3, #4]
 8004154:	1809      	addeq	r1, r1, r0
 8004156:	6021      	streq	r1, [r4, #0]
 8004158:	e7ed      	b.n	8004136 <_free_r+0x1e>
 800415a:	461a      	mov	r2, r3
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	b10b      	cbz	r3, 8004164 <_free_r+0x4c>
 8004160:	42a3      	cmp	r3, r4
 8004162:	d9fa      	bls.n	800415a <_free_r+0x42>
 8004164:	6811      	ldr	r1, [r2, #0]
 8004166:	1850      	adds	r0, r2, r1
 8004168:	42a0      	cmp	r0, r4
 800416a:	d10b      	bne.n	8004184 <_free_r+0x6c>
 800416c:	6820      	ldr	r0, [r4, #0]
 800416e:	4401      	add	r1, r0
 8004170:	1850      	adds	r0, r2, r1
 8004172:	4283      	cmp	r3, r0
 8004174:	6011      	str	r1, [r2, #0]
 8004176:	d1e0      	bne.n	800413a <_free_r+0x22>
 8004178:	6818      	ldr	r0, [r3, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	6053      	str	r3, [r2, #4]
 800417e:	4408      	add	r0, r1
 8004180:	6010      	str	r0, [r2, #0]
 8004182:	e7da      	b.n	800413a <_free_r+0x22>
 8004184:	d902      	bls.n	800418c <_free_r+0x74>
 8004186:	230c      	movs	r3, #12
 8004188:	602b      	str	r3, [r5, #0]
 800418a:	e7d6      	b.n	800413a <_free_r+0x22>
 800418c:	6820      	ldr	r0, [r4, #0]
 800418e:	1821      	adds	r1, r4, r0
 8004190:	428b      	cmp	r3, r1
 8004192:	bf04      	itt	eq
 8004194:	6819      	ldreq	r1, [r3, #0]
 8004196:	685b      	ldreq	r3, [r3, #4]
 8004198:	6063      	str	r3, [r4, #4]
 800419a:	bf04      	itt	eq
 800419c:	1809      	addeq	r1, r1, r0
 800419e:	6021      	streq	r1, [r4, #0]
 80041a0:	6054      	str	r4, [r2, #4]
 80041a2:	e7ca      	b.n	800413a <_free_r+0x22>
 80041a4:	bd38      	pop	{r3, r4, r5, pc}
 80041a6:	bf00      	nop
 80041a8:	2000575c 	.word	0x2000575c

080041ac <__malloc_lock>:
 80041ac:	4801      	ldr	r0, [pc, #4]	@ (80041b4 <__malloc_lock+0x8>)
 80041ae:	f7ff bfb1 	b.w	8004114 <__retarget_lock_acquire_recursive>
 80041b2:	bf00      	nop
 80041b4:	20005758 	.word	0x20005758

080041b8 <__malloc_unlock>:
 80041b8:	4801      	ldr	r0, [pc, #4]	@ (80041c0 <__malloc_unlock+0x8>)
 80041ba:	f7ff bfac 	b.w	8004116 <__retarget_lock_release_recursive>
 80041be:	bf00      	nop
 80041c0:	20005758 	.word	0x20005758

080041c4 <_init>:
 80041c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c6:	bf00      	nop
 80041c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ca:	bc08      	pop	{r3}
 80041cc:	469e      	mov	lr, r3
 80041ce:	4770      	bx	lr

080041d0 <_fini>:
 80041d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d2:	bf00      	nop
 80041d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041d6:	bc08      	pop	{r3}
 80041d8:	469e      	mov	lr, r3
 80041da:	4770      	bx	lr
