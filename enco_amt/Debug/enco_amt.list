
enco_amt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b1c  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001ce4  08001ce4  00002ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001cf4  08001cf4  0000300c  2**0
                  CONTENTS
  4 .ARM          00000008  08001cf4  08001cf4  00002cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001cfc  08001cfc  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cfc  08001cfc  00002cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001d00  08001d00  00002d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001d04  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  08001d10  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08001d10  0000307c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008899  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001428  00000000  00000000  0000b8d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  0000cd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000756  00000000  00000000  0000d680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024ee7  00000000  00000000  0000ddd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a459  00000000  00000000  00032cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea17e  00000000  00000000  0003d116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00127294  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027c4  00000000  00000000  001272d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  00129a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08001ccc 	.word	0x08001ccc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08001ccc 	.word	0x08001ccc

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
static void MX_GPIO_Init(void);
static void MX_TIM1_Init(void);

/* Main function */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
    /* MCU Configuration--------------------------------------------------------*/
    HAL_Init();                 // Initialize the Hardware Abstraction Layer
 80004fe:	f000 f9a0 	bl	8000842 <HAL_Init>
    SystemClock_Config();        // Configure system clock
 8000502:	f000 f823 	bl	800054c <SystemClock_Config>
    MX_GPIO_Init();              // Initialize GPIO
 8000506:	f000 f8ad 	bl	8000664 <MX_GPIO_Init>
    MX_TIM1_Init();              // Initialize TIM1 for encoder mode
 800050a:	f000 f85b 	bl	80005c4 <MX_TIM1_Init>

    /* Start encoder interface for TIM1 */
    HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);  // Start encoder interface on TIM1
 800050e:	213c      	movs	r1, #60	@ 0x3c
 8000510:	480c      	ldr	r0, [pc, #48]	@ (8000544 <main+0x4c>)
 8000512:	f001 f9c1 	bl	8001898 <HAL_TIM_Encoder_Start>
//    char buffer[50];
    uint32_t lastTime = 0;  // To track the last time the encoder was read
 8000516:	2300      	movs	r3, #0
 8000518:	60fb      	str	r3, [r7, #12]
    uint32_t interval = 10000;  // 10 seconds in milliseconds
 800051a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800051e:	60bb      	str	r3, [r7, #8]

    /* Infinite loop */
    while (1)
    {
        uint32_t currentTime = HAL_GetTick();  // Get the current time in milliseconds
 8000520:	f000 f9e0 	bl	80008e4 <HAL_GetTick>
 8000524:	6078      	str	r0, [r7, #4]
        if (currentTime - lastTime >= interval) {
 8000526:	687a      	ldr	r2, [r7, #4]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	1ad3      	subs	r3, r2, r3
 800052c:	68ba      	ldr	r2, [r7, #8]
 800052e:	429a      	cmp	r2, r3
 8000530:	d8f6      	bhi.n	8000520 <main+0x28>
            // Read the current encoder value from TIM1
            encoderValue = __HAL_TIM_GET_COUNTER(&htim1);
 8000532:	4b04      	ldr	r3, [pc, #16]	@ (8000544 <main+0x4c>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000538:	461a      	mov	r2, r3
 800053a:	4b03      	ldr	r3, [pc, #12]	@ (8000548 <main+0x50>)
 800053c:	601a      	str	r2, [r3, #0]
//            sprintf(buffer, "Encoder Value: %ld\r\n", encoderValue);
            // Print the encoder value (you may use UART or another method to view the output)
//            printf("Encoder Value: %ld\r\n", encoderValue);
//            HAL_Delay(1000);

            lastTime = currentTime;  // Update lastTime to the current time
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	60fb      	str	r3, [r7, #12]
    {
 8000542:	e7ed      	b.n	8000520 <main+0x28>
 8000544:	20000028 	.word	0x20000028
 8000548:	20000074 	.word	0x20000074

0800054c <SystemClock_Config>:
    }
}

/* System Clock Configuration */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b092      	sub	sp, #72	@ 0x48
 8000550:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0318 	add.w	r3, r7, #24
 8000556:	2230      	movs	r2, #48	@ 0x30
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f001 fb8a 	bl	8001c74 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056e:	2302      	movs	r3, #2
 8000570:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000572:	2301      	movs	r3, #1
 8000574:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000576:	2310      	movs	r3, #16
 8000578:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057a:	2302      	movs	r3, #2
 800057c:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800057e:	2300      	movs	r3, #0
 8000580:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLM = 8;
 8000582:	2308      	movs	r3, #8
 8000584:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLN = 72;
 8000586:	2348      	movs	r3, #72	@ 0x48
 8000588:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800058a:	2302      	movs	r3, #2
 800058c:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLQ = 3;
 800058e:	2303      	movs	r3, #3
 8000590:	647b      	str	r3, [r7, #68]	@ 0x44

    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000592:	f107 0318 	add.w	r3, r7, #24
 8000596:	4618      	mov	r0, r3
 8000598:	f000 fc42 	bl	8000e20 <HAL_RCC_OscConfig>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800059c:	230f      	movs	r3, #15
 800059e:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2302      	movs	r3, #2
 80005a2:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005ac:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]

    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2102      	movs	r1, #2
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fed6 	bl	8001368 <HAL_RCC_ClockConfig>
}
 80005bc:	bf00      	nop
 80005be:	3748      	adds	r7, #72	@ 0x48
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <MX_TIM1_Init>:

/* TIM1 Initialization Function */
static void MX_TIM1_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08c      	sub	sp, #48	@ 0x30
 80005c8:	af00      	add	r7, sp, #0
    TIM_Encoder_InitTypeDef sConfig = {0};
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	2224      	movs	r2, #36	@ 0x24
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fb4e 	bl	8001c74 <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005d8:	463b      	mov	r3, r7
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]

    htim1.Instance = TIM1;
 80005e2:	4b1e      	ldr	r3, [pc, #120]	@ (800065c <MX_TIM1_Init+0x98>)
 80005e4:	4a1e      	ldr	r2, [pc, #120]	@ (8000660 <MX_TIM1_Init+0x9c>)
 80005e6:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 0;  // No prescaler
 80005e8:	4b1c      	ldr	r3, [pc, #112]	@ (800065c <MX_TIM1_Init+0x98>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;  // Counter counts up
 80005ee:	4b1b      	ldr	r3, [pc, #108]	@ (800065c <MX_TIM1_Init+0x98>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 65535;  // Maximum value for encoder counter
 80005f4:	4b19      	ldr	r3, [pc, #100]	@ (800065c <MX_TIM1_Init+0x98>)
 80005f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80005fa:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005fc:	4b17      	ldr	r3, [pc, #92]	@ (800065c <MX_TIM1_Init+0x98>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000602:	4b16      	ldr	r3, [pc, #88]	@ (800065c <MX_TIM1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]

    /* Configure TIM1 for encoder mode using both TI1 and TI2 */
    sConfig.EncoderMode = TIM_ENCODERMODE_TI12;  // Configure encoder mode using both TI1 and TI2
 8000608:	2303      	movs	r3, #3
 800060a:	60fb      	str	r3, [r7, #12]

    /* TI1 configuration */
    sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;  // Capture on rising edge of TI1
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]
    sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;  // TI1 is connected directly to input capture
 8000610:	2301      	movs	r3, #1
 8000612:	617b      	str	r3, [r7, #20]
    sConfig.IC1Prescaler = TIM_ICPSC_DIV1;  // No prescaler for TI1
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
    sConfig.IC1Filter = 0;  // No filter
 8000618:	2300      	movs	r3, #0
 800061a:	61fb      	str	r3, [r7, #28]

    /* TI2 configuration */
    sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;  // Capture on rising edge of TI2
 800061c:	2300      	movs	r3, #0
 800061e:	623b      	str	r3, [r7, #32]
    sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;  // TI2 is connected directly to input capture
 8000620:	2301      	movs	r3, #1
 8000622:	627b      	str	r3, [r7, #36]	@ 0x24
    sConfig.IC2Prescaler = TIM_ICPSC_DIV1;  // No prescaler for TI2
 8000624:	2300      	movs	r3, #0
 8000626:	62bb      	str	r3, [r7, #40]	@ 0x28
    sConfig.IC2Filter = 0;  // No filter
 8000628:	2300      	movs	r3, #0
 800062a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Initialize TIM1 with the encoder configuration */
    if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	4619      	mov	r1, r3
 8000632:	480a      	ldr	r0, [pc, #40]	@ (800065c <MX_TIM1_Init+0x98>)
 8000634:	f001 f88a 	bl	800174c <HAL_TIM_Encoder_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM1_Init+0x7e>
        Error_Handler();
 800063e:	f000 f829 	bl	8000694 <Error_Handler>
    }

    /* Master configuration (not used for this example) */
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000642:	2300      	movs	r3, #0
 8000644:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000646:	2300      	movs	r3, #0
 8000648:	60bb      	str	r3, [r7, #8]
    HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 800064a:	463b      	mov	r3, r7
 800064c:	4619      	mov	r1, r3
 800064e:	4803      	ldr	r0, [pc, #12]	@ (800065c <MX_TIM1_Init+0x98>)
 8000650:	f001 fa82 	bl	8001b58 <HAL_TIMEx_MasterConfigSynchronization>
}
 8000654:	bf00      	nop
 8000656:	3730      	adds	r7, #48	@ 0x30
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000028 	.word	0x20000028
 8000660:	40010000 	.word	0x40010000

08000664 <MX_GPIO_Init>:

/* GPIO Initialization Function */
static void MX_GPIO_Init(void)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800066a:	4b09      	ldr	r3, [pc, #36]	@ (8000690 <MX_GPIO_Init+0x2c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	4a08      	ldr	r2, [pc, #32]	@ (8000690 <MX_GPIO_Init+0x2c>)
 8000670:	f043 0310 	orr.w	r3, r3, #16
 8000674:	6313      	str	r3, [r2, #48]	@ 0x30
 8000676:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <MX_GPIO_Init+0x2c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	f003 0310 	and.w	r3, r3, #16
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800

08000694 <Error_Handler>:

/* Error Handler */
void Error_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
    while (1) {}
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <Error_Handler+0x4>

0800069c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80006a2:	4b0f      	ldr	r3, [pc, #60]	@ (80006e0 <HAL_MspInit+0x44>)
 80006a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a6:	4a0e      	ldr	r2, [pc, #56]	@ (80006e0 <HAL_MspInit+0x44>)
 80006a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80006ae:	4b0c      	ldr	r3, [pc, #48]	@ (80006e0 <HAL_MspInit+0x44>)
 80006b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ba:	4b09      	ldr	r3, [pc, #36]	@ (80006e0 <HAL_MspInit+0x44>)
 80006bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006be:	4a08      	ldr	r2, [pc, #32]	@ (80006e0 <HAL_MspInit+0x44>)
 80006c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80006c6:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <HAL_MspInit+0x44>)
 80006c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800

080006e4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	@ 0x28
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a17      	ldr	r2, [pc, #92]	@ (8000760 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d128      	bne.n	8000758 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000706:	4b17      	ldr	r3, [pc, #92]	@ (8000764 <HAL_TIM_Encoder_MspInit+0x80>)
 8000708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800070a:	4a16      	ldr	r2, [pc, #88]	@ (8000764 <HAL_TIM_Encoder_MspInit+0x80>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6453      	str	r3, [r2, #68]	@ 0x44
 8000712:	4b14      	ldr	r3, [pc, #80]	@ (8000764 <HAL_TIM_Encoder_MspInit+0x80>)
 8000714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800071e:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <HAL_TIM_Encoder_MspInit+0x80>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	4a10      	ldr	r2, [pc, #64]	@ (8000764 <HAL_TIM_Encoder_MspInit+0x80>)
 8000724:	f043 0310 	orr.w	r3, r3, #16
 8000728:	6313      	str	r3, [r2, #48]	@ 0x30
 800072a:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <HAL_TIM_Encoder_MspInit+0x80>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	f003 0310 	and.w	r3, r3, #16
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8000736:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800073a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073c:	2302      	movs	r3, #2
 800073e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000744:	2302      	movs	r3, #2
 8000746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000748:	2301      	movs	r3, #1
 800074a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	4619      	mov	r1, r3
 8000752:	4805      	ldr	r0, [pc, #20]	@ (8000768 <HAL_TIM_Encoder_MspInit+0x84>)
 8000754:	f000 f9b8 	bl	8000ac8 <HAL_GPIO_Init>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000758:	bf00      	nop
 800075a:	3728      	adds	r7, #40	@ 0x28
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40010000 	.word	0x40010000
 8000764:	40023800 	.word	0x40023800
 8000768:	40021000 	.word	0x40021000

0800076c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <NMI_Handler+0x4>

08000774 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <HardFault_Handler+0x4>

0800077c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <MemManage_Handler+0x4>

08000784 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <BusFault_Handler+0x4>

0800078c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <UsageFault_Handler+0x4>

08000794 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c2:	f000 f87b 	bl	80008bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007d0:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <SystemInit+0x20>)
 80007d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007d6:	4a05      	ldr	r2, [pc, #20]	@ (80007ec <SystemInit+0x20>)
 80007d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80007f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000828 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007f4:	f7ff ffea 	bl	80007cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007f8:	480c      	ldr	r0, [pc, #48]	@ (800082c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007fa:	490d      	ldr	r1, [pc, #52]	@ (8000830 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000834 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000800:	e002      	b.n	8000808 <LoopCopyDataInit>

08000802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000806:	3304      	adds	r3, #4

08000808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800080c:	d3f9      	bcc.n	8000802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080e:	4a0a      	ldr	r2, [pc, #40]	@ (8000838 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000810:	4c0a      	ldr	r4, [pc, #40]	@ (800083c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000814:	e001      	b.n	800081a <LoopFillZerobss>

08000816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000818:	3204      	adds	r2, #4

0800081a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800081c:	d3fb      	bcc.n	8000816 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800081e:	f001 fa31 	bl	8001c84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000822:	f7ff fe69 	bl	80004f8 <main>
  bx  lr    
 8000826:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000828:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800082c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000830:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000834:	08001d04 	.word	0x08001d04
  ldr r2, =_sbss
 8000838:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800083c:	2000007c 	.word	0x2000007c

08000840 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000840:	e7fe      	b.n	8000840 <ADC_IRQHandler>

08000842 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000846:	2003      	movs	r0, #3
 8000848:	f000 f90a 	bl	8000a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800084c:	2000      	movs	r0, #0
 800084e:	f000 f805 	bl	800085c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000852:	f7ff ff23 	bl	800069c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000856:	2300      	movs	r3, #0
}
 8000858:	4618      	mov	r0, r3
 800085a:	bd80      	pop	{r7, pc}

0800085c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000864:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <HAL_InitTick+0x54>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <HAL_InitTick+0x58>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	4619      	mov	r1, r3
 800086e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000872:	fbb3 f3f1 	udiv	r3, r3, r1
 8000876:	fbb2 f3f3 	udiv	r3, r2, r3
 800087a:	4618      	mov	r0, r3
 800087c:	f000 f917 	bl	8000aae <HAL_SYSTICK_Config>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000886:	2301      	movs	r3, #1
 8000888:	e00e      	b.n	80008a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2b0f      	cmp	r3, #15
 800088e:	d80a      	bhi.n	80008a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000890:	2200      	movs	r2, #0
 8000892:	6879      	ldr	r1, [r7, #4]
 8000894:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000898:	f000 f8ed 	bl	8000a76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800089c:	4a06      	ldr	r2, [pc, #24]	@ (80008b8 <HAL_InitTick+0x5c>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008a2:	2300      	movs	r3, #0
 80008a4:	e000      	b.n	80008a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000000 	.word	0x20000000
 80008b4:	20000008 	.word	0x20000008
 80008b8:	20000004 	.word	0x20000004

080008bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c0:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <HAL_IncTick+0x20>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	461a      	mov	r2, r3
 80008c6:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <HAL_IncTick+0x24>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4413      	add	r3, r2
 80008cc:	4a04      	ldr	r2, [pc, #16]	@ (80008e0 <HAL_IncTick+0x24>)
 80008ce:	6013      	str	r3, [r2, #0]
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	20000008 	.word	0x20000008
 80008e0:	20000078 	.word	0x20000078

080008e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  return uwTick;
 80008e8:	4b03      	ldr	r3, [pc, #12]	@ (80008f8 <HAL_GetTick+0x14>)
 80008ea:	681b      	ldr	r3, [r3, #0]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	20000078 	.word	0x20000078

080008fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f003 0307 	and.w	r3, r3, #7
 800090a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800090c:	4b0b      	ldr	r3, [pc, #44]	@ (800093c <__NVIC_SetPriorityGrouping+0x40>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000912:	68ba      	ldr	r2, [r7, #8]
 8000914:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000918:	4013      	ands	r3, r2
 800091a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000924:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <__NVIC_SetPriorityGrouping+0x44>)
 8000926:	4313      	orrs	r3, r2
 8000928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800092a:	4a04      	ldr	r2, [pc, #16]	@ (800093c <__NVIC_SetPriorityGrouping+0x40>)
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	60d3      	str	r3, [r2, #12]
}
 8000930:	bf00      	nop
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	e000ed00 	.word	0xe000ed00
 8000940:	05fa0000 	.word	0x05fa0000

08000944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000948:	4b04      	ldr	r3, [pc, #16]	@ (800095c <__NVIC_GetPriorityGrouping+0x18>)
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	0a1b      	lsrs	r3, r3, #8
 800094e:	f003 0307 	and.w	r3, r3, #7
}
 8000952:	4618      	mov	r0, r3
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	6039      	str	r1, [r7, #0]
 800096a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800096c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000970:	2b00      	cmp	r3, #0
 8000972:	db0a      	blt.n	800098a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	b2da      	uxtb	r2, r3
 8000978:	490c      	ldr	r1, [pc, #48]	@ (80009ac <__NVIC_SetPriority+0x4c>)
 800097a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097e:	0112      	lsls	r2, r2, #4
 8000980:	b2d2      	uxtb	r2, r2
 8000982:	440b      	add	r3, r1
 8000984:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000988:	e00a      	b.n	80009a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	b2da      	uxtb	r2, r3
 800098e:	4908      	ldr	r1, [pc, #32]	@ (80009b0 <__NVIC_SetPriority+0x50>)
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	f003 030f 	and.w	r3, r3, #15
 8000996:	3b04      	subs	r3, #4
 8000998:	0112      	lsls	r2, r2, #4
 800099a:	b2d2      	uxtb	r2, r2
 800099c:	440b      	add	r3, r1
 800099e:	761a      	strb	r2, [r3, #24]
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	e000e100 	.word	0xe000e100
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b089      	sub	sp, #36	@ 0x24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	f003 0307 	and.w	r3, r3, #7
 80009c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	f1c3 0307 	rsb	r3, r3, #7
 80009ce:	2b04      	cmp	r3, #4
 80009d0:	bf28      	it	cs
 80009d2:	2304      	movcs	r3, #4
 80009d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	3304      	adds	r3, #4
 80009da:	2b06      	cmp	r3, #6
 80009dc:	d902      	bls.n	80009e4 <NVIC_EncodePriority+0x30>
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	3b03      	subs	r3, #3
 80009e2:	e000      	b.n	80009e6 <NVIC_EncodePriority+0x32>
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80009ec:	69bb      	ldr	r3, [r7, #24]
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	43da      	mvns	r2, r3
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	401a      	ands	r2, r3
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009fc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	fa01 f303 	lsl.w	r3, r1, r3
 8000a06:	43d9      	mvns	r1, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a0c:	4313      	orrs	r3, r2
         );
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3724      	adds	r7, #36	@ 0x24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
	...

08000a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a2c:	d301      	bcc.n	8000a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e00f      	b.n	8000a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a32:	4a0a      	ldr	r2, [pc, #40]	@ (8000a5c <SysTick_Config+0x40>)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a3a:	210f      	movs	r1, #15
 8000a3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a40:	f7ff ff8e 	bl	8000960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a44:	4b05      	ldr	r3, [pc, #20]	@ (8000a5c <SysTick_Config+0x40>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a4a:	4b04      	ldr	r3, [pc, #16]	@ (8000a5c <SysTick_Config+0x40>)
 8000a4c:	2207      	movs	r2, #7
 8000a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	e000e010 	.word	0xe000e010

08000a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff ff47 	bl	80008fc <__NVIC_SetPriorityGrouping>
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b086      	sub	sp, #24
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	60b9      	str	r1, [r7, #8]
 8000a80:	607a      	str	r2, [r7, #4]
 8000a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a88:	f7ff ff5c 	bl	8000944 <__NVIC_GetPriorityGrouping>
 8000a8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	68b9      	ldr	r1, [r7, #8]
 8000a92:	6978      	ldr	r0, [r7, #20]
 8000a94:	f7ff ff8e 	bl	80009b4 <NVIC_EncodePriority>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a9e:	4611      	mov	r1, r2
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff ff5d 	bl	8000960 <__NVIC_SetPriority>
}
 8000aa6:	bf00      	nop
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f7ff ffb0 	bl	8000a1c <SysTick_Config>
 8000abc:	4603      	mov	r3, r0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b089      	sub	sp, #36	@ 0x24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
 8000ae6:	e175      	b.n	8000dd4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000ae8:	2201      	movs	r2, #1
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	697a      	ldr	r2, [r7, #20]
 8000af8:	4013      	ands	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	f040 8164 	bne.w	8000dce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	f003 0303 	and.w	r3, r3, #3
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d005      	beq.n	8000b1e <HAL_GPIO_Init+0x56>
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f003 0303 	and.w	r3, r3, #3
 8000b1a:	2b02      	cmp	r3, #2
 8000b1c:	d130      	bne.n	8000b80 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	2203      	movs	r2, #3
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	43db      	mvns	r3, r3
 8000b30:	69ba      	ldr	r2, [r7, #24]
 8000b32:	4013      	ands	r3, r2
 8000b34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	68da      	ldr	r2, [r3, #12]
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	69ba      	ldr	r2, [r7, #24]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	69ba      	ldr	r2, [r7, #24]
 8000b4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b54:	2201      	movs	r2, #1
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	69ba      	ldr	r2, [r7, #24]
 8000b60:	4013      	ands	r3, r2
 8000b62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	091b      	lsrs	r3, r3, #4
 8000b6a:	f003 0201 	and.w	r2, r3, #1
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	fa02 f303 	lsl.w	r3, r2, r3
 8000b74:	69ba      	ldr	r2, [r7, #24]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	69ba      	ldr	r2, [r7, #24]
 8000b7e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f003 0303 	and.w	r3, r3, #3
 8000b88:	2b03      	cmp	r3, #3
 8000b8a:	d017      	beq.n	8000bbc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	2203      	movs	r2, #3
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	689a      	ldr	r2, [r3, #8]
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f003 0303 	and.w	r3, r3, #3
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d123      	bne.n	8000c10 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	08da      	lsrs	r2, r3, #3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3208      	adds	r2, #8
 8000bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	f003 0307 	and.w	r3, r3, #7
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	220f      	movs	r2, #15
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	43db      	mvns	r3, r3
 8000be6:	69ba      	ldr	r2, [r7, #24]
 8000be8:	4013      	ands	r3, r2
 8000bea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	691a      	ldr	r2, [r3, #16]
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	08da      	lsrs	r2, r3, #3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	3208      	adds	r2, #8
 8000c0a:	69b9      	ldr	r1, [r7, #24]
 8000c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	2203      	movs	r2, #3
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	4013      	ands	r3, r2
 8000c26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f003 0203 	and.w	r2, r3, #3
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	f000 80be 	beq.w	8000dce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c52:	4b66      	ldr	r3, [pc, #408]	@ (8000dec <HAL_GPIO_Init+0x324>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c56:	4a65      	ldr	r2, [pc, #404]	@ (8000dec <HAL_GPIO_Init+0x324>)
 8000c58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c5e:	4b63      	ldr	r3, [pc, #396]	@ (8000dec <HAL_GPIO_Init+0x324>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000c6a:	4a61      	ldr	r2, [pc, #388]	@ (8000df0 <HAL_GPIO_Init+0x328>)
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	089b      	lsrs	r3, r3, #2
 8000c70:	3302      	adds	r3, #2
 8000c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	f003 0303 	and.w	r3, r3, #3
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	220f      	movs	r2, #15
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	43db      	mvns	r3, r3
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a58      	ldr	r2, [pc, #352]	@ (8000df4 <HAL_GPIO_Init+0x32c>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d037      	beq.n	8000d06 <HAL_GPIO_Init+0x23e>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a57      	ldr	r2, [pc, #348]	@ (8000df8 <HAL_GPIO_Init+0x330>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d031      	beq.n	8000d02 <HAL_GPIO_Init+0x23a>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a56      	ldr	r2, [pc, #344]	@ (8000dfc <HAL_GPIO_Init+0x334>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d02b      	beq.n	8000cfe <HAL_GPIO_Init+0x236>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a55      	ldr	r2, [pc, #340]	@ (8000e00 <HAL_GPIO_Init+0x338>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d025      	beq.n	8000cfa <HAL_GPIO_Init+0x232>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a54      	ldr	r2, [pc, #336]	@ (8000e04 <HAL_GPIO_Init+0x33c>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d01f      	beq.n	8000cf6 <HAL_GPIO_Init+0x22e>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a53      	ldr	r2, [pc, #332]	@ (8000e08 <HAL_GPIO_Init+0x340>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d019      	beq.n	8000cf2 <HAL_GPIO_Init+0x22a>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a52      	ldr	r2, [pc, #328]	@ (8000e0c <HAL_GPIO_Init+0x344>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d013      	beq.n	8000cee <HAL_GPIO_Init+0x226>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a51      	ldr	r2, [pc, #324]	@ (8000e10 <HAL_GPIO_Init+0x348>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d00d      	beq.n	8000cea <HAL_GPIO_Init+0x222>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a50      	ldr	r2, [pc, #320]	@ (8000e14 <HAL_GPIO_Init+0x34c>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d007      	beq.n	8000ce6 <HAL_GPIO_Init+0x21e>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a4f      	ldr	r2, [pc, #316]	@ (8000e18 <HAL_GPIO_Init+0x350>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d101      	bne.n	8000ce2 <HAL_GPIO_Init+0x21a>
 8000cde:	2309      	movs	r3, #9
 8000ce0:	e012      	b.n	8000d08 <HAL_GPIO_Init+0x240>
 8000ce2:	230a      	movs	r3, #10
 8000ce4:	e010      	b.n	8000d08 <HAL_GPIO_Init+0x240>
 8000ce6:	2308      	movs	r3, #8
 8000ce8:	e00e      	b.n	8000d08 <HAL_GPIO_Init+0x240>
 8000cea:	2307      	movs	r3, #7
 8000cec:	e00c      	b.n	8000d08 <HAL_GPIO_Init+0x240>
 8000cee:	2306      	movs	r3, #6
 8000cf0:	e00a      	b.n	8000d08 <HAL_GPIO_Init+0x240>
 8000cf2:	2305      	movs	r3, #5
 8000cf4:	e008      	b.n	8000d08 <HAL_GPIO_Init+0x240>
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	e006      	b.n	8000d08 <HAL_GPIO_Init+0x240>
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	e004      	b.n	8000d08 <HAL_GPIO_Init+0x240>
 8000cfe:	2302      	movs	r3, #2
 8000d00:	e002      	b.n	8000d08 <HAL_GPIO_Init+0x240>
 8000d02:	2301      	movs	r3, #1
 8000d04:	e000      	b.n	8000d08 <HAL_GPIO_Init+0x240>
 8000d06:	2300      	movs	r3, #0
 8000d08:	69fa      	ldr	r2, [r7, #28]
 8000d0a:	f002 0203 	and.w	r2, r2, #3
 8000d0e:	0092      	lsls	r2, r2, #2
 8000d10:	4093      	lsls	r3, r2
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d18:	4935      	ldr	r1, [pc, #212]	@ (8000df0 <HAL_GPIO_Init+0x328>)
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	089b      	lsrs	r3, r3, #2
 8000d1e:	3302      	adds	r3, #2
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d26:	4b3d      	ldr	r3, [pc, #244]	@ (8000e1c <HAL_GPIO_Init+0x354>)
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4013      	ands	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d003      	beq.n	8000d4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d4a:	4a34      	ldr	r2, [pc, #208]	@ (8000e1c <HAL_GPIO_Init+0x354>)
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d50:	4b32      	ldr	r3, [pc, #200]	@ (8000e1c <HAL_GPIO_Init+0x354>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d003      	beq.n	8000d74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d74:	4a29      	ldr	r2, [pc, #164]	@ (8000e1c <HAL_GPIO_Init+0x354>)
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d7a:	4b28      	ldr	r3, [pc, #160]	@ (8000e1c <HAL_GPIO_Init+0x354>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	43db      	mvns	r3, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4013      	ands	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d003      	beq.n	8000d9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d9e:	4a1f      	ldr	r2, [pc, #124]	@ (8000e1c <HAL_GPIO_Init+0x354>)
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000da4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e1c <HAL_GPIO_Init+0x354>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	43db      	mvns	r3, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4013      	ands	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d003      	beq.n	8000dc8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000dc8:	4a14      	ldr	r2, [pc, #80]	@ (8000e1c <HAL_GPIO_Init+0x354>)
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	61fb      	str	r3, [r7, #28]
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	2b0f      	cmp	r3, #15
 8000dd8:	f67f ae86 	bls.w	8000ae8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
 8000de0:	3724      	adds	r7, #36	@ 0x24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40013800 	.word	0x40013800
 8000df4:	40020000 	.word	0x40020000
 8000df8:	40020400 	.word	0x40020400
 8000dfc:	40020800 	.word	0x40020800
 8000e00:	40020c00 	.word	0x40020c00
 8000e04:	40021000 	.word	0x40021000
 8000e08:	40021400 	.word	0x40021400
 8000e0c:	40021800 	.word	0x40021800
 8000e10:	40021c00 	.word	0x40021c00
 8000e14:	40022000 	.word	0x40022000
 8000e18:	40022400 	.word	0x40022400
 8000e1c:	40013c00 	.word	0x40013c00

08000e20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d101      	bne.n	8000e36 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e291      	b.n	800135a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f000 8087 	beq.w	8000f52 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e44:	4b96      	ldr	r3, [pc, #600]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	f003 030c 	and.w	r3, r3, #12
 8000e4c:	2b04      	cmp	r3, #4
 8000e4e:	d00c      	beq.n	8000e6a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e50:	4b93      	ldr	r3, [pc, #588]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	f003 030c 	and.w	r3, r3, #12
 8000e58:	2b08      	cmp	r3, #8
 8000e5a:	d112      	bne.n	8000e82 <HAL_RCC_OscConfig+0x62>
 8000e5c:	4b90      	ldr	r3, [pc, #576]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000e68:	d10b      	bne.n	8000e82 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e6a:	4b8d      	ldr	r3, [pc, #564]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d06c      	beq.n	8000f50 <HAL_RCC_OscConfig+0x130>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d168      	bne.n	8000f50 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e26b      	b.n	800135a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e8a:	d106      	bne.n	8000e9a <HAL_RCC_OscConfig+0x7a>
 8000e8c:	4b84      	ldr	r3, [pc, #528]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a83      	ldr	r2, [pc, #524]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8000e92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	e02e      	b.n	8000ef8 <HAL_RCC_OscConfig+0xd8>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d10c      	bne.n	8000ebc <HAL_RCC_OscConfig+0x9c>
 8000ea2:	4b7f      	ldr	r3, [pc, #508]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a7e      	ldr	r2, [pc, #504]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8000ea8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000eac:	6013      	str	r3, [r2, #0]
 8000eae:	4b7c      	ldr	r3, [pc, #496]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a7b      	ldr	r2, [pc, #492]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8000eb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000eb8:	6013      	str	r3, [r2, #0]
 8000eba:	e01d      	b.n	8000ef8 <HAL_RCC_OscConfig+0xd8>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ec4:	d10c      	bne.n	8000ee0 <HAL_RCC_OscConfig+0xc0>
 8000ec6:	4b76      	ldr	r3, [pc, #472]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a75      	ldr	r2, [pc, #468]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8000ecc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ed0:	6013      	str	r3, [r2, #0]
 8000ed2:	4b73      	ldr	r3, [pc, #460]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a72      	ldr	r2, [pc, #456]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8000ed8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	e00b      	b.n	8000ef8 <HAL_RCC_OscConfig+0xd8>
 8000ee0:	4b6f      	ldr	r3, [pc, #444]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a6e      	ldr	r2, [pc, #440]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8000ee6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000eea:	6013      	str	r3, [r2, #0]
 8000eec:	4b6c      	ldr	r3, [pc, #432]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a6b      	ldr	r2, [pc, #428]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8000ef2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ef6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d013      	beq.n	8000f28 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f00:	f7ff fcf0 	bl	80008e4 <HAL_GetTick>
 8000f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f06:	e008      	b.n	8000f1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f08:	f7ff fcec 	bl	80008e4 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	2b64      	cmp	r3, #100	@ 0x64
 8000f14:	d901      	bls.n	8000f1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f16:	2303      	movs	r3, #3
 8000f18:	e21f      	b.n	800135a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f1a:	4b61      	ldr	r3, [pc, #388]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d0f0      	beq.n	8000f08 <HAL_RCC_OscConfig+0xe8>
 8000f26:	e014      	b.n	8000f52 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f28:	f7ff fcdc 	bl	80008e4 <HAL_GetTick>
 8000f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f2e:	e008      	b.n	8000f42 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f30:	f7ff fcd8 	bl	80008e4 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b64      	cmp	r3, #100	@ 0x64
 8000f3c:	d901      	bls.n	8000f42 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e20b      	b.n	800135a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f42:	4b57      	ldr	r3, [pc, #348]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d1f0      	bne.n	8000f30 <HAL_RCC_OscConfig+0x110>
 8000f4e:	e000      	b.n	8000f52 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d069      	beq.n	8001032 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f5e:	4b50      	ldr	r3, [pc, #320]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	f003 030c 	and.w	r3, r3, #12
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d00b      	beq.n	8000f82 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f6a:	4b4d      	ldr	r3, [pc, #308]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	f003 030c 	and.w	r3, r3, #12
 8000f72:	2b08      	cmp	r3, #8
 8000f74:	d11c      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x190>
 8000f76:	4b4a      	ldr	r3, [pc, #296]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d116      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f82:	4b47      	ldr	r3, [pc, #284]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d005      	beq.n	8000f9a <HAL_RCC_OscConfig+0x17a>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d001      	beq.n	8000f9a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e1df      	b.n	800135a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f9a:	4b41      	ldr	r3, [pc, #260]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	691b      	ldr	r3, [r3, #16]
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	493d      	ldr	r1, [pc, #244]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8000faa:	4313      	orrs	r3, r2
 8000fac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fae:	e040      	b.n	8001032 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d023      	beq.n	8001000 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fb8:	4b39      	ldr	r3, [pc, #228]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a38      	ldr	r2, [pc, #224]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fc8e 	bl	80008e4 <HAL_GetTick>
 8000fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fca:	e008      	b.n	8000fde <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fcc:	f7ff fc8a 	bl	80008e4 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e1bd      	b.n	800135a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fde:	4b30      	ldr	r3, [pc, #192]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0f0      	beq.n	8000fcc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fea:	4b2d      	ldr	r3, [pc, #180]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	691b      	ldr	r3, [r3, #16]
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	4929      	ldr	r1, [pc, #164]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	600b      	str	r3, [r1, #0]
 8000ffe:	e018      	b.n	8001032 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001000:	4b27      	ldr	r3, [pc, #156]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a26      	ldr	r2, [pc, #152]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8001006:	f023 0301 	bic.w	r3, r3, #1
 800100a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800100c:	f7ff fc6a 	bl	80008e4 <HAL_GetTick>
 8001010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001012:	e008      	b.n	8001026 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001014:	f7ff fc66 	bl	80008e4 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b02      	cmp	r3, #2
 8001020:	d901      	bls.n	8001026 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e199      	b.n	800135a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001026:	4b1e      	ldr	r3, [pc, #120]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1f0      	bne.n	8001014 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	2b00      	cmp	r3, #0
 800103c:	d038      	beq.n	80010b0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d019      	beq.n	800107a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001046:	4b16      	ldr	r3, [pc, #88]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8001048:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800104a:	4a15      	ldr	r2, [pc, #84]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001052:	f7ff fc47 	bl	80008e4 <HAL_GetTick>
 8001056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001058:	e008      	b.n	800106c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800105a:	f7ff fc43 	bl	80008e4 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d901      	bls.n	800106c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e176      	b.n	800135a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800106c:	4b0c      	ldr	r3, [pc, #48]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 800106e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	2b00      	cmp	r3, #0
 8001076:	d0f0      	beq.n	800105a <HAL_RCC_OscConfig+0x23a>
 8001078:	e01a      	b.n	80010b0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800107a:	4b09      	ldr	r3, [pc, #36]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 800107c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800107e:	4a08      	ldr	r2, [pc, #32]	@ (80010a0 <HAL_RCC_OscConfig+0x280>)
 8001080:	f023 0301 	bic.w	r3, r3, #1
 8001084:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001086:	f7ff fc2d 	bl	80008e4 <HAL_GetTick>
 800108a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800108c:	e00a      	b.n	80010a4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800108e:	f7ff fc29 	bl	80008e4 <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d903      	bls.n	80010a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e15c      	b.n	800135a <HAL_RCC_OscConfig+0x53a>
 80010a0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010a4:	4b91      	ldr	r3, [pc, #580]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 80010a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1ee      	bne.n	800108e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0304 	and.w	r3, r3, #4
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f000 80a4 	beq.w	8001206 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010be:	4b8b      	ldr	r3, [pc, #556]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d10d      	bne.n	80010e6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ca:	4b88      	ldr	r3, [pc, #544]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ce:	4a87      	ldr	r2, [pc, #540]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 80010d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010d6:	4b85      	ldr	r3, [pc, #532]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010e2:	2301      	movs	r3, #1
 80010e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010e6:	4b82      	ldr	r3, [pc, #520]	@ (80012f0 <HAL_RCC_OscConfig+0x4d0>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d118      	bne.n	8001124 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80010f2:	4b7f      	ldr	r3, [pc, #508]	@ (80012f0 <HAL_RCC_OscConfig+0x4d0>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a7e      	ldr	r2, [pc, #504]	@ (80012f0 <HAL_RCC_OscConfig+0x4d0>)
 80010f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010fe:	f7ff fbf1 	bl	80008e4 <HAL_GetTick>
 8001102:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001104:	e008      	b.n	8001118 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001106:	f7ff fbed 	bl	80008e4 <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b64      	cmp	r3, #100	@ 0x64
 8001112:	d901      	bls.n	8001118 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e120      	b.n	800135a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001118:	4b75      	ldr	r3, [pc, #468]	@ (80012f0 <HAL_RCC_OscConfig+0x4d0>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001120:	2b00      	cmp	r3, #0
 8001122:	d0f0      	beq.n	8001106 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d106      	bne.n	800113a <HAL_RCC_OscConfig+0x31a>
 800112c:	4b6f      	ldr	r3, [pc, #444]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 800112e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001130:	4a6e      	ldr	r2, [pc, #440]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 8001132:	f043 0301 	orr.w	r3, r3, #1
 8001136:	6713      	str	r3, [r2, #112]	@ 0x70
 8001138:	e02d      	b.n	8001196 <HAL_RCC_OscConfig+0x376>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d10c      	bne.n	800115c <HAL_RCC_OscConfig+0x33c>
 8001142:	4b6a      	ldr	r3, [pc, #424]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 8001144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001146:	4a69      	ldr	r2, [pc, #420]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 8001148:	f023 0301 	bic.w	r3, r3, #1
 800114c:	6713      	str	r3, [r2, #112]	@ 0x70
 800114e:	4b67      	ldr	r3, [pc, #412]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 8001150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001152:	4a66      	ldr	r2, [pc, #408]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 8001154:	f023 0304 	bic.w	r3, r3, #4
 8001158:	6713      	str	r3, [r2, #112]	@ 0x70
 800115a:	e01c      	b.n	8001196 <HAL_RCC_OscConfig+0x376>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	2b05      	cmp	r3, #5
 8001162:	d10c      	bne.n	800117e <HAL_RCC_OscConfig+0x35e>
 8001164:	4b61      	ldr	r3, [pc, #388]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 8001166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001168:	4a60      	ldr	r2, [pc, #384]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 800116a:	f043 0304 	orr.w	r3, r3, #4
 800116e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001170:	4b5e      	ldr	r3, [pc, #376]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 8001172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001174:	4a5d      	ldr	r2, [pc, #372]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	6713      	str	r3, [r2, #112]	@ 0x70
 800117c:	e00b      	b.n	8001196 <HAL_RCC_OscConfig+0x376>
 800117e:	4b5b      	ldr	r3, [pc, #364]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 8001180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001182:	4a5a      	ldr	r2, [pc, #360]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 8001184:	f023 0301 	bic.w	r3, r3, #1
 8001188:	6713      	str	r3, [r2, #112]	@ 0x70
 800118a:	4b58      	ldr	r3, [pc, #352]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 800118c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800118e:	4a57      	ldr	r2, [pc, #348]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 8001190:	f023 0304 	bic.w	r3, r3, #4
 8001194:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d015      	beq.n	80011ca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800119e:	f7ff fba1 	bl	80008e4 <HAL_GetTick>
 80011a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011a4:	e00a      	b.n	80011bc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011a6:	f7ff fb9d 	bl	80008e4 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d901      	bls.n	80011bc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e0ce      	b.n	800135a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011bc:	4b4b      	ldr	r3, [pc, #300]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 80011be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0ee      	beq.n	80011a6 <HAL_RCC_OscConfig+0x386>
 80011c8:	e014      	b.n	80011f4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ca:	f7ff fb8b 	bl	80008e4 <HAL_GetTick>
 80011ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011d0:	e00a      	b.n	80011e8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011d2:	f7ff fb87 	bl	80008e4 <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d901      	bls.n	80011e8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e0b8      	b.n	800135a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011e8:	4b40      	ldr	r3, [pc, #256]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 80011ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1ee      	bne.n	80011d2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80011f4:	7dfb      	ldrb	r3, [r7, #23]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d105      	bne.n	8001206 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011fa:	4b3c      	ldr	r3, [pc, #240]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fe:	4a3b      	ldr	r2, [pc, #236]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 8001200:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001204:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	2b00      	cmp	r3, #0
 800120c:	f000 80a4 	beq.w	8001358 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001210:	4b36      	ldr	r3, [pc, #216]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f003 030c 	and.w	r3, r3, #12
 8001218:	2b08      	cmp	r3, #8
 800121a:	d06b      	beq.n	80012f4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	2b02      	cmp	r3, #2
 8001222:	d149      	bne.n	80012b8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001224:	4b31      	ldr	r3, [pc, #196]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a30      	ldr	r2, [pc, #192]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 800122a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800122e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001230:	f7ff fb58 	bl	80008e4 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001238:	f7ff fb54 	bl	80008e4 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e087      	b.n	800135a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800124a:	4b28      	ldr	r3, [pc, #160]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f0      	bne.n	8001238 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69da      	ldr	r2, [r3, #28]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a1b      	ldr	r3, [r3, #32]
 800125e:	431a      	orrs	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001264:	019b      	lsls	r3, r3, #6
 8001266:	431a      	orrs	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800126c:	085b      	lsrs	r3, r3, #1
 800126e:	3b01      	subs	r3, #1
 8001270:	041b      	lsls	r3, r3, #16
 8001272:	431a      	orrs	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001278:	061b      	lsls	r3, r3, #24
 800127a:	4313      	orrs	r3, r2
 800127c:	4a1b      	ldr	r2, [pc, #108]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 800127e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001282:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001284:	4b19      	ldr	r3, [pc, #100]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a18      	ldr	r2, [pc, #96]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 800128a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800128e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001290:	f7ff fb28 	bl	80008e4 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001298:	f7ff fb24 	bl	80008e4 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e057      	b.n	800135a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012aa:	4b10      	ldr	r3, [pc, #64]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0f0      	beq.n	8001298 <HAL_RCC_OscConfig+0x478>
 80012b6:	e04f      	b.n	8001358 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012b8:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0b      	ldr	r2, [pc, #44]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 80012be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80012c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c4:	f7ff fb0e 	bl	80008e4 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012cc:	f7ff fb0a 	bl	80008e4 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e03d      	b.n	800135a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012de:	4b03      	ldr	r3, [pc, #12]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f0      	bne.n	80012cc <HAL_RCC_OscConfig+0x4ac>
 80012ea:	e035      	b.n	8001358 <HAL_RCC_OscConfig+0x538>
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80012f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001364 <HAL_RCC_OscConfig+0x544>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d028      	beq.n	8001354 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800130c:	429a      	cmp	r2, r3
 800130e:	d121      	bne.n	8001354 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800131a:	429a      	cmp	r2, r3
 800131c:	d11a      	bne.n	8001354 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001324:	4013      	ands	r3, r2
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800132a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800132c:	4293      	cmp	r3, r2
 800132e:	d111      	bne.n	8001354 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800133a:	085b      	lsrs	r3, r3, #1
 800133c:	3b01      	subs	r3, #1
 800133e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001340:	429a      	cmp	r2, r3
 8001342:	d107      	bne.n	8001354 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800134e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001350:	429a      	cmp	r2, r3
 8001352:	d001      	beq.n	8001358 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e000      	b.n	800135a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800

08001368 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d101      	bne.n	8001380 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e0d0      	b.n	8001522 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001380:	4b6a      	ldr	r3, [pc, #424]	@ (800152c <HAL_RCC_ClockConfig+0x1c4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 030f 	and.w	r3, r3, #15
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	429a      	cmp	r2, r3
 800138c:	d910      	bls.n	80013b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800138e:	4b67      	ldr	r3, [pc, #412]	@ (800152c <HAL_RCC_ClockConfig+0x1c4>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f023 020f 	bic.w	r2, r3, #15
 8001396:	4965      	ldr	r1, [pc, #404]	@ (800152c <HAL_RCC_ClockConfig+0x1c4>)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	4313      	orrs	r3, r2
 800139c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800139e:	4b63      	ldr	r3, [pc, #396]	@ (800152c <HAL_RCC_ClockConfig+0x1c4>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d001      	beq.n	80013b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e0b8      	b.n	8001522 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d020      	beq.n	80013fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d005      	beq.n	80013d4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013c8:	4b59      	ldr	r3, [pc, #356]	@ (8001530 <HAL_RCC_ClockConfig+0x1c8>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	4a58      	ldr	r2, [pc, #352]	@ (8001530 <HAL_RCC_ClockConfig+0x1c8>)
 80013ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80013d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0308 	and.w	r3, r3, #8
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d005      	beq.n	80013ec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013e0:	4b53      	ldr	r3, [pc, #332]	@ (8001530 <HAL_RCC_ClockConfig+0x1c8>)
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	4a52      	ldr	r2, [pc, #328]	@ (8001530 <HAL_RCC_ClockConfig+0x1c8>)
 80013e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80013ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013ec:	4b50      	ldr	r3, [pc, #320]	@ (8001530 <HAL_RCC_ClockConfig+0x1c8>)
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	494d      	ldr	r1, [pc, #308]	@ (8001530 <HAL_RCC_ClockConfig+0x1c8>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d040      	beq.n	800148c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d107      	bne.n	8001422 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001412:	4b47      	ldr	r3, [pc, #284]	@ (8001530 <HAL_RCC_ClockConfig+0x1c8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d115      	bne.n	800144a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e07f      	b.n	8001522 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2b02      	cmp	r3, #2
 8001428:	d107      	bne.n	800143a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800142a:	4b41      	ldr	r3, [pc, #260]	@ (8001530 <HAL_RCC_ClockConfig+0x1c8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d109      	bne.n	800144a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e073      	b.n	8001522 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143a:	4b3d      	ldr	r3, [pc, #244]	@ (8001530 <HAL_RCC_ClockConfig+0x1c8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e06b      	b.n	8001522 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800144a:	4b39      	ldr	r3, [pc, #228]	@ (8001530 <HAL_RCC_ClockConfig+0x1c8>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f023 0203 	bic.w	r2, r3, #3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	4936      	ldr	r1, [pc, #216]	@ (8001530 <HAL_RCC_ClockConfig+0x1c8>)
 8001458:	4313      	orrs	r3, r2
 800145a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800145c:	f7ff fa42 	bl	80008e4 <HAL_GetTick>
 8001460:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001462:	e00a      	b.n	800147a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001464:	f7ff fa3e 	bl	80008e4 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001472:	4293      	cmp	r3, r2
 8001474:	d901      	bls.n	800147a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e053      	b.n	8001522 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800147a:	4b2d      	ldr	r3, [pc, #180]	@ (8001530 <HAL_RCC_ClockConfig+0x1c8>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 020c 	and.w	r2, r3, #12
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	429a      	cmp	r2, r3
 800148a:	d1eb      	bne.n	8001464 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800148c:	4b27      	ldr	r3, [pc, #156]	@ (800152c <HAL_RCC_ClockConfig+0x1c4>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 030f 	and.w	r3, r3, #15
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	429a      	cmp	r2, r3
 8001498:	d210      	bcs.n	80014bc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800149a:	4b24      	ldr	r3, [pc, #144]	@ (800152c <HAL_RCC_ClockConfig+0x1c4>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f023 020f 	bic.w	r2, r3, #15
 80014a2:	4922      	ldr	r1, [pc, #136]	@ (800152c <HAL_RCC_ClockConfig+0x1c4>)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014aa:	4b20      	ldr	r3, [pc, #128]	@ (800152c <HAL_RCC_ClockConfig+0x1c4>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d001      	beq.n	80014bc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e032      	b.n	8001522 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d008      	beq.n	80014da <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014c8:	4b19      	ldr	r3, [pc, #100]	@ (8001530 <HAL_RCC_ClockConfig+0x1c8>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	4916      	ldr	r1, [pc, #88]	@ (8001530 <HAL_RCC_ClockConfig+0x1c8>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d009      	beq.n	80014fa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014e6:	4b12      	ldr	r3, [pc, #72]	@ (8001530 <HAL_RCC_ClockConfig+0x1c8>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	490e      	ldr	r1, [pc, #56]	@ (8001530 <HAL_RCC_ClockConfig+0x1c8>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014fa:	f000 f821 	bl	8001540 <HAL_RCC_GetSysClockFreq>
 80014fe:	4602      	mov	r2, r0
 8001500:	4b0b      	ldr	r3, [pc, #44]	@ (8001530 <HAL_RCC_ClockConfig+0x1c8>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	091b      	lsrs	r3, r3, #4
 8001506:	f003 030f 	and.w	r3, r3, #15
 800150a:	490a      	ldr	r1, [pc, #40]	@ (8001534 <HAL_RCC_ClockConfig+0x1cc>)
 800150c:	5ccb      	ldrb	r3, [r1, r3]
 800150e:	fa22 f303 	lsr.w	r3, r2, r3
 8001512:	4a09      	ldr	r2, [pc, #36]	@ (8001538 <HAL_RCC_ClockConfig+0x1d0>)
 8001514:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001516:	4b09      	ldr	r3, [pc, #36]	@ (800153c <HAL_RCC_ClockConfig+0x1d4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff f99e 	bl	800085c <HAL_InitTick>

  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40023c00 	.word	0x40023c00
 8001530:	40023800 	.word	0x40023800
 8001534:	08001ce4 	.word	0x08001ce4
 8001538:	20000000 	.word	0x20000000
 800153c:	20000004 	.word	0x20000004

08001540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001544:	b094      	sub	sp, #80	@ 0x50
 8001546:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	647b      	str	r3, [r7, #68]	@ 0x44
 800154c:	2300      	movs	r3, #0
 800154e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001550:	2300      	movs	r3, #0
 8001552:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001558:	4b79      	ldr	r3, [pc, #484]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x200>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 030c 	and.w	r3, r3, #12
 8001560:	2b08      	cmp	r3, #8
 8001562:	d00d      	beq.n	8001580 <HAL_RCC_GetSysClockFreq+0x40>
 8001564:	2b08      	cmp	r3, #8
 8001566:	f200 80e1 	bhi.w	800172c <HAL_RCC_GetSysClockFreq+0x1ec>
 800156a:	2b00      	cmp	r3, #0
 800156c:	d002      	beq.n	8001574 <HAL_RCC_GetSysClockFreq+0x34>
 800156e:	2b04      	cmp	r3, #4
 8001570:	d003      	beq.n	800157a <HAL_RCC_GetSysClockFreq+0x3a>
 8001572:	e0db      	b.n	800172c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001574:	4b73      	ldr	r3, [pc, #460]	@ (8001744 <HAL_RCC_GetSysClockFreq+0x204>)
 8001576:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001578:	e0db      	b.n	8001732 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800157a:	4b73      	ldr	r3, [pc, #460]	@ (8001748 <HAL_RCC_GetSysClockFreq+0x208>)
 800157c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800157e:	e0d8      	b.n	8001732 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001580:	4b6f      	ldr	r3, [pc, #444]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x200>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001588:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800158a:	4b6d      	ldr	r3, [pc, #436]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x200>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d063      	beq.n	800165e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001596:	4b6a      	ldr	r3, [pc, #424]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x200>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	099b      	lsrs	r3, r3, #6
 800159c:	2200      	movs	r2, #0
 800159e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80015a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80015a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80015aa:	2300      	movs	r3, #0
 80015ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80015ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80015b2:	4622      	mov	r2, r4
 80015b4:	462b      	mov	r3, r5
 80015b6:	f04f 0000 	mov.w	r0, #0
 80015ba:	f04f 0100 	mov.w	r1, #0
 80015be:	0159      	lsls	r1, r3, #5
 80015c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015c4:	0150      	lsls	r0, r2, #5
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4621      	mov	r1, r4
 80015cc:	1a51      	subs	r1, r2, r1
 80015ce:	6139      	str	r1, [r7, #16]
 80015d0:	4629      	mov	r1, r5
 80015d2:	eb63 0301 	sbc.w	r3, r3, r1
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80015e4:	4659      	mov	r1, fp
 80015e6:	018b      	lsls	r3, r1, #6
 80015e8:	4651      	mov	r1, sl
 80015ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015ee:	4651      	mov	r1, sl
 80015f0:	018a      	lsls	r2, r1, #6
 80015f2:	4651      	mov	r1, sl
 80015f4:	ebb2 0801 	subs.w	r8, r2, r1
 80015f8:	4659      	mov	r1, fp
 80015fa:	eb63 0901 	sbc.w	r9, r3, r1
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	f04f 0300 	mov.w	r3, #0
 8001606:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800160a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800160e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001612:	4690      	mov	r8, r2
 8001614:	4699      	mov	r9, r3
 8001616:	4623      	mov	r3, r4
 8001618:	eb18 0303 	adds.w	r3, r8, r3
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	462b      	mov	r3, r5
 8001620:	eb49 0303 	adc.w	r3, r9, r3
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	f04f 0200 	mov.w	r2, #0
 800162a:	f04f 0300 	mov.w	r3, #0
 800162e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001632:	4629      	mov	r1, r5
 8001634:	024b      	lsls	r3, r1, #9
 8001636:	4621      	mov	r1, r4
 8001638:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800163c:	4621      	mov	r1, r4
 800163e:	024a      	lsls	r2, r1, #9
 8001640:	4610      	mov	r0, r2
 8001642:	4619      	mov	r1, r3
 8001644:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001646:	2200      	movs	r2, #0
 8001648:	62bb      	str	r3, [r7, #40]	@ 0x28
 800164a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800164c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001650:	f7fe fdda 	bl	8000208 <__aeabi_uldivmod>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4613      	mov	r3, r2
 800165a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800165c:	e058      	b.n	8001710 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800165e:	4b38      	ldr	r3, [pc, #224]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x200>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	099b      	lsrs	r3, r3, #6
 8001664:	2200      	movs	r2, #0
 8001666:	4618      	mov	r0, r3
 8001668:	4611      	mov	r1, r2
 800166a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800166e:	623b      	str	r3, [r7, #32]
 8001670:	2300      	movs	r3, #0
 8001672:	627b      	str	r3, [r7, #36]	@ 0x24
 8001674:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001678:	4642      	mov	r2, r8
 800167a:	464b      	mov	r3, r9
 800167c:	f04f 0000 	mov.w	r0, #0
 8001680:	f04f 0100 	mov.w	r1, #0
 8001684:	0159      	lsls	r1, r3, #5
 8001686:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800168a:	0150      	lsls	r0, r2, #5
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4641      	mov	r1, r8
 8001692:	ebb2 0a01 	subs.w	sl, r2, r1
 8001696:	4649      	mov	r1, r9
 8001698:	eb63 0b01 	sbc.w	fp, r3, r1
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	f04f 0300 	mov.w	r3, #0
 80016a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80016a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80016ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80016b0:	ebb2 040a 	subs.w	r4, r2, sl
 80016b4:	eb63 050b 	sbc.w	r5, r3, fp
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	f04f 0300 	mov.w	r3, #0
 80016c0:	00eb      	lsls	r3, r5, #3
 80016c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016c6:	00e2      	lsls	r2, r4, #3
 80016c8:	4614      	mov	r4, r2
 80016ca:	461d      	mov	r5, r3
 80016cc:	4643      	mov	r3, r8
 80016ce:	18e3      	adds	r3, r4, r3
 80016d0:	603b      	str	r3, [r7, #0]
 80016d2:	464b      	mov	r3, r9
 80016d4:	eb45 0303 	adc.w	r3, r5, r3
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	f04f 0300 	mov.w	r3, #0
 80016e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016e6:	4629      	mov	r1, r5
 80016e8:	028b      	lsls	r3, r1, #10
 80016ea:	4621      	mov	r1, r4
 80016ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016f0:	4621      	mov	r1, r4
 80016f2:	028a      	lsls	r2, r1, #10
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016fa:	2200      	movs	r2, #0
 80016fc:	61bb      	str	r3, [r7, #24]
 80016fe:	61fa      	str	r2, [r7, #28]
 8001700:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001704:	f7fe fd80 	bl	8000208 <__aeabi_uldivmod>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4613      	mov	r3, r2
 800170e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001710:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x200>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	0c1b      	lsrs	r3, r3, #16
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	3301      	adds	r3, #1
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001720:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001722:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001724:	fbb2 f3f3 	udiv	r3, r2, r3
 8001728:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800172a:	e002      	b.n	8001732 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800172c:	4b05      	ldr	r3, [pc, #20]	@ (8001744 <HAL_RCC_GetSysClockFreq+0x204>)
 800172e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001730:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001732:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001734:	4618      	mov	r0, r3
 8001736:	3750      	adds	r7, #80	@ 0x50
 8001738:	46bd      	mov	sp, r7
 800173a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800
 8001744:	00f42400 	.word	0x00f42400
 8001748:	007a1200 	.word	0x007a1200

0800174c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e08f      	b.n	8001880 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001766:	b2db      	uxtb	r3, r3
 8001768:	2b00      	cmp	r3, #0
 800176a:	d106      	bne.n	800177a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7fe ffb5 	bl	80006e4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2202      	movs	r2, #2
 800177e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6899      	ldr	r1, [r3, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b3e      	ldr	r3, [pc, #248]	@ (8001888 <HAL_TIM_Encoder_Init+0x13c>)
 800178e:	400b      	ands	r3, r1
 8001790:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3304      	adds	r3, #4
 800179a:	4619      	mov	r1, r3
 800179c:	4610      	mov	r0, r2
 800179e:	f000 f909 	bl	80019b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	4b31      	ldr	r3, [pc, #196]	@ (800188c <HAL_TIM_Encoder_Init+0x140>)
 80017c8:	4013      	ands	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	021b      	lsls	r3, r3, #8
 80017d6:	4313      	orrs	r3, r2
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4313      	orrs	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001890 <HAL_TIM_Encoder_Init+0x144>)
 80017e2:	4013      	ands	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001894 <HAL_TIM_Encoder_Init+0x148>)
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	68da      	ldr	r2, [r3, #12]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	021b      	lsls	r3, r3, #8
 80017f8:	4313      	orrs	r3, r2
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	011a      	lsls	r2, r3, #4
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	031b      	lsls	r3, r3, #12
 800180c:	4313      	orrs	r3, r2
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800181a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8001822:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	011b      	lsls	r3, r3, #4
 800182e:	4313      	orrs	r3, r2
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	4313      	orrs	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2201      	movs	r2, #1
 800185a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2201      	movs	r2, #1
 800186a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2201      	movs	r2, #1
 800187a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	fffebff8 	.word	0xfffebff8
 800188c:	fffffcfc 	.word	0xfffffcfc
 8001890:	fffff3f3 	.word	0xfffff3f3
 8001894:	ffff0f0f 	.word	0xffff0f0f

08001898 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80018a8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80018b0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80018b8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80018c0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d110      	bne.n	80018ea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d102      	bne.n	80018d4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80018ce:	7b7b      	ldrb	r3, [r7, #13]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d001      	beq.n	80018d8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e069      	b.n	80019ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2202      	movs	r2, #2
 80018dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2202      	movs	r2, #2
 80018e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80018e8:	e031      	b.n	800194e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d110      	bne.n	8001912 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80018f0:	7bbb      	ldrb	r3, [r7, #14]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d102      	bne.n	80018fc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80018f6:	7b3b      	ldrb	r3, [r7, #12]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d001      	beq.n	8001900 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e055      	b.n	80019ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2202      	movs	r2, #2
 8001904:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2202      	movs	r2, #2
 800190c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001910:	e01d      	b.n	800194e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001912:	7bfb      	ldrb	r3, [r7, #15]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d108      	bne.n	800192a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001918:	7bbb      	ldrb	r3, [r7, #14]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d105      	bne.n	800192a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800191e:	7b7b      	ldrb	r3, [r7, #13]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d102      	bne.n	800192a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001924:	7b3b      	ldrb	r3, [r7, #12]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d001      	beq.n	800192e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e03e      	b.n	80019ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2202      	movs	r2, #2
 8001932:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2202      	movs	r2, #2
 800193a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2202      	movs	r2, #2
 8001942:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2202      	movs	r2, #2
 800194a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <HAL_TIM_Encoder_Start+0xc4>
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	2b04      	cmp	r3, #4
 8001958:	d008      	beq.n	800196c <HAL_TIM_Encoder_Start+0xd4>
 800195a:	e00f      	b.n	800197c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2201      	movs	r2, #1
 8001962:	2100      	movs	r1, #0
 8001964:	4618      	mov	r0, r3
 8001966:	f000 f8d1 	bl	8001b0c <TIM_CCxChannelCmd>
      break;
 800196a:	e016      	b.n	800199a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2201      	movs	r2, #1
 8001972:	2104      	movs	r1, #4
 8001974:	4618      	mov	r0, r3
 8001976:	f000 f8c9 	bl	8001b0c <TIM_CCxChannelCmd>
      break;
 800197a:	e00e      	b.n	800199a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2201      	movs	r2, #1
 8001982:	2100      	movs	r1, #0
 8001984:	4618      	mov	r0, r3
 8001986:	f000 f8c1 	bl	8001b0c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2201      	movs	r2, #1
 8001990:	2104      	movs	r1, #4
 8001992:	4618      	mov	r0, r3
 8001994:	f000 f8ba 	bl	8001b0c <TIM_CCxChannelCmd>
      break;
 8001998:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f042 0201 	orr.w	r2, r2, #1
 80019a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a46      	ldr	r2, [pc, #280]	@ (8001ae0 <TIM_Base_SetConfig+0x12c>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d013      	beq.n	80019f4 <TIM_Base_SetConfig+0x40>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019d2:	d00f      	beq.n	80019f4 <TIM_Base_SetConfig+0x40>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a43      	ldr	r2, [pc, #268]	@ (8001ae4 <TIM_Base_SetConfig+0x130>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d00b      	beq.n	80019f4 <TIM_Base_SetConfig+0x40>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a42      	ldr	r2, [pc, #264]	@ (8001ae8 <TIM_Base_SetConfig+0x134>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d007      	beq.n	80019f4 <TIM_Base_SetConfig+0x40>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a41      	ldr	r2, [pc, #260]	@ (8001aec <TIM_Base_SetConfig+0x138>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d003      	beq.n	80019f4 <TIM_Base_SetConfig+0x40>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a40      	ldr	r2, [pc, #256]	@ (8001af0 <TIM_Base_SetConfig+0x13c>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d108      	bne.n	8001a06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80019fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a35      	ldr	r2, [pc, #212]	@ (8001ae0 <TIM_Base_SetConfig+0x12c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d02b      	beq.n	8001a66 <TIM_Base_SetConfig+0xb2>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a14:	d027      	beq.n	8001a66 <TIM_Base_SetConfig+0xb2>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a32      	ldr	r2, [pc, #200]	@ (8001ae4 <TIM_Base_SetConfig+0x130>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d023      	beq.n	8001a66 <TIM_Base_SetConfig+0xb2>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a31      	ldr	r2, [pc, #196]	@ (8001ae8 <TIM_Base_SetConfig+0x134>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d01f      	beq.n	8001a66 <TIM_Base_SetConfig+0xb2>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a30      	ldr	r2, [pc, #192]	@ (8001aec <TIM_Base_SetConfig+0x138>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d01b      	beq.n	8001a66 <TIM_Base_SetConfig+0xb2>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a2f      	ldr	r2, [pc, #188]	@ (8001af0 <TIM_Base_SetConfig+0x13c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d017      	beq.n	8001a66 <TIM_Base_SetConfig+0xb2>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a2e      	ldr	r2, [pc, #184]	@ (8001af4 <TIM_Base_SetConfig+0x140>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d013      	beq.n	8001a66 <TIM_Base_SetConfig+0xb2>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a2d      	ldr	r2, [pc, #180]	@ (8001af8 <TIM_Base_SetConfig+0x144>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d00f      	beq.n	8001a66 <TIM_Base_SetConfig+0xb2>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a2c      	ldr	r2, [pc, #176]	@ (8001afc <TIM_Base_SetConfig+0x148>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d00b      	beq.n	8001a66 <TIM_Base_SetConfig+0xb2>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a2b      	ldr	r2, [pc, #172]	@ (8001b00 <TIM_Base_SetConfig+0x14c>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d007      	beq.n	8001a66 <TIM_Base_SetConfig+0xb2>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a2a      	ldr	r2, [pc, #168]	@ (8001b04 <TIM_Base_SetConfig+0x150>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d003      	beq.n	8001a66 <TIM_Base_SetConfig+0xb2>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a29      	ldr	r2, [pc, #164]	@ (8001b08 <TIM_Base_SetConfig+0x154>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d108      	bne.n	8001a78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a10      	ldr	r2, [pc, #64]	@ (8001ae0 <TIM_Base_SetConfig+0x12c>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d003      	beq.n	8001aac <TIM_Base_SetConfig+0xf8>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a12      	ldr	r2, [pc, #72]	@ (8001af0 <TIM_Base_SetConfig+0x13c>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d103      	bne.n	8001ab4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	691a      	ldr	r2, [r3, #16]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d105      	bne.n	8001ad2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	f023 0201 	bic.w	r2, r3, #1
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	611a      	str	r2, [r3, #16]
  }
}
 8001ad2:	bf00      	nop
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	40010000 	.word	0x40010000
 8001ae4:	40000400 	.word	0x40000400
 8001ae8:	40000800 	.word	0x40000800
 8001aec:	40000c00 	.word	0x40000c00
 8001af0:	40010400 	.word	0x40010400
 8001af4:	40014000 	.word	0x40014000
 8001af8:	40014400 	.word	0x40014400
 8001afc:	40014800 	.word	0x40014800
 8001b00:	40001800 	.word	0x40001800
 8001b04:	40001c00 	.word	0x40001c00
 8001b08:	40002000 	.word	0x40002000

08001b0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b087      	sub	sp, #28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	f003 031f 	and.w	r3, r3, #31
 8001b1e:	2201      	movs	r2, #1
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6a1a      	ldr	r2, [r3, #32]
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	401a      	ands	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6a1a      	ldr	r2, [r3, #32]
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	f003 031f 	and.w	r3, r3, #31
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	fa01 f303 	lsl.w	r3, r1, r3
 8001b44:	431a      	orrs	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	621a      	str	r2, [r3, #32]
}
 8001b4a:	bf00      	nop
 8001b4c:	371c      	adds	r7, #28
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d101      	bne.n	8001b70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	e06d      	b.n	8001c4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a30      	ldr	r2, [pc, #192]	@ (8001c58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d004      	beq.n	8001ba4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a2f      	ldr	r2, [pc, #188]	@ (8001c5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d108      	bne.n	8001bb6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8001baa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001bbc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a20      	ldr	r2, [pc, #128]	@ (8001c58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d022      	beq.n	8001c20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001be2:	d01d      	beq.n	8001c20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a1d      	ldr	r2, [pc, #116]	@ (8001c60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d018      	beq.n	8001c20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a1c      	ldr	r2, [pc, #112]	@ (8001c64 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d013      	beq.n	8001c20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a1a      	ldr	r2, [pc, #104]	@ (8001c68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d00e      	beq.n	8001c20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a15      	ldr	r2, [pc, #84]	@ (8001c5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d009      	beq.n	8001c20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a16      	ldr	r2, [pc, #88]	@ (8001c6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d004      	beq.n	8001c20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a15      	ldr	r2, [pc, #84]	@ (8001c70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d10c      	bne.n	8001c3a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	40010000 	.word	0x40010000
 8001c5c:	40010400 	.word	0x40010400
 8001c60:	40000400 	.word	0x40000400
 8001c64:	40000800 	.word	0x40000800
 8001c68:	40000c00 	.word	0x40000c00
 8001c6c:	40014000 	.word	0x40014000
 8001c70:	40001800 	.word	0x40001800

08001c74 <memset>:
 8001c74:	4402      	add	r2, r0
 8001c76:	4603      	mov	r3, r0
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d100      	bne.n	8001c7e <memset+0xa>
 8001c7c:	4770      	bx	lr
 8001c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8001c82:	e7f9      	b.n	8001c78 <memset+0x4>

08001c84 <__libc_init_array>:
 8001c84:	b570      	push	{r4, r5, r6, lr}
 8001c86:	4d0d      	ldr	r5, [pc, #52]	@ (8001cbc <__libc_init_array+0x38>)
 8001c88:	4c0d      	ldr	r4, [pc, #52]	@ (8001cc0 <__libc_init_array+0x3c>)
 8001c8a:	1b64      	subs	r4, r4, r5
 8001c8c:	10a4      	asrs	r4, r4, #2
 8001c8e:	2600      	movs	r6, #0
 8001c90:	42a6      	cmp	r6, r4
 8001c92:	d109      	bne.n	8001ca8 <__libc_init_array+0x24>
 8001c94:	4d0b      	ldr	r5, [pc, #44]	@ (8001cc4 <__libc_init_array+0x40>)
 8001c96:	4c0c      	ldr	r4, [pc, #48]	@ (8001cc8 <__libc_init_array+0x44>)
 8001c98:	f000 f818 	bl	8001ccc <_init>
 8001c9c:	1b64      	subs	r4, r4, r5
 8001c9e:	10a4      	asrs	r4, r4, #2
 8001ca0:	2600      	movs	r6, #0
 8001ca2:	42a6      	cmp	r6, r4
 8001ca4:	d105      	bne.n	8001cb2 <__libc_init_array+0x2e>
 8001ca6:	bd70      	pop	{r4, r5, r6, pc}
 8001ca8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cac:	4798      	blx	r3
 8001cae:	3601      	adds	r6, #1
 8001cb0:	e7ee      	b.n	8001c90 <__libc_init_array+0xc>
 8001cb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cb6:	4798      	blx	r3
 8001cb8:	3601      	adds	r6, #1
 8001cba:	e7f2      	b.n	8001ca2 <__libc_init_array+0x1e>
 8001cbc:	08001cfc 	.word	0x08001cfc
 8001cc0:	08001cfc 	.word	0x08001cfc
 8001cc4:	08001cfc 	.word	0x08001cfc
 8001cc8:	08001d00 	.word	0x08001d00

08001ccc <_init>:
 8001ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cce:	bf00      	nop
 8001cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cd2:	bc08      	pop	{r3}
 8001cd4:	469e      	mov	lr, r3
 8001cd6:	4770      	bx	lr

08001cd8 <_fini>:
 8001cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cda:	bf00      	nop
 8001cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cde:	bc08      	pop	{r3}
 8001ce0:	469e      	mov	lr, r3
 8001ce2:	4770      	bx	lr
